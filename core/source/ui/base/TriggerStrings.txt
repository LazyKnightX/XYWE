[[@COMPILE-TRIM-TAB]]
[[@COMPILE-CLEAR:#]]
[TriggerEventStrings]
	// XYWE
		// D 单位
			XYSplitLine_TriggerEvents_Unit_1="------------------------------------"
				XYSplitLine_TriggerEvents_Unit_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerEvents_Unit_2="------------------------------------"
				XYSplitLine_TriggerEvents_Unit_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// S 事件
			XYSplitLine_TriggerEvents_Event_1="------------------------------------"
				XYSplitLine_TriggerEvents_Event_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerEvents_Event_2="------------------------------------"
				XYSplitLine_TriggerEvents_Event_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// W 玩家
			XYSplitLine_TriggerEvents_Player_1="------------------------------------"
				XYSplitLine_TriggerEvents_Player_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerEvents_Player_2="------------------------------------"
				XYSplitLine_TriggerEvents_Player_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
	// Normal
		MapInitializationEvent="地图初始化"
			// Special events (not defined in common.j)
			// handled internally by the editor
			MapInitializationEvent="地图初始化"
			MapInitializationEventHint="本事件发生在地图数据加载完成之后，游戏开始之前"
	// Lua
		LuaInEvent="自定义事件 [W]"
			LuaInEvent="自定义事件: ",~自定义事件名字," [W]"
			LuaInEventHint="(请勿与[U]的自定义事件混用)使用 'X 系统 - 自定义事件 - 执行 [W]' 来触发本事件"
	// unWE
		unWETriggerListAddNew="自定义事件 [U]"
			unWETriggerListAddNew="自定义事件: ",~自定义事件名字," [U]"
			unWETriggerListAddNewHint="(请勿与[W]的自定义事件混用)使用 'X 系统 - 响应自定义事件 [U]' 来运行这个触发器"
	// Game events
		TriggerRegisterVariableEvent="实数变量事件"
			TriggerRegisterVariableEvent=~实数变量," 的值 ",~Operation," ",~值
			TriggerRegisterVariableEventHint=
		TriggerRegisterGameLoadedEventBJ="游戏读档完毕时"
			TriggerRegisterGameLoadedEventBJ="读取游戏存档完毕"
			TriggerRegisterGameLoadedEventBJHint="当游戏读取完毕时，触发本事件"
		TriggerRegisterGameSavedEventBJ="游戏存档前"
			TriggerRegisterGameSavedEventBJ="保存游戏存档前"
			TriggerRegisterGameSavedEventBJHint="在按下保存按钮之后，开始保存游戏之前，触发本事件"
		TriggerRegisterShowSkillEventBJ="英雄学习技能按钮 被点击"
			TriggerRegisterShowSkillEventBJ="英雄学习技能按钮被点击"
			TriggerRegisterShowSkillEventBJHint="点击英雄的学习技能按钮时触发的事件，无论是用鼠标还是键盘点击均会触发"
		TriggerRegisterBuildSubmenuEventBJ="建造建筑按钮 被点击"
			TriggerRegisterBuildSubmenuEventBJ="建造建筑按钮被点击"
			TriggerRegisterBuildSubmenuEventBJHint="点击建造建筑按钮时触发的事件，无论是用鼠标还是键盘点击均会触发"
		TriggerRegisterGameEvent="比赛游戏事件"
			TriggerRegisterGameEvent="该游戏将在 ",~Event Type," 后结束"
			TriggerRegisterGameEventHint="该事件只出现在Battle.net的自动匹配游戏中"
	// Timer events
		TriggerRegisterGameStateEventTimeOfDay="游戏时间改变"
			TriggerRegisterGameStateEventTimeOfDay="当游戏时间 ",~Operation," ",~时间
			TriggerRegisterGameStateEventTimeOfDayHint="游戏时间采用24小时制。早上从6:00开始，下午从18:00开始，可以在平衡性常数中调整游戏一天对应现实的秒数。"
		TriggerRegisterTimerEventSingle="游戏计时(单次)"
			TriggerRegisterTimerEventSingle="当游戏逝去 ",~Time," 秒"
			TriggerRegisterTimerEventSingleHint="从事件开始的那一刻开始计时"
		TriggerRegisterTimerEventPeriodic="游戏计时(循环)"
			TriggerRegisterTimerEventPeriodic="每当游戏逝去 ",~Time," 秒"
			TriggerRegisterTimerEventPeriodicHint="从事件开始的那一刻开始计时，计时完毕后会重新计时"
		TriggerRegisterTimerExpireEventBJ="计时器到期"
			TriggerRegisterTimerExpireEventBJ=~计时器," 到期"
			TriggerRegisterTimerExpireEventBJHint="每当计时器到0时触发本事件。使用'事件响应 - 到期的计时器'来获取计时器。可以使用循环计时器来多次触发本事件。"
	// Dialog events
		TriggerRegisterDialogEventBJ="对话框被点击"
			TriggerRegisterDialogEventBJ=~对话框," 被点击"
			TriggerRegisterDialogEventBJHint="通过 '事件响应 - 被点击的对话框' 来操作触发本事件的对话框"
		TriggerRegisterDialogButtonEvent="对话框按钮被点击 [C]"
			TriggerRegisterDialogButtonEvent=~对话框按钮," 被点击"
			TriggerRegisterDialogButtonEventHint="该事件通常会在别的触发器中用动作'触发器 - 添加事件'来动态添加给特定触发器"
	// Trackable events
		TriggerRegisterTrackableHitEvent="鼠标点击可追踪物"
			TriggerRegisterTrackableHitEvent="鼠标点击 ",~可追踪物
			TriggerRegisterTrackableHitEventHint=
		TriggerRegisterTrackableTrackEvent="鼠标移动到可追踪物"
			TriggerRegisterTrackableTrackEvent="鼠标移动到 ",~可追踪物
			TriggerRegisterTrackableTrackEventHint=
	// Player events
		TriggerRegisterPlayerChatEvent="输入聊天信息"
			TriggerRegisterPlayerChatEvent=~玩家," 输入 ",~聊天信息," ,信息过滤方式 ",~信息过滤方式
			TriggerRegisterPlayerChatEventHint="事件ID: 096"
		TriggerRegisterPlayerEventEndCinematic="按下Esc键"
			TriggerRegisterPlayerEventEndCinematic=~玩家," 按下Esc键"
			TriggerRegisterPlayerEventEndCinematicHint="该事件在玩家按下'Esc(Escape)'键时触发，可用于制作跳过电影功能"
		TriggerRegisterPlayerSelectionEventBJ="选择/取消选择 单位"
			TriggerRegisterPlayerSelectionEventBJ=~玩家," ",~选择/取消选择," 一个单位"
			TriggerRegisterPlayerSelectionEventBJHint="通过'事件回应 - 触发单位' 操作被玩家选择的单位."
		TriggerRegisterPlayerKeyEventBJ="按下/释放 方向键"
			TriggerRegisterPlayerKeyEventBJ=~玩家," ",~按下/释放," ",~方向键," "
			TriggerRegisterPlayerKeyEventBJHint="目前游戏只支持'Up/Down/Left/Right'四个方向键"
		TriggerRegisterPlayerStateEvent="属性事件"
			TriggerRegisterPlayerStateEvent=~玩家," 的 ",~属性," 属性 ",~Operation," ",~值
			TriggerRegisterPlayerStateEventHint=""
		TriggerRegisterPlayerEventAllianceChanged="结盟状态事件(任意状态)"
			TriggerRegisterPlayerEventAllianceChanged=~玩家," 改变结盟状态设定"
			TriggerRegisterPlayerEventAllianceChangedHint=
		TriggerRegisterPlayerAllianceChange="结盟状态更改(指定项目)"
			TriggerRegisterPlayerAllianceChange=~玩家," 更改 ",~结盟项目," 设置"
			TriggerRegisterPlayerAllianceChangeHint="当被改变的结盟项目为 共享单位 时，'触发玩家'会无效，不建议此时使用 任意玩家 事件。"
		TriggerRegisterPlayerEventVictory="游戏胜利"
			TriggerRegisterPlayerEventVictory=~玩家," 胜利后，离开游戏之前"
			TriggerRegisterPlayerEventVictoryHint=
		TriggerRegisterPlayerEventDefeat="游戏失败"
			TriggerRegisterPlayerEventDefeat=~玩家," 失败后，离开游戏之前"
			TriggerRegisterPlayerEventDefeatHint=
		TriggerRegisterPlayerEventLeave="离开游戏"
			TriggerRegisterPlayerEventLeave=~玩家," 离开游戏后"
			TriggerRegisterPlayerEventLeaveHint="指定玩家离开游戏时，触发本事件"
	// Destructible events
		TriggerRegisterDeathEvent="可破坏物死亡"
			TriggerRegisterDeathEvent=~可破坏物," 死亡"
			TriggerRegisterDeathEventHint="使用 '事件响应 - 死亡的可破坏物' 来获取死亡的可破坏物"
		TriggerRegisterDestDeathInRegionEvent="可破坏物死亡(在矩形区域内)"
			TriggerRegisterDestDeathInRegionEvent="可破坏物在 ",~矩形区域," 内死亡"
			TriggerRegisterDestDeathInRegionEventHint="不建议新手使用本事件。该事件默认只监视最多64个可破坏物，可以使用'set bj_destInRegionDiesCount = XXX'来修改该值"
	// Item events
		TriggerRegisterItemDeathEvent="物品被破坏"
			TriggerRegisterItemDeathEvent=~物品," 被破坏"
			TriggerRegisterItemDeathEventHint=
	// Unit events
		TriggerRegisterUnitEvent="指定单位事件"
			TriggerRegisterUnitEvent=~指定单位," ",~事件
			TriggerRegisterUnitEventHint=
		TriggerRegisterPlayerUnitEventSimple="玩家单位事件"
			TriggerRegisterPlayerUnitEventSimple=~玩家," 的单位 ",~事件
			TriggerRegisterPlayerUnitEventSimpleHint=
		TriggerRegisterAnyUnitEventBJ="任意单位事件"
			TriggerRegisterAnyUnitEventBJ="任意单位 ",~事件
			TriggerRegisterAnyUnitEventBJHint=
		TriggerRegisterEnterRectSimple="任意单位进入矩形区域"
			TriggerRegisterEnterRectSimple="任意单位进入 ",~矩形区域
			TriggerRegisterEnterRectSimpleHint="使用'事件响应 - 进入的单位'来响应进入该区域的单位. 事实上是创建不规则区域，并注册单位进入不规则区域事件,所以之后改动该矩形区域对事件不会产生任何影响."
		TriggerRegisterLeaveRectSimple="任意单位离开矩形区域"
			TriggerRegisterLeaveRectSimple="任意单位离开 ",~矩形区域
			TriggerRegisterLeaveRectSimpleHint="使用'事件响应 - 离开的单位'来响应离开该区域的单位. 事实上是创建不规则区域，并注册单位离开不规则区域事件,所以之后改动该矩形区域对事件不会产生任何影响."
		TriggerRegisterEnterRegionSimple="任意单位进入不规则区域"
			TriggerRegisterEnterRegionSimple="任意单位进入 ",~不规则区域
			TriggerRegisterEnterRegionSimpleHint="使用'事件响应 - 进入的单位'来响应进入该区域的单位. 该事件需要在其他触发为其添加"
		TriggerRegisterLeaveRegionSimple="任意单位离开不规则区域"
			TriggerRegisterLeaveRegionSimple="任意单位离开 ",~不规则区域
			TriggerRegisterLeaveRegionSimpleHint="使用'事件响应 - 离开的单位'来响应离开该区域的单位. 该事件需要在其他触发为其添加"
		TriggerRegisterEnterRegion="任意单位进入不规则区域(指定条件)"
			TriggerRegisterEnterRegion="任意单位进入 ",~不规则区域," 并满足 ",~条件
			TriggerRegisterEnterRegionHint="使用'事件响应 - 进入的单位'来响应进入该区域的单位. 该事件需要在其他触发为其添加"
		TriggerRegisterLeaveRegion="任意单位离开不规则区域(指定条件)"
			TriggerRegisterLeaveRegion="任意单位离开 ",~不规则区域," 并满足 ",~条件
			TriggerRegisterLeaveRegionHint="使用'事件响应 - 离开的单位'来响应离开该区域的单位. 该事件需要在其他触发为其添加"
		TriggerRegisterUnitInRangeSimple="任意单位进入单位附近"
			TriggerRegisterUnitInRangeSimple="任意单位进入半径为 ",~半径," ，以 ",~单位," 所在位置为中心的范围内"
			TriggerRegisterUnitInRangeSimpleHint="使用'事件响应 - 触发单位'来获取进入范围的单位。拥有'蝗虫'技能的单位不会触发本事件(由Snake提供)"
		TriggerRegisterUnitLifeEvent="指定单位生命值改变"
			TriggerRegisterUnitLifeEvent=~指定单位," 的生命值变为 ",~Operation," ",~Value
			TriggerRegisterUnitLifeEventHint="从不成立变为成立时触发该事件。注意：该对比值在注册事件时就被设定为固定值，如果使用的是变量，对比值不会因为变量的值的变化而变化"
		TriggerRegisterUnitManaEvent="指定单位魔法值改变"
			TriggerRegisterUnitManaEvent=~指定单位," 的魔法值变为 ",~Operation," ",~Value
			TriggerRegisterUnitManaEventHint="从不成立变为成立时触发该事件。注意：该对比值在注册事件时就被设定为固定值，如果使用的是变量，对比值不会因为变量的值的变化而变化"
	// YD Event Trigger
		YDWESyStemAnyUnitDamagedRegistTrigger="任意单位接受伤害事件 [Y]"
			YDWESyStemAnyUnitDamagedRegistTrigger="任意单位 接受伤害"
			YDWESyStemAnyUnitDamagedRegistTriggerHint="不推荐新手使用。若触发器动作里有对单位造成伤害动作，会引起死循环，最好加入条件判断或在伤害前关闭当前触发器"
		YDWESyStemItemUnmovableRegistTrigger="任意单位移动物品事件 [Y]"
			YDWESyStemItemUnmovableRegistTrigger="任意单位 移动物品栏里的物品"
			YDWESyStemItemUnmovableRegistTriggerHint="不推荐新手使用。若触发器动作里有移动物品的动作，会引起死循环，最好将移动物品的动作放到别的触发器内或移动物品前关闭当前触发器。"
		YDWESyStemItemCombineRegistTrigger="任意单位合成物品事件 [Y]"
			YDWESyStemItemCombineRegistTrigger="任意单位 合成一件物品"
			YDWESyStemItemCombineRegistTriggerHint="用于响应物品合成系统。用'最后合成的物品'来捕获被合成的物品，用'触发单位'捕获合成物品的单位"
		YDWESyStemAbilityCastingOverRegistTrigger="任意单位结束施放特殊技能 [Y]"
			YDWESyStemAbilityCastingOverRegistTrigger="任意单位结束施放特殊技能 ",~特殊技能,""
			YDWESyStemAbilityCastingOverRegistTriggerHint="用来响应跳跃、环绕、钩子等YDWE提供的特殊技能。用'最后结束施放特殊技能的单位'捕获施法者"
	// 逆天
		YDWEDisableRegister="休眠 [Y]"
			YDWEDisableRegister="休眠"
			YDWEDisableRegisterHint="休眠的触发器不会在读取地图时被注册，必须使用'激活触发'来手动激活"
	// DYC
		DYCAnyUnitChargedRegistTrigger="任意单位被冲锋 [D]"
			DYCAnyUnitChargedRegistTrigger="任意单位 被冲锋 [D]"
			DYCAnyUnitChargedRegistTriggerHint="配合冲锋系统使用。不能被'触发单位'捕获，用'冲锋者'和'被冲锋单位'捕获"
		DYCAnyUnitChargeOverRegistTrigger="任意单位完成冲锋 [D]"
			DYCAnyUnitChargeOverRegistTrigger="任意单位 完成冲锋 [D]"
			DYCAnyUnitChargeOverRegistTriggerHint="配合冲锋系统使用。不能被'触发单位'捕获，用'冲锋者'和'被冲锋单位'捕获"
		DYCAnyUnitChargeStopRegistTrigger="任意单位停止冲锋 [D]"
			DYCAnyUnitChargeStopRegistTrigger="任意单位 停止冲锋 [D]"
			DYCAnyUnitChargeStopRegistTriggerHint="配合冲锋系统使用。不能被'触发单位'捕获，用'冲锋者'和'被冲锋单位'捕获"
		DYCAnyUnitDDOverRegistTrigger="任意单位伤害显示完毕 [D]"
			DYCAnyUnitDDOverRegistTrigger="任意单位 伤害显示完毕 [D]"
			DYCAnyUnitDDOverRegistTriggerHint="配合伤害显示使用。不能被'触发单位'捕获，用'伤害显示单位'和'显示的伤害的来源'捕获"
[TriggerConditionStrings]
	OperatorCompareBoolean="B 布尔表达式"
		OperatorCompareBoolean=~表达式A," ",~Operator," ",~表达式B
		OperatorCompareBooleanHint=
	OperatorCompareTrigger="C 触发器"
		OperatorCompareTrigger=~触发器," ",~Operator," ",~触发器
		OperatorCompareTriggerHint=
	OperatorCompareUnit="D 单位"
		OperatorCompareUnit=~单位," ",~Operator," ",~单位
		OperatorCompareUnitHint=
	OperatorCompareUnitCode="D 单位类型"
		OperatorCompareUnitCode=~单位类型," ",~Operator," ",~单位类型
		OperatorCompareUnitCodeHint=
	OperatorCompareTerrainType="D 地形"
		OperatorCompareTerrainType=~地形," ",~Operator," ",~地形
		OperatorCompareTerrainTypeHint=
	OperatorComparePoint="D 点"
		OperatorComparePoint=~点," ",~Operator," ",~点
		OperatorComparePointHint=
	OperatorCompareDialog="D 对话框"
		OperatorCompareDialog=~对话框," ",~Operator," ",~对话框
		OperatorCompareDialogHint=
	OperatorCompareButton="D 对话框按钮"
		OperatorCompareButton=~对话框按钮," ",~Operator," ",~对话框按钮
		OperatorCompareButtonHint=
	OperatorCompareMeleeDifficulty="D 对战AI难度"
		OperatorCompareMeleeDifficulty=~对战AI难度," ",~Operator," ",~对战AI难度
		OperatorCompareMeleeDifficultyHint=
	OperatorCompareAbilityId="J 技能"
		OperatorCompareAbilityId=~技能," ",~Operator," ",~技能
		OperatorCompareAbilityIdHint=
	OperatorCompareTimer="J 计时器"
		OperatorCompareTimer=~计时器," ",~Operator," ",~计时器
		OperatorCompareTimerHint=
	OperatorCompareTechCode="K 科技"
		OperatorCompareTechCode=~科技," ",~Operator," ",~科技
		OperatorCompareTechCodeHint=
	OperatorCompareDestructible="K 可破坏物"
		OperatorCompareDestructible=~可破坏物," ",~Operator," ",~可破坏物
		OperatorCompareDestructibleHint=
	OperatorCompareDestructableCode="K 可破坏物类型"
		OperatorCompareDestructableCode=~可破坏物类型," ",~Operator," ",~可破坏物类型
		OperatorCompareDestructableCodeHint=
	OperatorCompareTrackable="K 可追踪物"
		OperatorCompareTrackable=~可追踪物," ",~Operator," ",~可追踪物
		OperatorCompareTrackableHint=
	OperatorCompareOrderCode="M 命令ID"
		OperatorCompareOrderCode=~命令ID," ",~Operator," ",~命令ID
		OperatorCompareOrderCodeHint=
	OperatorCompareBuffId="M 魔法效果"
		OperatorCompareBuffId=~魔法效果," ",~Operator," ",~魔法效果
		OperatorCompareBuffIdHint=
	OperatorCompareRegion="Q 区域(矩形)"
		OperatorCompareRegion=~区域(矩形)," ",~Operator," ",~区域(矩形)
		OperatorCompareRegionHint=
	OperatorCompareRegionR="Q 区域(不规则)"
		OperatorCompareRegionR=~区域(不规则)," ",~Operator," ",~区域(不规则)
		OperatorCompareRegionRHint=
	OperatorCompareReal="S 实数"
		OperatorCompareReal=~实数," ",~Operator," ",~实数
		OperatorCompareRealHint=
	OperatorCompareDegree="J 角度"
		OperatorCompareDegree=~角度," ",~Operator," ",~角度
		OperatorCompareDegreeHint=
	OperatorCompareRadian="H 弧度"
		OperatorCompareRadian=~弧度," ",~Operator," ",~弧度
		OperatorCompareRadianHint=
	OperatorComparePlayer="W 玩家"
		OperatorComparePlayer=~玩家," ",~Operator," ",~玩家
		OperatorComparePlayerHint=
	OperatorComparePlayerColor="W 玩家颜色"
		OperatorComparePlayerColor=~玩家颜色," ",~Operator," ",~玩家颜色
		OperatorComparePlayerColorHint=
	OperatorComparePlayerControl="W 玩家控制者"
		OperatorComparePlayerControl=~玩家控制者," ",~Operator," ",~玩家控制者
		OperatorComparePlayerControlHint=
	OperatorComparePlayerSlotStatus="W 玩家游戏状态"
		OperatorComparePlayerSlotStatus=~玩家游戏状态," ",~Operator," ",~玩家游戏状态
		OperatorComparePlayerSlotStatusHint=
	OperatorCompareItem="W 物品"
		OperatorCompareItem=~物品," ",~Operator," ",~物品
		OperatorCompareItemHint=
	OperatorCompareItemType="W 物品分类"
		OperatorCompareItemType=~物品分类," ",~Operator," ",~物品分类
		OperatorCompareItemTypeHint=
	OperatorCompareItemCode="W 物品类型"
		OperatorCompareItemCode=~物品类型," ",~Operator," ",~物品类型
		OperatorCompareItemCodeHint=
	OperatorCompareHeroSkill="X 学习技能"
		OperatorCompareHeroSkill=~学习技能," ",~Operator," ",~学习技能
		OperatorCompareHeroSkillHint=
	OperatorCompareGameDifficulty="Y 游戏难度"
		OperatorCompareGameDifficulty=~游戏难度," ",~Operator," ",~游戏难度
		OperatorCompareGameDifficultyHint=
	OperatorCompareGameSpeed="Y 游戏速度"
		OperatorCompareGameSpeed=~游戏速度," ",~Operator," ",~游戏速度
		OperatorCompareGameSpeedHint=
	OperatorCompareInteger="Z 整数"
		OperatorCompareInteger=~整数," ",~Operator," ",~整数
		OperatorCompareIntegerHint=
	OperatorCompareRace="Z 种族"
		OperatorCompareRace=~种族," ",~Operator," ",~种族
		OperatorCompareRaceHint=
	OperatorCompareString="Z 字符串"
		OperatorCompareString=~字符串," ",~Operator," ",~字符串
		OperatorCompareStringHint=
	AndMultiple=". 且(多个条件)"
		AndMultiple="且 - 所有条件成立"
		AndMultipleHint="用该功能添加的条件必须在主体之下"
	OrMultiple=". 或(多个条件)"
		OrMultiple="或 - 任意条件成立"
		OrMultipleHint="用该功能添加的条件必须在主体之下"
	//
		XYSplitLine_TriggerConditions_1="------------------------------------"
			XYSplitLine_TriggerConditions_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
	GetBooleanAnd="And"
		GetBooleanAnd=~条件 1," 且 ",~条件 2
		GetBooleanAndHint="使用 'And, 多项条件' 替代。条件1 和 条件2 均成立时运行"
	GetBooleanOr="Or"
		GetBooleanOr=~条件 1," 或 ",~条件 2
		GetBooleanOrHint="使用 'Or, 多项条件' 替代。条件1 和 条件2 任意成立"
	#             ="Jass"
		             =~Jass条件表达式
		             Hint="使用'布尔表达式+逆天 - Jass [Y]'来替代。Jass条件表达式，如：true == true"
[TriggerActionStrings]
	// XYWE
		// Normal
			XYSplitLine_TriggerActions_Normal_1="------------------------------------"
				XYSplitLine_TriggerActions_Normal_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Normal_2="------------------------------------"
				XYSplitLine_TriggerActions_Normal_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Normal_3="------------------------------------"
				XYSplitLine_TriggerActions_Normal_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// A AI
			XYSplitLine_TriggerActions_A_AI_1="------------------------------------"
				XYSplitLine_TriggerActions_A_AI_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_A_AI_2="------------------------------------"
				XYSplitLine_TriggerActions_A_AI_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// C 触发器
			XYSplitLine_TriggerActions_C_Trigger_1="------------------------------------"
				XYSplitLine_TriggerActions_C_Trigger_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// C 存档
			XYSplitLine_TriggerActions_C_SaveLoad_1="------------------------------------"
				XYSplitLine_TriggerActions_C_SaveLoad_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_C_SaveLoad_2="------------------------------------"
				XYSplitLine_TriggerActions_C_SaveLoad_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_C_SaveLoad_3="------------------------------------"
				XYSplitLine_TriggerActions_C_SaveLoad_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 单位
			XYSplitLine_TriggerActions_D_Unit_1="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Unit_2="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Unit_3="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Unit_4="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_4="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Unit_5="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_5="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Unit_6="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_6="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Unit_7="------------------------------------"
				XYSplitLine_TriggerActions_D_Unit_7="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 单位池
			XYSplitLine_TriggerActions_D_UnitPool_1="------------------------------------"
				XYSplitLine_TriggerActions_D_UnitPool_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 单位组
			XYSplitLine_TriggerActions_D_UnitGroup_1="------------------------------------"
				XYSplitLine_TriggerActions_D_UnitGroup_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_UnitGroup_2="------------------------------------"
				XYSplitLine_TriggerActions_D_UnitGroup_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_UnitGroup_3="------------------------------------"
				XYSplitLine_TriggerActions_D_UnitGroup_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 地面纹理
			XYSplitLine_TriggerActions_D_Ubersplat_1="------------------------------------"
				XYSplitLine_TriggerActions_D_Ubersplat_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 电影
			XYSplitLine_TriggerActions_D_Cinematic_1="------------------------------------"
				XYSplitLine_TriggerActions_D_Cinematic_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Cinematic_2="------------------------------------"
				XYSplitLine_TriggerActions_D_Cinematic_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Cinematic_3="------------------------------------"
				XYSplitLine_TriggerActions_D_Cinematic_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 动画
			XYSplitLine_TriggerActions_D_Animation_1="------------------------------------"
				XYSplitLine_TriggerActions_D_Animation_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
				XYSplitLine_TriggerActions_D_Animation_1Hint=
		// D 对话框
			XYSplitLine_TriggerActions_D_Dialog_1="------------------------------------"
				XYSplitLine_TriggerActions_D_Dialog_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// D 多面板
			XYSplitLine_TriggerActions_D_Multiboard_1="------------------------------------"
				XYSplitLine_TriggerActions_D_Multiboard_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_D_Multiboard_2="------------------------------------"
				XYSplitLine_TriggerActions_D_Multiboard_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// H 函数
			XYSplitLine_TriggerActions_H_Function_1="------------------------------------"
				XYSplitLine_TriggerActions_H_Function_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// H 哈希表
			XYSplitLine_TriggerActions_H_Hashtable_1="------------------------------------"
				XYSplitLine_TriggerActions_H_Hashtable_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// H 环境
			XYSplitLine_TriggerActions_H_Environment_1="------------------------------------"
				XYSplitLine_TriggerActions_H_Environment_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_H_Environment_2="------------------------------------"
				XYSplitLine_TriggerActions_H_Environment_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_H_Environment_3="------------------------------------"
				XYSplitLine_TriggerActions_H_Environment_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_H_Environment_4="------------------------------------"
				XYSplitLine_TriggerActions_H_Environment_4="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// J 技能
			XYSplitLine_TriggerActions_J_Ability_1="------------------------------------"
				XYSplitLine_TriggerActions_J_Ability_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// J 计时器
			XYSplitLine_TriggerActions_J_Timer_1="------------------------------------"
				XYSplitLine_TriggerActions_J_Timer_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_J_Timer_2="------------------------------------"
				XYSplitLine_TriggerActions_J_Timer_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// K 可见度
			XYSplitLine_TriggerActions_K_Visibility_1="------------------------------------"
				XYSplitLine_TriggerActions_K_Visibility_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// K 可破坏物
			XYSplitLine_TriggerActions_K_Destruct_1="------------------------------------"
				XYSplitLine_TriggerActions_K_Destruct_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// P 排行榜
			XYSplitLine_TriggerActions_P_Leaderboard_1="------------------------------------"
				XYSplitLine_TriggerActions_P_Leaderboard_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// Q 任务
			XYSplitLine_TriggerActions_R_Quest_1="------------------------------------"
				XYSplitLine_TriggerActions_R_Quest_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// S 闪电效果
			XYSplitLine_TriggerActions_S_Lightning_1="------------------------------------"
				XYSplitLine_TriggerActions_S_Lightning_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// T 特效
			XYSplitLine_TriggerActions_T_SpecialEffect_1="------------------------------------"
				XYSplitLine_TriggerActions_T_SpecialEffect_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_T_SpecialEffect_2="------------------------------------"
				XYSplitLine_TriggerActions_T_SpecialEffect_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// T 图像
			XYSplitLine_TriggerActions_T_Image_1="------------------------------------"
				XYSplitLine_TriggerActions_T_Image_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// W 玩家
			XYSplitLine_TriggerActions_W_Player_1="------------------------------------"
				XYSplitLine_TriggerActions_W_Player_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_W_Player_2="------------------------------------"
				XYSplitLine_TriggerActions_W_Player_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// W 玩家组
			XYSplitLine_TriggerActions_W_PlayerGroup_1="------------------------------------"
				XYSplitLine_TriggerActions_W_PlayerGroup_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// W 物品
			XYSplitLine_TriggerActions_W_Item_1="------------------------------------"
				XYSplitLine_TriggerActions_W_Item_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_W_Item_2="------------------------------------"
				XYSplitLine_TriggerActions_W_Item_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// W 物品池
			XYSplitLine_TriggerActions_W_ItemPool_1="------------------------------------"
				XYSplitLine_TriggerActions_W_ItemPool_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// X 系统
			XYSplitLine_TriggerActions_X_System_1="------------------------------------"
				XYSplitLine_TriggerActions_X_System_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_2="------------------------------------"
				XYSplitLine_TriggerActions_X_System_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_3="------------------------------------"
				XYSplitLine_TriggerActions_X_System_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_4="------------------------------------"
				XYSplitLine_TriggerActions_X_System_4="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_5="------------------------------------"
				XYSplitLine_TriggerActions_X_System_5="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_6="------------------------------------"
				XYSplitLine_TriggerActions_X_System_6="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_7="------------------------------------ 废弃 / 重复 / 不推荐"
				XYSplitLine_TriggerActions_X_System_7="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_8="------------------------------------"
				XYSplitLine_TriggerActions_X_System_8="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_X_System_9="------------------------------------"
				XYSplitLine_TriggerActions_X_System_9="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// X 选择
			XYSplitLine_TriggerActions_X_UnitSel_1="------------------------------------"
				XYSplitLine_TriggerActions_X_UnitSel_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// Y 英雄
			XYSplitLine_TriggerActions_Y_Hero_1="------------------------------------"
				XYSplitLine_TriggerActions_Y_Hero_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Hero_2="------------------------------------"
				XYSplitLine_TriggerActions_Y_Hero_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Hero_3="------------------------------------"
				XYSplitLine_TriggerActions_Y_Hero_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Hero_4="------------------------------------"
				XYSplitLine_TriggerActions_Y_Hero_4="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		// Y 游戏
			XYSplitLine_TriggerActions_Y_Game_1="------------------------------------"
				XYSplitLine_TriggerActions_Y_Game_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Game_2="------------------------------------"
				XYSplitLine_TriggerActions_Y_Game_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Game_3="------------------------------------"
				XYSplitLine_TriggerActions_Y_Game_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Game_4="------------------------------------"
				XYSplitLine_TriggerActions_Y_Game_4="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
			XYSplitLine_TriggerActions_Y_Game_5="------------------------------------"
				XYSplitLine_TriggerActions_Y_Game_5="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
	// unWE
		unWETriggerListExecute="响应自定义事件 [U]"
			unWETriggerListExecute="响应自定义事件: ",~自定义事件名字," [U]"
			unWETriggerListExecuteHint="运行注册了该事件的多个触发器"
		unWESaveTriggerDataUnit="为上次响应的自定义事件传递单位参数 [U]"
			unWESaveTriggerDataUnit="为响应的自定义事件传递参数，名为 ",~参数名字," 值为 ",~单位
			unWESaveTriggerDataUnitHint="例如：为响应的自定义事件传递参数，名为 杀人凶手 值为 伤害来源"
		unWECreatDummyCaster="创建施法傀儡 [U]"
			unWECreatDummyCaster="为 ",~玩家," 创建一个 施法傀儡 在 ",~位置
			unWECreatDummyCasterHint=创建一个用于触发器动作的不可见单位，通常被用于代替英雄释放技能
		unWEUnitAddAbility="添加技能并设置永久性 [U]"
			unWEUnitAddAbility="为 ",~单位," 添加 ",~技能," ",~数值," 级 ",~是否永久
			unWEUnitAddAbilityHint="与 '添加技能并设置永久性 [D]' 作用相同"
		unWECreateNUnitsAtRect="创建单位(指定区域|面向角度) [U]"
			unWECreateNUnitsAtRect="创建 ",~Number," 个 ",~单位," 给 ",~Player," 在 ",~指定区域," ,面向角度 ",~Direction
			unWECreateNUnitsAtRectHint="面向角度采用角度制,0度为正东方向,90度为正北方向. 使用'最后创建的单位组'来获取创建的所有单位. 使用'最后创建的单位'来获取创建的单个单位."
		unWESetUnitState="设置单位属性 [U]"
			unWESetUnitState="设置 ",~单位," 的 ",~属性," ",~运算符," ",~数值
			unWESetUnitStateHint=
		unWEIssueRectOrder="发布命令(指定区域) [U]"
			unWEIssueRectOrder="对 ",~单位," 发布 ",~Order," 命令到: ",~指定区域
			unWEIssueRectOrderHint=
		unWEIssueRectOrderById="发布命令(指定区域|按ID) [U]"
			unWEIssueRectOrderById="对 ",~单位," 发布 ",~Order," 命令到: ",~指定区域
			unWEIssueRectOrderByIdHint=
		unWENewItemsFormula_2="合成物品(2个材料) [U]"
			unWENewItemsFormula_2="合成物品 ",~类型," + ",~类型," = ",~物品
			unWENewItemsFormula_2Hint="填写物品合成所需的材料及其数量"
		unWENewItemsFormula_3="合成物品(3个材料) [U]"
			unWENewItemsFormula_3="合成物品 ",~类型," + ",~类型," + ",~类型," = ",~物品
			unWENewItemsFormula_3Hint="填写物品合成所需的材料及其数量"
	// DZAPI
		DzAPI_Map_Stat_SetStat=设置房间显示的数据 [DZ]
			DzAPI_Map_Stat_SetStat="设置: ",~whichPlayer," 的 ",~key," 显示: "，~value
			DzAPI_Map_Stat_SetStatHint="(只能在网易对战平台使用)为服务器存档显示的数据"
		DzAPI_Map_StoreBoolean=服务器存储布尔值 [DZ]
			DzAPI_Map_StoreBoolean="服务器存档: 存储 ",~whichPlayer," 数据, 名称: ",~key," ,值: ",~value
			DzAPI_Map_StoreBooleanHint="(只能在网易对战平台使用)"
		DzAPI_Map_StoreInteger=服务器存储整数 [DZ]
			DzAPI_Map_StoreInteger="服务器存档: 存储 ",~whichPlayer," 数据, 名称: ",~key," ,值: ",~value
			DzAPI_Map_StoreIntegerHint="(只能在网易对战平台使用)"
		DzAPI_Map_StoreReal=服务器存储实数 [DZ]
			DzAPI_Map_StoreReal="服务器存档: 存储 ",~whichPlayer," 数据, 名称: ",~key," ,值: ",~value
			DzAPI_Map_StoreRealHint="(只能在网易对战平台使用)"
		DzAPI_Map_StoreString=服务器存储字符串 [DZ]
			DzAPI_Map_StoreString="服务器存档: 存储 ",~whichPlayer," 数据, 名称:",~key," ,值: ",~value
			DzAPI_Map_StoreStringHint="(只能在网易对战平台使用)"
		DzAPI_Map_StoreUnitId=服务器存储单位类型 [DZ]
			DzAPI_Map_StoreUnitId="服务器存档: 存储 ",~whichPlayer," 数据, 名称: ",~key," ,值: ",~value
			DzAPI_Map_StoreUnitIdHint="(只能在网易对战平台使用)"
		DzAPI_Map_StoreAbilityId=服务器存储技能Id [DZ]
			DzAPI_Map_StoreAbilityId="服务器存档: 存储 ",~," 数据, 名称: ",~," ,值: ",~
			DzAPI_Map_StoreAbilityIdHint="(只能在网易对战平台使用)"
		DzAPI_Map_StoreItemId=服务器存储物品Id [DZ]
			DzAPI_Map_StoreItemId="服务器存档: 存储 ",~," 数据, 名称: ",~," ,值: ",~
			DzAPI_Map_StoreItemIdHint="(只能在网易对战平台使用)"
		DzAPI_Map_FlushStoredMission=清理服务器数据 [DZ]
			DzAPI_Map_FlushStoredMission="服务器数据: 清理 ",~whichPlayer," 数据, 名称: ",~key
			DzAPI_Map_FlushStoredMissionHint="(只能在网易对战平台使用)"
	// SJWE
		DamageunitdataStockpile=受伤单位仇恨列表绑定 [S]
			DamageunitdataStockpile="对受伤单位",~受伤单位,"绑定仇恨单位",~伤害来源,"并自动分配加入仇恨列表。"
			DamageunitdataStockpileHint="需要自定义仇恨产生方式时使用。"
		DamageHatred=伤害仇恨数据产生 [S]
			DamageHatred="伤害仇恨产生--非召唤单位：倍数系数：",~倍数系数,"，常数系数：",~常数系数,"。召唤单位：倍数系数：",~倍数系数,"，常数系数：",~常数系数,"。是否强制攻击仇恨最大单位为：",~true,"。"
			DamageHatredHint="可自己设定是否强制攻击仇恨最大单位。"
		Skillhatred=非伤害仇恨数据产生 [S]
			Skillhatred="对以点",~作用中心,"为中心,半径为",~半径,"的单位产生仇恨数据，仇恨系数：",~仇恨系数,"，仇恨产生倍数系数：",~倍数系数,"，仇恨产生常数系数：",~常数系数,"。是否强制攻击仇恨最大单位为：",~true,"。"
			SkillhatredHint="可自己设定是否强制攻击仇恨最大单位。"
		EliminateHatredAll=清空所有敌对单位仇恨 [S]
			EliminateHatredAll="清空所有敌对单位仇恨"
			EliminateHatredAllHint=""
		EliminateHatredUnit=单位死亡清空仇恨数据 [S]
			EliminateHatredUnit="单位死亡清空仇恨数据。"
			EliminateHatredUnitHint=""
		InitHatredSystem=初始化仇恨系统 [S]
			InitHatredSystem="初始化仇恨系统，请在初始化系统后分别给敌对和用户玩家组里添加玩家。"
			InitHatredSystemHint=""
		IssueNeutralTargetHatredMaxUnitById=发布中介命令（ID）目标单位为最大仇恨单位 [S]
			IssueNeutralTargetHatredMaxUnitById="以玩家",~玩家,"对单位",~单位,"发布命令",~id,"目标为仇恨最大单位。"
			IssueNeutralTargetHatredMaxUnitByIdHint=""
		FlushMissionHatredSystemByUnit=清空受伤单位下的所有仇恨数据（同时回收所有索引） [S]
			FlushMissionHatredSystemByUnit="清空受伤单位",~受伤单位,"下的所有仇恨数据（同时回收所有索引）。"
			FlushMissionHatredSystemByUnitHint=""
		SetHatredMaxIndex=设置仇恨列表最大索引值 [S]
			SetHatredMaxIndex="设置仇恨列表最大索引值为：",~最大索引
			SetHatredMaxIndexHint="请不要在游戏过程中改变该值。"
		SaveHatredList=储存仇恨列表 [S]
			SaveHatredList="储存受伤单位",~受伤单位,"的仇恨列表位置为:伤害来源",~伤害来源,",仇恨列表索引位置:",~列表索引,"。"
			SaveHatredListHint=""
		SaveUnitHatred=储存单位仇恨值 [S]
			SaveUnitHatred="存储受伤害单位",~受伤单位,"对伤害来源单位",~伤害来源,"的仇恨值为:",~仇恨值,"。"
			SaveUnitHatredHint=""
		SetSkillHatredFactor=设置技能仇恨系数(非伤害仇恨) [S]
			SetSkillHatredFactor="设置技能",~技能,"仇恨系数为",~仇恨值,"。"
			SetSkillHatredFactorHint="主要用于设置非伤害仇恨的产生。"
		SpaceVectorRAD=计算空间点的坐标（弧度制） [S]
			SpaceVectorRAD="计算以点（坐标）（",~x,"，",~y,"，",~z,"）距离为",~dist,"，方向（弧度）为",~xRadians,"，倾斜角（弧度）为",~hRadians,"的点的坐标。"
			SpaceVectorRADHint="需配合获取坐标函数获取计算出的坐标。"
		SpaceVectorDEG=计算空间点的坐标（角度制） [S]
			SpaceVectorDEG="计算以点（坐标）（",~x,"，",~y,"，",~z,"）距离为",~dist,"，方向角度为",~xDEG,"，倾斜角为",~hDEG,"的点的坐标。"
			SpaceVectorDEGHint="需配合获取坐标函数获取计算出的坐标。"
		quick_sort=快速排序算法 [S]
			quick_sort="对区间为",~索引最小值,"到",~索引最大值,"的数据进行快速排序。"
			quick_sortHint="快速排序算法,需要配合导入/导出排序数据函数使用。"
		SaveData=导入排序数据 [S]
			SaveData="导入索引为",~index,"，值为",~data,"的排序数据。"
			SaveDataHint="导入排序数据,索引请不要超过数组索引上限8192。"
		Revive_Hero=英雄复活系统 [S]
			Revive_Hero="复活英雄",~英雄,"在点",~点,"，复活所需时间为：",~时间,"秒。"
			Revive_HeroHint="一定时间后复活指定英雄在指定点。"
		ItemSuperimposition=可充物品叠加系统 [S]
			ItemSuperimposition="开启可充物品叠加。"
			ItemSuperimpositionHint=""
		SetStringColor=给字符串按照Argb格式染色 [S]
			SetStringColor="用颜色：透明度：",~a,"，R通道：",~r,"，G通道：",~g,"，B通道：",~b,"，给字符串：",~字符串,"染色。"
			SetStringColorHint=""
		DestroyIndexAll=索引系统 - 回收所有对象索引 [S]
			DestroyIndexAll="回收对象",~对象ID,"所有索引。"
			DestroyIndexAllHint="回收所有对象索引值并重置索引起始值为0。"
		DestroyIndex=索引系统 - 回收对象的索引值 [S]
			DestroyIndex="回收对象",~对象ID,"的值为",~index,"的索引。"
			DestroyIndexHint="回收对象的索引值。"
		InitIndex=索引系统 - 初始化对象索引值 [S]
			InitIndex="初始化对象",~对象ID,"的索引值为1。"
			InitIndexHint="初始化对象索引值为1。"
		TriggerRegisterAnyUnitDamagedEvent=注册任意单位受到某种伤害事件 [S]
			TriggerRegisterAnyUnitDamagedEvent="为",~触发器,"注册任意单位受",~攻击事件索引,"的伤害事件。"
			TriggerRegisterAnyUnitDamagedEventHint="为一个触发注册任意单位受到某种伤害事件。"
		DestroyAnyUnitDamagedEvent=注销任意单位受某种伤害事件 [S]
			DestroyAnyUnitDamagedEvent="为",~触发器,"注销任意单位受",~攻击事件索引,"伤害事件。"
			DestroyAnyUnitDamagedEventHint="会同时注销该触发。"
		DamageSystemInitialization=初始化伤害系统 [S]
			DamageSystemInitialization="初始化伤害系统，关联技能和魔法效果为：",~单体普攻封装技能,"，",~单体普攻技能,"，",~群体普攻技能,"，",~单体普攻Buff,"，",~群体普攻Buff,"。（使用该系统设置技能参见演示地图，同时使用该系统前要手动修改地图平衡常数里攻防关系表，只保留法术一栏数值，其他设置为0）"
			DamageSystemInitializationHint="需要提前在物编里设置好关联技能和BUFF，并且给用到的单位添加关联技能。如果要用到伤害系统默认数据，请加载默认数据库。后面写有要加载的动作，都要先加载才能使用。"
		SetTypeName=设置类型 [S]
			SetTypeName="设置类型--类型ID：",~类型ID,"类型名：",~类型名,"。"
			SetTypeNameHint="为类型ID绑定类型名，类型ID范围大于10。"
		SetType=设置对象的类型的整数型数据 [S]
			SetType="设置对象",~对象,"的",~类型,"的整数型数据为：",~value,"。"
			SetTypeHint="这里对象指的是单位、物体或技能的ID，也可以是单位整数地址或类型ID。数据也可以是另外一个类型ID。"
		SetTypeData=设置对象的类型的实数型数据 [S]
			SetTypeData="设置对象",~对象,"的",~类型,"的实数型数据为：",~Value,"。"
			SetTypeDataHint="这里对象指的是单位、物体或技能的ID，也可以是单位整数地址或类型ID。数据也可以是另外一个类型ID，不过获取该子类ID需要把实数转换为整数。"
		EXPCoefficient=设置伤害系统普通伤害杀死敌人获得经验的系数 [S]
			EXPCoefficient="设置普通单位死亡给予经验的系数：上一个值因数",~A,"，等级因数",~B,"，固定因数",~C,"，第一个值",~c,"；英雄单位死亡给予经验系数：上一个值因数",~Ah,"，等级因数",~Bh,"，固定因数",~Ch,"，第一个值",~ch,"；召唤单位系数",~D,"，经验取得范围",~R,"，建筑杀死单位是否取得经验",~b,"。"
			EXPCoefficientHint="设置伤害系统普通伤害杀死敌人获得经验的系数，设置和游戏平衡常数类似，伤害系统初始化后可用。"
		OpenSystemPreinstallDATA=加载伤害系统默认数据库 [S]
			OpenSystemPreinstallDATA="加载伤害系统默认数据库。"
			OpenSystemPreinstallDATAHint="加载系统默认数据库，但是在此之前的自定数据将会无效，在其之后定义自定义数据将添加或者覆盖系统数据。"
		OpenDamageEventPreinstall=开启伤害系统默认伤害触发 [S]
			OpenDamageEventPreinstall="开启伤害系统默认伤害触发。"
			OpenDamageEventPreinstallHint="开启后需要加载伤害系统默认数据库或者加载自定义数据，使用系统默认伤害类型数据，并且显示伤害。"
		MimeticdDamage=模拟伤害 [S]
			MimeticdDamage="以",~伤害来源单位,"为伤害来源，",~接受伤害单位,"为接受伤害目标，模拟造成",~伤害值,"的伤害。"
			MimeticdDamageHint=""
		DisplayDamage=以漂浮文字显示伤害 [S]
			DisplayDamage="以漂浮文字显示伤害：显示位置绑定单位为：",~受伤单位,"，伤害值：",~伤害值,"，z轴偏移：",~z轴高度,"，字体大小：",~字体大小,"，颜色值：",~R,"，",~G,"，",~B,"，透明度：",~透明度,"%。"
			DisplayDamageHint=""
		DialogSystemInitialization=对话框显示属性系统初始化（需加载） [S]
			DialogSystemInitialization="对数量为",~用户玩家数,"的用户玩家初始化对话框显示属性系统。"
			DialogSystemInitializationHint="默认初始化就开启对话框显示属性。"
		OpenDisplayDialog=设置对话框显示属性系统是否开启（需加载） [S]
			OpenDisplayDialog="设置对话框显示属性系统是否开启为:",~false
			OpenDisplayDialogHint=""
		SetDisplayDamage=设置是否显示默认伤害触发的伤害（需加载） [S]
			SetDisplayDamage="设置是否显示默认伤害触发的伤害值为：",~true,"。"
			SetDisplayDamageHint=""
		ImmuneDamageAbilityID=设置免疫伤害的血量技能(需加载） [S]
			ImmuneDamageAbilityID="设置免疫伤害的血量技能为：",~技能,"。"
			ImmuneDamageAbilityIDHint="需在需要使用设置单位免疫伤害功能前使用，用于免疫魔兽默认技能造成的伤害，技能设置见演示图。"
		SetSystemStringColor=初始化伤害系统字符串颜色（需加载） [S]
			SetSystemStringColor="初始化伤害系统字符串颜色。"
			SetSystemStringColorHint=""
		SetAllPredicableStringColor=设置所有属性描述字符串颜色（需加载） [S]
			SetAllPredicableStringColor="设置所有属性描述字符串颜色为：透明度：",~a,"，R通道：",~r,"，G通道：",~g,"，B通道：",~b,"。"
			SetAllPredicableStringColorHint=""
		SetDisplayDamageColor=设置伤害漂浮文字颜色（需加载） [S]
			SetDisplayDamageColor="设置",~index,"的漂浮文字颜色为：透明度（百分比）：",~a,"，R：",~r,"，G：",~g,"，B：",~b,"。"
			SetDisplayDamageColorHint=""
		SetDisplayPredicableColor=设置属性字符串颜色（需加载） [S]
			SetDisplayPredicableColor="设置",~index,"的颜色为：透明度：",~a,"，R通道：",~r,"，G通道：",~g,"，B通道：",~b,"。"
			SetDisplayPredicableColorHint=""
		MimeticdMeleeDamage=模拟普通伤害（需加载） [S]
			MimeticdMeleeDamage="以",~伤害来源单位,"为伤害来源，",~接受伤害单位,"为接受伤害目标，模拟普通伤害。"
			MimeticdMeleeDamageHint="根据单位绑定数据直接计算。（不能触发普通伤害事件。）"
		MimeticdMeleeDamage_Type=模拟造成某类普通伤害（需加载） [S]
			MimeticdMeleeDamage_Type="以单位",~伤害来源,"对单位",~受伤单位,"造成类型为",~攻击类型,"，伤害值为：",~伤害值,"的普通伤害。"
			MimeticdMeleeDamage_TypeHint="不能触发普通伤害事件。"
		MimeticdSkillDamage=模拟自定义技能伤害（需加载） [S]
			MimeticdSkillDamage="以技能",~技能,"绑定数据，",~伤害来源单位,"为伤害来源，",~接受伤害单位,"为接受伤害目标模拟自定义技能伤害。"
			MimeticdSkillDamageHint="根据自定义技能绑定数据和单位绑定数据直接计算。（触发技能伤害事件。）"
		MimeticdSkillDamage_Type=模拟造成某类自定义技能伤害（需加载） [S]
			MimeticdSkillDamage_Type="以技能",~技能,"的绑定暴击/闪避数据，使单位",~伤害来源,"对单位",~受伤单位,"造成类型为",~伤害类型,"，伤害值为：",~伤害值,"的技能伤害。"
			MimeticdSkillDamage_TypeHint="触发技能伤害事件。"
		SetReduceDamagePercent=设置减伤百分比（需加载） [S]
			SetReduceDamagePercent="设置",~对象类型,"的减伤百分比为：",~0.0,"。"
			SetReduceDamagePercentHint="可填入单位ID，物品ID，或者指定单位整数地址。数值范围0.0-1.0。"
		SetIncreaseDamagePercent=设置增伤百分比（需加载） [S]
			SetIncreaseDamagePercent="设置",~对象类型,"的增伤百分比为：",~0.0,"。"
			SetIncreaseDamagePercentHint="可填入单位ID，物品ID，或者指定单位整数地址。数值范围为大于1.0。"
		SetReduceDamage=设置对伤害修改值（需加载） [S]
			SetReduceDamage="设置",~对象类型,"的伤害修改值为：",~0.0,"。"
			SetReduceDamageHint="可填入单位ID，物品ID，或者指定单位整数地址。"
		SetUnitPredicable=设置单位属性（需加载） [S]
			SetUnitPredicable="设置单位",~单位类型,"的属性为--能否化解伤害：",~true,"，攻击类型名：",~AttackTypeName,"，攻击值：",~AttackValue,"，攻击随机因子：",~RandomFactor,"，暴击概率：",~Thump,"%，暴击倍数：",~ThumpMultiple,"，防御类型名：",~DefenseTypeName,"，防御值：",~DefenseValue,"，技能防御类型名：",~SkillDefenseTypeName,"，技能防御值：",~SkillDefenseValue,"，技能闪避概率：",~SkillDodge,"%。"
			SetUnitPredicableHint="填入单位ID。"
		SetUnitSpecialPredicable=设置单位的特殊属性（需加载） [S]
			SetUnitSpecialPredicable="设置单位",~单位类型,"的暴击伤害减少为：",~0.0,"，技能暴击伤害减少为：",~0.0,"，暴击抵抗率为：",~0.0,"，技能暴击抵抗率为：",~0.0,"。"
			SetUnitSpecialPredicableHint=""
		SetUnitSkillPredicable=设置单位技能属性（需加载） [S]
			SetUnitSkillPredicable="设置",~单位类型,"的技能属性--单位技能暴击概率：",~UnitSkillThump,"%，单位技能暴击倍数：",~UnitSkillThumpMultiple,"。"
			SetUnitSkillPredicableHint=""
		SetHalfDamageFactor=设置单位普通伤害化解率（需加载） [S]
			SetHalfDamageFactor="设置单位",~单位类型,"的普通伤害化解概率为：",~0.0,"。"
			SetHalfDamageFactorHint="只有开启系统默认触发和加载默认数据时才能使用。"
		SetSkillHalfDamageFactor=设置单位自定义技能伤害化解率（需加载） [S]
			SetSkillHalfDamageFactor="设置单位",~单位类型,"的技能伤害化解概率为：",~0.0,"。"
			SetSkillHalfDamageFactorHint="只有开启系统默认触发和加载默认数据时才能使用。"
		SetSkillHalfDamageBoolean=设置单位化解自定义技能伤害（需加载） [S]
			SetSkillHalfDamageBoolean="设置单位",~单位类型,"是否能化解技能一半伤害为：",~布尔值
			SetSkillHalfDamageBooleanHint="只有开启系统默认触发和加载默认数据时才能使用。"
		SetUnitSkillDamage=设置单位技能伤害附加值（需加载） [S]
			SetUnitSkillDamage="设置",~单位类型,"的技能附加伤害值为：",~SkillDamage,"。"
			SetUnitSkillDamageHint=""
		SetUnitImmuneDamage=设置单位是否免疫全部伤害（需加载） [S]
			SetUnitImmuneDamage="设置单位",~单位,"是否免疫全部伤害为：",~false,"。"
			SetUnitImmuneDamageHint="(注意该动作开启/关闭针对所有伤害)在计算伤害后免疫。"
		SetUnitReboundDamage=设置单位是否反弹全部伤害（需加载） [S]
			SetUnitReboundDamage="设置单位",~单位,"是否反弹全部伤害为：",~false,"。"
			SetUnitReboundDamageHint="(注意该动作开启/关闭针对所有伤害)。"
		SetUnitAbsorptionDamage=设置单位是否吸收全部伤害（需加载） [S]
			SetUnitAbsorptionDamage="设置单位",~单位,"是否吸收全部伤害为：",~false,"。"
			SetUnitAbsorptionDamageHint="(注意该动作开启/关闭针对所有伤害)。"
		SetUnitImmuneType=设置单位免疫某种类型伤害（需加载） [S]
			SetUnitImmuneType="设置单位",~单位,"免疫",~攻击/伤害类型,"为",~false,"。"
			SetUnitImmuneTypeHint="免疫某一种伤害/攻击类型的伤害，不同类可同时设置。（设置单位是否免疫全部伤害时此动作效果被覆盖）"
		SetUnitReboundType=设置单位反弹某种类型伤害（需加载） [S]
			SetUnitReboundType="设置单位",~单位,"反弹",~攻击/伤害类型,"为",~false,"。"
			SetUnitReboundTypeHint="反弹某一种伤害/攻击类型的伤害，不同类可同时设置。（共享倍数，为0为不反弹，设置单位是否反弹全部伤害时此动作效果被覆盖）"
		SetUnitAbsorptionType=设置单位吸收某种类型伤害（需加载） [S]
			SetUnitAbsorptionType="设置单位",~单位,"吸收",~攻击/伤害类型,"为",~false,"。"
			SetUnitAbsorptionTypeHint="吸收某一种伤害/攻击类型的伤害，不同类可同时设置。（共享倍数，为0为不吸收，设置单位是否吸收全部伤害时此动作效果被覆盖）"
		HeroLevelUp=设置英雄升级属性增量(需加载) [S]
			HeroLevelUp="设置单位",~单位类型,"的攻击增量为：",~攻击增量,"，防御增量为：",~防御增量,"，技能伤害增量为：",~技能伤害增量,"，技能伤害防御增量为：",~技能伤害防御增量,"。"
			HeroLevelUpHint=""
		SetUnitData=设置指定单位属性改变量(需加载) [S]
			SetUnitData="设置",~单位,"的",~属性类型,"类型数值改变量为：",~数值,"。"
			SetUnitDataHint="该量用于模拟状态造成的属性变化。"
		SetSkillPredicable=设置自定义技能的属性（需加载） [S]
			SetSkillPredicable="设置",~技能,"的属性--技能伤害类型名：",~SkillDamageTypeName,"，技能伤害值：",~SkillDamageValue,"，技能暴击概率：",~SkillThump,"%，技能暴击倍数：",~SkillThumpMultiple,"。"
			SetSkillPredicableHint=""
		SetItemPredicable=设置物品属性（需加载） [S]
			SetItemPredicable="设置",~物品类型,"物品属性--攻击加成值：",~AttackValue,"，防御加成值：",~DefenseValue,"，技能防御加成值",~SkillDefenseValue,"，暴击概率加成：",~Thump,"%，暴击倍数加成：",~ThumpMultiple,"，技能闪避概率加成：",~SkillDodge,"%，技能暴击概率加成：",~SkillThump,"%，技能暴击倍数加成：",~SkillThumpMultiple,"，技能伤害倍数加成：",~SkillDamageIncrease,"，技能伤害加成值：",~SkillDamageValueIncrease,"。"
			SetItemPredicableHint="填入物品ID。"
		SetItemSpecialPredicable=设置物品的特殊属性A（需加载） [S]
			SetItemSpecialPredicable="设置物品",~物品类型,"的暴击伤害减少为：",~0.0,"，技能暴击伤害减少为：",~0.0,"，暴击抵抗率为：",~0.0,"，技能暴击抵抗率为：",~0.0,"。"
			SetItemSpecialPredicableHint=""
		SetItemSpecialPredicableAother=设置物品的特殊属性B（需加载） [S]
			SetItemSpecialPredicableAother="设置物品",~物品类型,"的透甲率为：",~0.0,"，技能透甲率为：",~0.0,"，吸血率为：",~0.0,"，技能吸血率为：",~0.0,"。"
			SetItemSpecialPredicableAotherHint=""
		SetItemTypeName=设置物品类型名(需加载) [S]
			SetItemTypeName="设置",~物品类型,"的类型名为：",~类型名,"。"
			SetItemTypeNameHint=""
		SetItemTypeNumberMax=设置物品附加类型可持有数量（需加载） [S]
			SetItemTypeNumberMax="设置类型为",~类型名,"的物品最大持有数量为：",~number,"。"
			SetItemTypeNumberMaxHint="配合设置物品类型名使用可限制物品持有数量。设为0为没有限制。"
		SetItemSlotUnitType=设置多物品栏系统的物品栏单位类型（需加载） [S]
			SetItemSlotUnitType="设置多物品栏系统的物品栏单位类型为：",~单位类型,"，使伤害系统支持ydwe技能触发的多物品栏系统翻页保留属性。"
			SetItemSlotUnitTypeHint="该功能需配合ydwe技能触发的多物品栏使用，单独使用无效，只在本系统中有效。"
		DisplayPreinstallUnitPredicable=显示单位原始属性（需加载） [S]
			DisplayPreinstallUnitPredicable="显示",~单位,"的原始属性，显示时间为：",~显示时间,"秒。"
			DisplayPreinstallUnitPredicableHint="该功能用来调试数据。"
		DisplayPreinstallUnitSpecialPredicable=显示单位原始特殊属性(需加载) [S]
			DisplayPreinstallUnitSpecialPredicable="显示单位",~单位,"的原始特殊属性,显示时间为：",~显示时间,"秒。"
			DisplayPreinstallUnitSpecialPredicableHint=""
		DisplayPreinstallItemPredicable=显示物品原始属性（需加载） [S]
			DisplayPreinstallItemPredicable="为玩家",~玩家,"显示物品",~物品类型,"的属性，显示时间为：",~显示时间,"秒。"
			DisplayPreinstallItemPredicableHint="该功能用来调试数据。"
		DisplayPreinstallItemSpecialPredicable=显示物品的原始特殊属性（要加载） [S]
			DisplayPreinstallItemSpecialPredicable="对",~玩家,"显示物品",~物品类型,"的原始特殊属性，显示时间为：",~显示时间,"秒。"
			DisplayPreinstallItemSpecialPredicableHint=""
		DisplayUnitPredicable=显示单位当前属性（需加载） [S]
			DisplayUnitPredicable="显示",~单位,"的当前属性，显示时间为：",~显示时间,"秒。"
			DisplayUnitPredicableHint=""
		DisplayUnitSpecialPredicable=显示单位当前特殊属性（需加载） [S]
			DisplayUnitSpecialPredicable="显示",~单位,"的当前特殊属性，显示时间为：",~显示时间,"秒。"
			DisplayUnitSpecialPredicableHint=""
		DisplayPreinstallSkillPredicable=显示自定义技能原始属性（需加载） [S]
			DisplayPreinstallSkillPredicable="为玩家",~玩家,"显示技能",~技能,"的属性，显示时间为：",~显示时间,"秒。"
			DisplayPreinstallSkillPredicableHint="该功能用来调试数据。"
	// Normal
		DoNothing="不做任何动作"
			DoNothing=不做任何动作
			DoNothingHint=原名为“不做任何动作”。由于不做任何动作，在这里被我们当作分割线用。——真是太怠惰了
		CommentString="注释"
			CommentString=~注释文本
			CommentStringHint=注释的作用不仅仅是告诉别人某个功能如何使用，也用于在未来提醒自己当初曾经做出这个功能的思路是怎样的
		CustomScriptCode="Jass"
			CustomScriptCode=~Jass代码
			CustomScriptCodeHint="输入一行Jass代码，如：call MyFunction(udg_globalVariable)。"
		ExecuteFunc="运行函数"
			ExecuteFunc="运行: ",~函数名
			ExecuteFuncHint="使用该功能运行的函数与触发独立, 只能运行无参数的自定义函数."
		TriggerSleepAction="等待(玩家时间)"
			TriggerSleepAction="等待 ",~时间," 秒(玩家时间)"
			TriggerSleepActionHint="该延迟功能受真实时间的影响(也就是玩家机器上的时间). 因此每个玩家所延迟的时间可能不一致."
		PolledWait="等待(游戏时间)"
			PolledWait="等待 ",~时间," 秒(游戏时间)"
			PolledWaitHint="该延迟功能受游戏时间的影响. 通过调整游戏速度来调节该功能的具体延迟时间的长短."
		WaitForCondition="等待(条件成立)"
			WaitForCondition="检查 ",~条件," 每隔 ",~Interval," 秒(直到条件成立)"
			WaitForConditionHint="采用的是'while-do'类型的方式等待,比较耗CPU资源.注意不要造成过多的不成立的条件."
		WaitForSoundBJ="等待(声音结束)"
			WaitForSoundBJ="等待直到 ",~Sound," 在 ",~Time," 秒后结束播放."
			WaitForSoundBJHint="该功能只对于当前播放的3D-音效有效. 如果该音效未播放或已经结束, 则该功能无效."
		SetVariable="设置变量"
			// Specially handled by the editor
			SetVariable="设置 ",~变量," = ",~Value
			SetVariableHint="给变量赋值."
		ReturnAction="跳过剩余动作"
			// Specially handled by the editor
			ReturnAction="跳过剩余动作"
			ReturnActionHint="跳过剩余动作, 直接中止触发运行. (在组动作中无效)"
		YDWEExitLoop="退出循环"
			YDWEExitLoop="退出循环"
			YDWEExitLoopHint="退出循环, 也能退出逆天选取单位动作."
		IfThenElseMultiple="If / Then / Else (多项功能)"
			// Specially handled by the editor
			IfThenElseMultiple="如果(所有的条件成立) 则运行 (Then - 动作) 否则运行 (Else - 动作)"
			IfThenElseMultipleHint=""
		IfThenElse="If / Then / Else (单项功能)"
			// Specially handled by the editor
			IfThenElse="如果 ",~条件," 成立, 运行 ",~Then 动作,", 否则运行 ",~Else 动作
			IfThenElseHint=
		ForLoopAMultiple="使用循环整数A (做多项动作)"
			// Specially handled by the editor
			ForLoopAMultiple="循环动作[循环整数A]从 ",~开始," 到 ",~结束,", 运行 (Loop - 动作)"
			ForLoopAMultipleHint="后一个整数一定要比前一个整数要大."
		ForLoopBMultiple="使用循环整数B (做多项动作)"
			// Specially handled by the editor
			ForLoopBMultiple="循环动作[循环整数B]从 ",~开始," 到 ",~结束,", 运行 (Loop - 动作)"
			ForLoopBMultipleHint="后一个整数一定要比前一个整数要大."
		ForLoopVarMultiple="使用整数变量 (做多项动作)"
			// Specially handled by the editor
			ForLoopVarMultiple="循环动作[",~整数变量,"]从 ",~开始," 到 ",~结束,", 运行 (Loop - 动作)"
			ForLoopVarMultipleHint="后一个整数一定要比前一个整数要大."
		ForLoopA="使用循环整数A (做动作)"
			// Specially handled by the editor
			ForLoopA="循环动作[循环整数A]从 ",~开始," 到 ",~结束,", 运行 ",~运作
			ForLoopAHint="后一个整数一定要比前一个整数要大."
		ForLoopB="使用循环整数B (做动作)"
			// Specially handled by the editor
			ForLoopB="循环动作[循环整数B]从 ",~开始," 到 ",~结束,", 运行 ",~运作
			ForLoopBHint="后一个整数一定要比前一个整数要大."
		ForLoopVar="使用整数变量 (做动作)"
			// Specially handled by the editor
			ForLoopVar="循环动作[",~整数变量,"]从 ",~开始," 到 ",~结束,", do ",~Action
			ForLoopVarHint="后一个整数一定要比前一个整数要大."
		SetForLoopIndexA="设置循环整数A"
			SetForLoopIndexA="设置循环整数A的值为 ",~数值
			SetForLoopIndexAHint=
		SetForLoopIndexB="设置循环整数B"
			SetForLoopIndexB="设置循环整数B的值为 ",~数值
			SetForLoopIndexBHint=
		SetRandomSeed="设置随机种子"
			SetRandomSeed="设置随机种子数为：",~整数
			SetRandomSeedHint="设置游戏的随机种子，随机种子会影响随机整数，攻击骰子之类的随机数。"
	// TCWE
		// TC Preload
			TCPreloadSystem_CreatePreload=新建存档 [T]
				TCPreloadSystem_CreatePreload="新建存档"
				TCPreloadSystem_CreatePreloadHint="在使用天才存档系统前请先创建存档，最多同时操作10个对象"
			TCPreloadSystem_DestroyPreload=删除存档 [T]
				TCPreloadSystem_DestroyPreload="删除 ",~整数," "
				TCPreloadSystem_DestroyPreloadHint="在使用存档系统后记得删除对象，系统会自动释放内存"
			TCPreloadSystem_ClearPreload=重置存档 [T]
				TCPreloadSystem_ClearPreload="重置 ",~整数," "
				TCPreloadSystem_ClearPreloadHint="将该存档清空并初始化，可重新使用"
			TCPreloadSystem_PreloadSetType=设置存档类型 [T]
				TCPreloadSystem_PreloadSetType="设置 ",~整数," 的类型为 ",~存储/读取," "
				TCPreloadSystem_PreloadSetTypeHint="设置该存档的类型为存储/读取，只可设置一次，重置存档后可以重新设置类型"
			TCPreloadSystem_PreloadAddInt=设置整数 [T]
				TCPreloadSystem_PreloadAddInt="将 ",~整数," 的整数子索引 ",~整数," 设置为 ",~整数,""
				TCPreloadSystem_PreloadAddIntHint="设置该存档上的整数数值，并自动将类型设置为存储；整数和字符串分别使用各自的索引"
			TCPreloadSystem_PreloadAddStr=设置字符串 [T]
				TCPreloadSystem_PreloadAddStr="将 ",~整数," 的字符串子索引 ",~整数," 设置为 ",~字符串,""
				TCPreloadSystem_PreloadAddStrHint="设置该存档上的字符串数值，并自动将类型设置为存储；整数和字符串分别使用各自的索引"
			TCPreloadSystem_SavePreload=存储存档 [T]
				TCPreloadSystem_SavePreload="为 ",~玩家," 使用 ",~整数," 存储数据，路径为 ",~字符串,""
				TCPreloadSystem_SavePreloadHint="在本地文件存储内容，并自动将该存档的类型设置为存储（延迟0.2秒后才能存储，防止掉线）"
			TCPreloadSystem_LoadPreload=读取存档 [T]
				TCPreloadSystem_LoadPreload="为 ",~玩家," 使用 ",~整数," 读取数据，路径为 ",~字符串,""
				TCPreloadSystem_LoadPreloadHint="从本地文件读取内容，并自动将该存档的类型设置为读取（延迟1秒后才能开始获取数据，防止掉线）"
			TCPreloadSystem_SetCode=设置密码 [T]
				TCPreloadSystem_SetCode="设置密码为 ",~字符串,""
				TCPreloadSystem_SetCodeHint="使用中文字符串加密更加安全"
			PreloadGenClear=预载初始化（输出） [T]
				PreloadGenClear="预载初始化（输出）"
				PreloadGenClearHint="清空当前预载内容，一般在每次预载前使用"
			PreloadGenStart=预载开始（输出） [T]
				PreloadGenStart="预载开始（输出）"
				PreloadGenStartHint="预载开始接在初始化之后"
			PreloadGenEnd=预载结束（输出） [T]
				PreloadGenEnd="预载结束（输出），将文件输出在 ",~filename," "
				PreloadGenEndHint="本次预载的最后一句语句"
			PreloadEnd=预载延迟设置（输入） [T]
				PreloadEnd="设置预载（输入）最大延迟为 ",~实数," 秒"
				PreloadEndHint="预载文件中最后一句语句，但应写在其他预载输入语句之前（无明显意义）"
			PreloadEndEx=预载延迟设置（输入）（自动） [T]
				PreloadEndEx="自动设置预载（输入）最大延迟 "
				PreloadEndExHint="预载文件中最后一句语句，但应写在其他预载输入语句之前（无明显意义）"
			PreloadRefresh=预载初始化（输入） [T]
				PreloadRefresh="预载初始化（输入）"
				PreloadRefreshHint="清空当前预载内容，一般在每次预载前使用（无明显意义）"
			PreloadStart=预载开始（输入） [T]
				PreloadStart="预载开始（输入）"
				PreloadStartHint="预载开始接在初始化之后（无明显意义）"
			Preload=预载（输入） [T]
				Preload="预载（输入），路径为 ",~字符串," "
				PreloadHint="预载用于加快游戏运行速度"
			Preloader=预载（输入）（批量） [T]
				Preloader="批量预载（输入），路径为 ",~字符串," "
				PreloaderHint="批量使用预载（输入）"
		// TC Stringcode
			TCStringcodeSystem_CreateStringcode="加密字符串 - 新建 [T]"
				TCStringcodeSystem_CreateStringcode="加密字符串 - 新建"
				TCStringcodeSystem_CreateStringcodeHint="在使用加密字符串系统前请先新建一个加密字符串，最多同时操作80个加密字符串"
			TCStringcodeSystem_DestroyStringcode="加密字符串 - 删除 [T]"
				TCStringcodeSystem_DestroyStringcode="加密字符串 - 删除 ",~加密字符串
				TCStringcodeSystem_DestroyStringcodeHint="在使用加密字符串系统后记得删除加密字符串，系统会自动释放内存"
			TCStringcodeSystem_ClearStringcode="加密字符串 - 重置 [T]"
				TCStringcodeSystem_ClearStringcode="加密字符串 - 重置 ",~加密字符串
				TCStringcodeSystem_ClearStringcodeHint="将该加密字符串清空并初始化，可重新使用"
			TCStringcodeSystem_StringcodeSetType="加密字符串 - 设置类型 [T]"
				TCStringcodeSystem_StringcodeSetType="加密字符串 - 设置 ",~加密字符串," 的类型为 ",~存储/读取
				TCStringcodeSystem_StringcodeSetTypeHint="设置该加密字符串的类型为存储/读取，只可设置一次，重置加密字符串后可以重新设置类型"
			TCStringcodeSystem_StringcodeAddInt="加密字符串 - 设置整数 [T]"
				TCStringcodeSystem_StringcodeAddInt="加密字符串 - 设置 ",~加密字符串," 的整数子索引 ",~整数," = ",~整数
				TCStringcodeSystem_StringcodeAddIntHint="设置该加密字符串上的整数数值，储存范围[-35819648,35819647]，超出范围自动取模，并自动将类型设置为存储"
			TCStringcodeSystem_StringcodeAddLongInt="加密字符串 - 设置长整数 [T]"
				TCStringcodeSystem_StringcodeAddLongInt="加密字符串 - 设置 ",~加密字符串," 的整数子索引 ",~整数," = ",~整数
				TCStringcodeSystem_StringcodeAddLongIntHint="设置该加密字符串上的整数数值，可储存所有整数，但占据当前索引和后一个索引，并自动将类型设置为存储"
			TCStringcodeSystem_StringcodeSetStr="加密字符串 - 设置字符串 [T]"
				TCStringcodeSystem_StringcodeSetStr="加密字符串 - 设置 ",~加密字符串," = ",~字符串
				TCStringcodeSystem_StringcodeSetStrHint="设置该加密字符串上的字符串数值，并自动将类型设置为读取"
			TCStringcodeSystem_SetCode="加密字符串 - 设置密码 [T]"
				TCStringcodeSystem_SetCode="加密字符串 - 设置密码为 ",~密码
				TCStringcodeSystem_SetCodeHint="使用中文字符串加密更安全"
	// DYC
		// unit
			DYCleap=命令单位跳跃 [D]
				DYCleap="命令 ",~跳跃单位," 跳跃。 跳跃高度: ",~," ，跳跃距离: ",~," ，跳跃时间: ",~," ，跳跃角度: ",~," ，防卡位: ",~," 杀死树木: ",~
				DYCleapHint="单位移速必须大于0。 默认高度必须大于最小高度。 防卡位: 防止落在悬崖上。 杀死树木: 落地后杀死周围树木。"
			DYCpushback=击退单位 [D]
				DYCpushback="对 ",~被击退单位," 朝 ",~方向," 发动击退。 击退距离: ",~," ，击退时间: ",~," ，开启特效: ",~
				DYCpushbackHint="与匀减速冲锋相同。 单位移速必须大于0。 自带防卡位、清除树木功能。"
			DYCcharge=命令单位冲锋(指向方向) [D]
				DYCcharge="命令 ",~冲锋者," 冲锋。 冲锋高度: ",~," ，冲锋距离: ",~," ，冲锋时间: ",~," 秒，角度: ",~," 。对目标点中心 ",~," 半径范围内的单位造成影响。 影响蝗虫单位: ",~," ，防卡位: ",~," ，杀死树木: ",~," ，锁定单位角度: ",~," 。 本次冲锋名字: ",~
				DYCchargeHint="单位死亡时会自动终止冲锋。 配合'被冲锋'、'完成冲锋'、'停止冲锋'事件使用。 为冲锋命名可以用于在事件中区分不同的冲锋。 技能影响的蝗虫单位必须是游戏开始后被创建的"
			DYCchargetarget=命令单位冲锋(指向单位) [D]
				DYCchargetarget="命令 ",~冲锋者," 冲向 ",~被冲锋者," 。 冲锋高度: ",~," ，冲锋速度: ",~," ，距离目标小于 ",~," 时结束冲锋。对以冲锋者为中心 ",~," 半径范围内的单位造成影响。 影响蝗虫单位: ",~," 。冲锋时播放冲锋者第 ",~," 号动作，动画播放速度倍数为 ",~," 。本次冲锋名字: ",~
				DYCchargetargetHint="冲锋者或被冲锋者死亡时，冲锋会自动终止。 蝗虫单位不会播放动画。 配合'被冲锋'、'完成冲锋'、'停止冲锋'事件使用。 为冲锋命名可以用于在事件中区分不同的冲锋。"
			DYCcharge3dsin=命令单位冲锋(指向方向|3D波动) [D]
				DYCcharge3dsin="命令 ",~冲锋者," 按照Sin函数曲线冲锋。 轴向冲锋距离: ",~," ，冲锋时间: ",~," 秒，X、Y、Z三轴旋转角: (",~," , ",~," , ",~,") ，Sin曲线周期数: ",~," ，Sin振幅: ",~," ，Sin曲线初相位: ",~," 个周期。 对以冲锋者为中心 ",~," 半径范围内的单位造成影响。 采用球体选择范围: ",~," ，影响蝗虫单位: ",~,"，锁定面向角度: ",~," ，本次冲锋名字: ",~
				DYCcharge3dsinHint="x轴逆时针为正、y轴顺时针为正、z轴逆时针为正。球体范围false则使用传统的圆柱体选取范围(即不考虑高度)。"
			DYCcharge3dsintarget=命令单位冲锋(指向单位|3D波动) [D]
				DYCcharge3dsintarget="命令 ",~冲锋者," 以波动方式冲向 ",~被冲锋者," 。 轴向冲锋速度: ",~," ，X轴旋转角: ",~," ，Sin曲线周期数: ",~," ，Sin振幅: ",~," ，Sin曲线初相位: ",~," 个周期，距离目标小于 ",~," 时完成冲锋。对以冲锋者为中心 ",~," 半径范围内的单位造成影响。 采用球体选择范围: ",~," ，影响蝗虫单位: ",~," ，锁定面向角度: ",~," ，采用振幅衰减: ",~," ，本次冲锋名字: ",~
				DYCcharge3dsintargetHint="振幅衰减是指快结束时，振幅会逐渐变为0，如果感到轨迹不自然可以开启这项。"
			DYCcharge3dhelix=命令单位冲锋(指向方向|3D螺旋) [D]
				DYCcharge3dhelix="命令 ",~冲锋者," 按照Sin螺旋曲线冲锋。 轴向冲锋距离: ",~," ，冲锋时间: ",~," 秒，X、Y、Z三轴旋转角: (",~," , ",~," , ",~,") ，Sin曲线周期数: ",~," ，Sin振幅: ",~," ，Sin曲线初相位: ",~," 个周期。 对以冲锋者为中心 ",~," 半径范围内的单位造成影响。 采用球体选择范围: ",~," ，影响蝗虫单位: ",~,"，锁定面向角度: ",~," ，本次冲锋名字: ",~
				DYCcharge3dhelixHint="x轴逆时针为正、y轴顺时针为正、z轴逆时针为正。球体范围false则使用传统的圆柱体选取范围(即不考虑高度)。"
			DYCcharge3dhelixtarget=命令单位冲锋(指向单位|3D螺旋) [D]
				DYCcharge3dhelixtarget="命令 ",~冲锋者," 以Sin螺旋曲线方式冲向 ",~被冲锋者,"。 轴向冲锋速度: ",~," ，X轴旋转角: ",~," ，Sin曲线周期数: ",~," ，Sin振幅: ",~," ，Sin曲线初相位: ",~," 个周期，距离目标小于 ",~," 时完成冲锋。对以冲锋者为中心 ",~," 半径范围内的单位造成影响。 采用球体选择范围: ",~," ，影响蝗虫单位: ",~," ，锁定面向角度: ",~," ，采用振幅衰减: ",~," ，本次冲锋名字: ",~
				DYCcharge3dhelixtargetHint="振幅衰减是指快结束时，振幅会逐渐变为0，建议开启。"
			DYCchargeend=命令单位停止冲锋 [D]
				DYCchargeend="停止 ",~冲锋者," 的名字为 ",~冲锋名字," 的冲锋"
				DYCchargeendHint="立即停止某个单位的某个名字的冲锋。"
			DYCImpaleLinear=命令单位造成穿刺伤害(直线|模拟) [D]
				DYCImpaleLinear="命令 ",~," 发动伤害为 ",~," 的直线穿刺，穿刺距离为 ",~," ，碰撞半径为 ",~," 。穿刺起点坐标为 (",~x," ,",~y,") ，穿刺蔓延速度为 ",~," ，角度为 ",~," 。为 ",~," 创建带有 ",~," 级 ",~技能," 的 ",~马甲," 对被穿刺的单位发动 ",~
				DYCImpaleLinearHint="直线穿刺系统，击飞高度固定450，击飞时间为0.6，击飞过程单位被暂停。"
			DYCImpaleLinearSimple=命令单位造成穿刺伤害(直线|模拟|简易) [D]
				DYCImpaleLinearSimple="命令 ",~," 发动伤害为 ",~," 的直线穿刺，穿刺距离为 ",~," ，碰撞半径为 ",~," 。穿刺起点坐标为 (",~x," ,",~y,") ，穿刺蔓延速度为 ",~," ，角度为 ",~
				DYCImpaleLinearSimpleHint="（不用填写玩家马甲相关的数据）直线穿刺系统，击飞高度固定450，击飞时间为0.6，击飞过程单位被暂停。（由XYWE拓展）"
			DYCImpaleSector=命令单位造成穿刺伤害(扇形|模拟) [D]
				DYCImpaleSector="命令 ",~," 发动伤害为 ",~," 的扇形穿刺，穿刺距离为 ",~," ，碰撞半径为 ",~," 。穿刺起点坐标为 (",~x,", ",~y,") ，穿刺蔓延速度为 ",~," ，角度为 ",~," ，扇形度数为 ",~," 。为 ",~," 创建带有 ",~," 级 ",~技能," 的 ",~马甲," 对被穿刺的单位发动 ",~
				DYCImpaleSectorHint="扇形穿刺系统，击飞高度固定450，击飞时间为0.6，击飞过程单位被暂停。扇形度数设为360则相当于圆形穿刺。"
			DYCImpaleSectorSimple=命令单位造成穿刺伤害(扇形|模拟|简易) [D]
				DYCImpaleSectorSimple="命令 ",~," 发动伤害为 ",~," 的扇形穿刺，穿刺距离为 ",~," ，碰撞半径为 ",~," 。穿刺起点坐标为 (",~x,", ",~y,") ，穿刺蔓延速度为 ",~," ，角度为 ",~," ，扇形度数为 ",~
				DYCImpaleSectorSimpleHint="（不用填写玩家马甲相关的数据）扇形穿刺系统，击飞高度固定450，击飞时间为0.6，击飞过程单位被暂停。扇形度数设为360则相当于圆形穿刺。（由XYWE拓展）"
			DYCdmgdodge=为单位抵抗伤害 [D]
				DYCdmgdodge="为 触发单位 抵挡 ",~,"*单位所受伤害 点伤害。"
				DYCdmgdodgeHint="在受伤害事件中使用。 原理：根据不同的血量情况分别采取预回血、0秒回血、0秒无敌的处理方式。"
			DYCdmgdisplay=在指定坐标显示伤害文本 [D]
				DYCdmgdisplay="用漂浮文字在坐标 (",~,", ",~,") 显示伤害。 高度: ",~," ，字体大小: ",~," ，文字持续 ",~," 秒，文字移动速度: ",~," ，角度: ",~," 度。 文字前缀: ",~," ，文字后缀: ",~," 。是否对触发单位所有者显示: ",~," ，是否对伤害来源所有者显示: ",~," ，是否对所有玩家显示: ",~," (勾选此项会忽略前两项)"
				DYCdmgdisplayHint="在受伤害事件中使用，可以配合伤害抵挡系统。显示值为0.011秒内的伤害总和减去被抵挡掉的伤害。"
			DYCUPause=暂停单位或动画 [D]
				DYCUPause="将 ",~," 暂停 ",~," 秒。暂停方式：",~
				DYCUPauseHint="暂停单位或动画。计时器不会相互冲突。同时暂停单位和动画时会暂停跳跃、击退等动作。"
			DYCspawnsystemstart=命令单位开始刷兵 [D]
				DYCspawnsystemstart="为 ",~," 创建刷兵计时器并开始刷兵，起点坐标 (",~,", ",~,") ，攻击移动到坐标 (",~,", ",~,") ，兵种类型1: ",~," ，兵种1的数量: ",~,"，兵种类型2: ",~," ，兵种2的数量: ",~," ，兵种类型3: ",~," ，兵种3的数量: ",~," ，兵种类型4: ",~," ，兵种4的数量: ",~," ，单位初始面向角: ",~," ，刷兵波次间隔: ",~," ，单兵刷新间隔: ",~," ，按随机顺序刷兵种: ",~," 。为每个刷出的单位在 ",~," 秒后创建一个会立即被删除的一次性特效 ",~," ，绑定在单位的 ",~," 附着点处"
				DYCspawnsystemstartHint="可以用'最后创建刷兵计时器'获取计时器。单兵刷新间隔表示每两个刷出的单位间的间隔。"
			DYCspawnsystemend=命令单位停止刷兵 [D]
				DYCspawnsystemend="停止 ",~," 的刷兵"
				DYCspawnsystemendHint="停止刷兵并删除刷兵计时器。"
			DYCultrams=为单位开启极限移动模式 [D]
				DYCultrams="为 ",~," 开启极限移动模式，移动速度: ",~
				DYCultramsHint="开启极限移动模式后，移动速度可以超过522。 DYC UI: 建议不超过1000，设置为0会有禁锢效果"
			DYCultramsoff=为单位关闭极限移动模式 [D]
				DYCultramsoff="为 ",~," 关闭极限移动模式"
				DYCultramsoffHint="停止某单位的突破极限移动速度功能以节省资源。 有0.02秒延迟。"
			DYCghosting=为单位开启幻影拖尾特效 [D]
				DYCghosting="为 ",~," 开启幻影拖尾特效。 幻影生成间隔: ",~," ，存活时间: ",~," 。幻影单位类型: ",~," ，幻影单位所有者: ",~," 。幻影单位的坐标XY修正值: (",~,", ",~,")"
				DYCghostingHint="幻影单位类型建议使用无阴影的马甲。如果发现幻影位置不准确请使用坐标修正。"
			DYCghostingoff=为单位关闭幻影拖尾特效 [D]
				DYCghostingoff="关闭 ",~," 的幻影拖尾特效"
				DYCghostingoffHint="关闭特效以节省资源。 有0.02秒延迟。"
			DYCbarsim=为单位开启或更新状态条(模拟) [D]
				DYCbarsim="为 ",~," 开启状态条模拟功能或更新数据。 设定格子总数为 ",~," ，当前值为 ",~," ，最大值为 ",~," 。设定漂浮文字高度为 ",~," ，字体大小为 ",~," ，使用的格子字符为 ",~," ，满状态颜色为 ",~," ，空状态颜色为 ",~," 。仅对自己显示: ",~," 。XY坐标修正值: (",~,", ",~,")"
				DYCbarsimHint="可以用来模拟单位的某项自定义值显示。对已开启的单位使用会更新数据。如果发现位置不准，请使用坐标修正。"
			DYCbarsimoff=为单位关闭状态条(模拟) [D]
				DYCbarsimoff="为 ",~," 关闭状态条模拟功能"
				DYCbarsimoffHint="删除漂浮文字以节省资源。有0.02秒延迟。"
			DYCaddabilityp=添加技能并设置永久性 [D]
				DYCaddabilityp="为 ",~," 添加 ",~," 级的 ",~技能," 。技能永久性: ",~," ，是否对所属玩家禁用: ",~
				DYCaddabilitypHint=
		// lightning
			DYCaddlightning=创建闪电效果(延时删除|指定坐标或单位) [D]
				DYCaddlightning="创建闪电 ",~闪电类型," 从坐标 (",~,", ",~,", ",~,") 到坐标 (",~,", ",~,", ",~,") ，颜色: (",~红色,", ",~绿色,", ",~蓝色,") ，不透明度: ",~," 。 绑定单位: (起点: ",~," , 终点: ",~,") ，持续 ",~," 秒，并在 ",~," 秒内淡化并删除。 任意单位死亡提前淡化: ",~," ，起点坐标XYZ修正值: (",~X坐标,", ",~Y坐标,", ",~Z坐标,") ，终点坐标XYZ修正值: (",~X坐标,", ",~Y坐标,", ",~Z坐标,")"
				DYCaddlightningHint="若绑定了单位,则无视所填坐标,且会自动跟随单位移动。 可以通过'最后创建的闪电效果'获取。 禁止使用普通触发提前删除。 绑定地面单位通常需要 60 的Z轴修正"
	// 逆天
		YDWEActivateTrigger="触发器   - 激活 [Y]"
			YDWEActivateTrigger="激活 ",~Trigger," ( ",~On/Off," 兼容模式 )"
			YDWEActivateTriggerHint="不要多次激活一个触发器。不要激活未开启休眠的触发器。打开兼容模式会略微影响效率，若关闭兼容模式，请保证该动作在需要激活的触发器之后，否则会有语法错误。"
		YDWEEnumUnitsInRangeMultiple="选取单位 - 圆形范围 [Y]"
			YDWEEnumUnitsInRangeMultiple="选取以(",~坐标X,", ",~坐标Y,")为圆心,",~半径,"为半径的圆范围内的单位做动作"
			YDWEEnumUnitsInRangeMultipleHint="选取范围内的单位做动作"
		YDWESetAnyTypeLocalVariable="局部变量 - 设置 [Y]"
			YDWESetAnyTypeLocalVariable="设置 [",~类型,"] loc_",~变量名," = ",~null
			YDWESetAnyTypeLocalVariableHint="设置局部变量，可以指定变量类型.在1.24下不可直接将变量置为null"
		YDWEForLoopLocVarMultiple="局部变量 - 循环 [Y]"
			YDWEForLoopLocVarMultiple="循环动作[loop_",~局部变量名,"]从 ",~开始," 到 ",~结束,", 运行 (Loop - 动作)"
			YDWEForLoopLocVarMultipleHint=
		YDWETimerStartMultiple="计时器   - 运行 [Y]"
			YDWETimerStartMultiple="立即运行 ",~计时器," 时间设置: ",~time," 秒，是否循环: ",~false/true
			YDWETimerStartMultipleHint="让计时器运行多个动作。计时器内不能使用等待。"
		YDWETimerStartFlush="计时器   - 清除 [Y]"
			YDWETimerStartFlush="清除当前逆天计时器"
			YDWETimerStartFlushHint="删除当前逆天计时器，并清空缓存或哈希表."
		YDWERegisterTriggerMultiple="触发器   - 注册 [Y]"
			YDWERegisterTriggerMultiple="注册 ",~触发器
			YDWERegisterTriggerMultipleHint="触发器内不能使用等待。"
		YDWERegisterTriggerFlush="触发器   - 清除 [Y]"
			YDWERegisterTriggerFlush="清除当前逆天触发器"
			YDWERegisterTriggerFlushHint="删除当前逆天触发器，并清空缓存或哈希表."
		YDWESaveAnyTypeDataByUserData="自定义值 - 设置 [Y]"
			YDWESaveAnyTypeDataByUserData="设置 {",~类型,"}",~null,"[",~属性,"] = {",~类型,"}",~null
			YDWESaveAnyTypeDataByUserDataHint="设置某个数据的自定义属性，如设置 {单位}骑士[长相] = {字符串}超帅"
		YDWEFlushAllByUserData="自定义值 - 清除(全部) [Y]"
			YDWEFlushAllByUserData="清空 {",~类型,"}",~null," 的所有自定义属性"
			YDWEFlushAllByUserDataHint="清空某个数据所有的自定义属性"
		YDWEFlushAnyTypeDataByUserData="自定义值 - 清除 [Y]"
			YDWEFlushAnyTypeDataByUserData="清空 {",~类型,"}",~null," 的 {",~类型,"}",~属性
			YDWEFlushAnyTypeDataByUserDataHint="清空某个数据的某项自定义属性"
		YDWEWaitForLocalVariable="等待(局部变量专用) [Y]"
			YDWEWaitForLocalVariable="等待 ",~Time," 秒(局部变量专用)"
			YDWEWaitForLocalVariableHint="使用逆天系列的UI，无需使用它"
	// YD Ability
		YDWEJumpTimer="跳跃函数 [Y]"
			YDWEJumpTimer="命令 ",~单位," 向 ",~方向," 方向跳跃，距离为 ",~距离," ，持续 ",~时间," 秒，刷新周期 ",~I,"，最大高度 ",~高度,"。"
			YDWEJumpTimerHint="当最大高度设置为0，则为普通的移动。"
		YDWEMeatHook="肉钩 [Y]"
			YDWEMeatHook="让","单","位 ",~单位," 向 ",~点," 放","出","一","条","钩","子，","钩","头","为 ",~钩头,"，链条为 ",~链条,"，最","远","距","离可","达 ",~实数,"，链条","间距","为 ",~实数,"，对敌对","单位","造成","伤害 ",~实数,"，刷新","周期为 ",~实数,"。"
			YDWEMeatHookHint="钩肥大战里的钩子，由Ors和Everguo优化代码。请务必从演示地图里复制钩子和钩条单位，算我求大家了-.-"
		YDWETimerPatternJumpAttack="跳劈函数 [Y]"
			YDWETimerPatternJumpAttack="命令 ",~单位," 向 ",~方向," 方向跳劈，距离为 ",~距离," ，","持","续","时","间 ",~时间,"，刷新周期 ",~I,"，最大高度 ",~高度,"，","对","途","经","敌","人","造","成","伤","害","值 ",~伤害量,"，在敌人的 ",~部位," 附加特效 ",~特效,"。"
			YDWETimerPatternJumpAttackHint="<Warft_TigerCN制作> 当伤害值设置为0，则敌人身上不出现特效。代码由Fetrix_sai修改。"
		YDWETimerPatternMoonPriestessArrow="月神箭 [Y]"
			YDWETimerPatternMoonPriestessArrow="命令 ",~单位," 向 ",~方向," 方向飞行，距离为 ",~距离," ，","持续 ",~时间," 秒，刷新周期 ",~I,"，生成带有 ",~整数," 级 ",~技能," 的 ",~辅助单位,"，对目标施放 ",~技能," ，在目标的 ",~部位," 附加 ",~特效,"。"
			YDWETimerPatternMoonPriestessArrowHint="<Warft_TigerCN制作> 由辅助单位给目标添加眩晕等状态。代码由Fetrix_sai修改。"
		YDWETimerPatternRushSlide="冲锋 [Y]"
			YDWETimerPatternRushSlide="命令 ",~单位," 向 ",~方向," 方向冲锋，射程为 ",~距离," ，持续 ",~时间," 秒，刷新周期 ",~I,"，对途经敌人伤害值 ",~实数,"，摧毁树木 ",~布尔,"，不计算碰撞 ",~布尔,"，无视地形 ",~布尔," ，在目标的 ",~部位," 附加 ",~特效,"(地面)，附加 ",~特效,"(水中)"
			YDWETimerPatternRushSlideHint="<Warft_TigerCN制作> 代码由Fetrix_sai修改"
		YDWEAroundSystem="万能环绕函数 [Y]"
			YDWEAroundSystem="命令 ",~单位," 围绕 ",~单位," 环绕，角速度为 ",~实数,"，离心速度为 ",~实数,"，提升速度为 ",~实数,"，持续 ",~实数," 秒""，""刷""新""周""期""为 ",~实数," 秒"
			YDWEAroundSystemHint="<Fetrix_sai制作> 角速度为正，顺时针旋转，反之逆时针；离心速度为正，远离目标，反之靠近；提升速度为正，则高度上升，反之下降。"
	// YD System
		LeakMonitor="检测并显示泄露 [JAPI] [W]"
			LeakMonitor="显示点、特效、单位组、不规则区域、矩形区域、玩家组泄露"
			LeakMonitorHint="要把“设置-魔兽插件-泄漏检测”的选项打开才能使用，位于YDWE配置。虽然是Japi,但是检测功能是测试之用，如不需要，删除即可。"
		CreateLeakMonitorReport="生成详细泄露报告 [JAPI] [W]"
			CreateLeakMonitorReport="生成报告于本地磁盘"
			CreateLeakMonitorReportHint="生成 YDWE目录\logs\leak_moniter_report.txt,虽然是Japi,但是检测功能是测试之用，如不需要，删除即可。"
		WMLeakMonitorSystem="检测泄露系统 [JAPI] [W]"
			WMLeakMonitorSystem="显示16项类型数量"
			WMLeakMonitorSystemHint="输入-reset max重设max值，输入-set t=数字，设置检测开始到显示的延迟，不输入则为2秒，推荐为2秒以上。,魔兽1.20可能有问题."
		YDWENewItemsFormula="物品合成系统 [Y]"
			YDWENewItemsFormula="将材料1( ",~类型,",",~整数,")、材料2( ",~类型,",",~整数,")、材料3( ",~类型,",",~整数,")""、""材""料""4""( ",~类型,",",~整数,")、材料5( ",~类型,",",~整数,")、材料6( ",~类型,",",~整数,")合成 ",~物品," "
			YDWENewItemsFormulaHint="<Fetrix_sai制作> 填写物品合成所需的材料及其数量，最多可以填6种；当所需材料数量为0时，对应材料将被忽略。"
		YDWE_TP_PauseTimerPeriodic="新中心计时器 - 终止运行 [Y]"
			YDWE_TP_PauseTimerPeriodic="终止运行索引为 ",~计时器运行索引," 的计时器运行 "
			YDWE_TP_PauseTimerPeriodicHint="<Fetrix_sai制作> 当中心计时器运行某个触发器时，会生成一个运行索引；可以通过该运行索引来终止本次计时器运行。"
		YDWE_TP_SetTimeInterval="新中心计时器 - 修改运行间隔 [Y]"
			YDWE_TP_SetTimeInterval="修改运行索引为 ",~计时器运行索引," 的计时器运行间隔为 ",~实数
			YDWE_TP_SetTimeIntervalHint="<Fetrix_sai制作> 当中心计时器运行某个触发器时，会生成一个运行索引；可以中途修改计时器某次运行的时间间隔。"
		YDWEAttackWaveTimer="刷兵系统 [Y]"
			YDWEAttackWaveTimer="为玩家 ",~玩家," 创建 ",~n," 个 ",~单位类型," 在点 ",~初始点," 面向 ",~角度,"，命令他们攻击到点 ",~目标点,"，刷新周期 ",~周期,"。"
			YDWEAttackWaveTimerHint="3C的刷兵系统，也可用于防守RPG，按周期生成每波单位向指定点进攻。"
		YDWERemoveAttackWaveByUnitID="取消刷兵(输入参数) [Y]"
			YDWERemoveAttackWaveByUnitID="停止创建 ",~单位,"，地点为 ",~初始点,"，周期是 ",~周期
			YDWERemoveAttackWaveByUnitIDHint="取消刷兵，注意这里填写的参数要与前面刷兵系统一致，不然无法停止刷兵。"
		YDWERemoveAttackWaveByTimer="取消刷兵(删除计时器) [Y]"
			YDWERemoveAttackWaveByTimer="删除刷兵计时器 ",~计时器
			YDWERemoveAttackWaveByTimerHint="取消刷兵，并能自动清空缓存。"
		YDWEDoubleItemSlotByAbility="多重物品栏(技能触发) [Y]"
			YDWEDoubleItemSlotByAbility="当 ",~单位," 使用技能 ",~背包技能," 时切换背包，辅助单位为 ",~背包单位,"，背包个数为 ",~整数
			YDWEDoubleItemSlotByAbilityHint="切换背包时会触发单位获得和掉落物品事件；背包技能和背包单位的设置请参考example文件夹中的辅助地图。"
		YDWEDoubleItemSlotByItem="多重物品栏(物品触发) [Y]"
			YDWEDoubleItemSlotByItem="当 ",~单位," 使用物品 ",~背包物品," 时切换背包，辅助单位为 ",~背包单位,"，背包个数为 ",~整数
			YDWEDoubleItemSlotByItemHint="切换背包时会触发单位获得和掉落物品事件；背包物品和背包单位的设置请参考example文件夹中的辅助地图。"
		YDWEGeneralBounsSystemUnitSetBonus="万能属性系统 - 设置属性 [Y]"
			YDWEGeneralBounsSystemUnitSetBonus="设置 ",~单位," 的附加 ",~属性," ",~计算," ",~数值
			YDWEGeneralBounsSystemUnitSetBonusHint="<茄子制作>"
		KillSystemInitSet="击杀系统 - 初始化设置 [W]"
			KillSystemInitSet="击杀系统 - 设置第一滴血奖励金钱,",~g,"音效",~p,",每次击杀最少金钱",~g,", 被杀英雄每级所增加的金钱数",~g,", 短时间内连杀所持续时间 ",~t,", 判断助攻的持续时间",~t,"死亡是否失去金钱",~b
			KillSystemInitSetHint="如果对系统不理解请先看演示图"
		KillSystemAddHero="击杀系统 - 添加英雄 [W]"
			KillSystemAddHero="击杀系统 - 给该系统添加英雄 ",~h
			KillSystemAddHeroHint=""
		AddKillText="击杀系统 - 设置累计杀信息 [W]"
			AddKillText="击杀系统 - 设置累计杀信息 ",~h," 播放音效",~m
			AddKillTextHint="从杀三个开始。不会随时间刷新的累计杀人数，死亡后刷新.每设置一次就是下一次累计杀信息。当杀敌数超过设置的信息时将显示最后一个信息。"
		AddContinuousKillText="击杀系统 - 设置连杀信息 [W]"
			AddContinuousKillText="击杀系统 - 设置连杀信息 ",~h," 播放音效",~m
			AddContinuousKillTextHint="从杀二个开始。会随时间刷新的累计杀人数，死亡后刷新.每设置一次就是下一次连杀信息。当杀敌数超过设置的信息时将显示最后一个信息。"
		AddDeathText="击杀系统 - 设置连死信息 [W]"
			AddDeathText="击杀系统 - 设置连死信息 ",~h
			AddDeathTextHint="从死三次开始。杀人后刷新.每设置一次就是下一次死亡信息。当死亡数超过设置的信息时将显示最后一个信息"
		AddShutDownText="击杀系统 - 设置终结信息 [W]"
			AddShutDownText="击杀系统 - 设置终结信息 ",~h
			AddShutDownTextHint="每设置一次就是下一次终结信息。"
	// YD AI
		YDWESetGuard="佣兵系统 [Y]"
			YDWESetGuard="命令 ",~单位," 跟随 ",~单位,"，刷新周期 ",~timeout,"，巡逻半径 ",~guardRanger,"，返回半径 ",~returnRanger,"，传送半径 ",~outRanger,"，巡逻概率 ",~percent,"%"
			YDWESetGuardHint="让一个佣兵跟随主人，可以在主人身边巡逻，当远离主人后自动返回或传送到主人身边。（Red_Wolf制作）"
		YDWERemoveGuard="取消佣兵 [Y]"
			YDWERemoveGuard="取消 ",~单位," 的跟随"
			YDWERemoveGuardHint="让一个佣兵不再跟随主人。备注：如果佣兵是召唤生物那么不必取消，因为当佣兵或主人死亡后，系统会自动取消跟随。（Red_Wolf制作）"
		YDWEAIRecordAbility="技能绑定英雄 [Y]"
			YDWEAIRecordAbility="给单位 ",~英雄," 绑定技能 ",~技能1," ",~技能2," ",~技能3," ",~技能4," ",~技能5
			YDWEAIRecordAbilityHint="为单位绑定5个技能，如果英雄只有4个技能，那么第5个技能请设置为空。（GreedWind制作）"
		YDWEAIRecordLearn_sequence="技能学习顺序绑定英雄 [Y]"
			YDWEAIRecordLearn_sequence="给单位 ",~英雄," 设置技能学习顺序为( ",~技能1," ",~技能2," ",~技能3," ",~技能4," ",~技能5," )"
			YDWEAIRecordLearn_sequenceHint="单位会按输入的等级去学习对应的技能，切记技能学习顺序要按^等级^等级...^等级^的格式输入。（GreedWind制作）"
		YDWEHeroLearnSkillAI="自动学习对应技能 [Y]"
			YDWEHeroLearnSkillAI="让英雄 ",~英雄," 自动学习技能，所学技能对应的英雄等级为 ",~整数
			YDWEHeroLearnSkillAIHint="英雄会学习与等级对应的技能，这些技能必须在之前绑定给英雄。（GreedWind制作）"
		YDWEHeroMaxSkillAI="自动学习全部技能 [Y]"
			YDWEHeroMaxSkillAI="让英雄 ",~英雄," 自动学习所有技能。"
			YDWEHeroMaxSkillAIHint="英雄会洗去之前学习过的技能，并根据技能表顺序学习完所有技能。（GreedWind制作）"
		YDWEAddAIOrder="自动施放技能 [Y]"
			YDWEAddAIOrder="让单位 ",~单位," 在 ",~整数,"时 ",~目标,"施","放","技","能","，","技","能","施","放","方","式","为","(","对","单","位-",~命令,"、","对","点-",~命令,"、","立","即-",~命令,")，","施","放","概","率","为 ",~整数,"%"
			YDWEAddAIOrderHint="让单位有一定概率施放技能，命令要与技能目标一致；代码由Red_Wolf和Fetrix_sai优化。"
	// YD Save Load
		YDWE_PreloadSL_SetFile="设置存档索引(存档名单) [Y]"
			YDWE_PreloadSL_SetFile="为",~玩家,"在","『",~目录名,"』","下","，","将","〖",~存档名,"〗","的","索","引","设","置","为","→","[",~整数,"]"
			YDWE_PreloadSL_SetFileHint="高级功能，当目录下有多个玩家存档时，为存档添加整数索引，建立起存档文件名字与索引的对应关系。"
		YDWE_PreloadSL_Save="保存玩家存档 [Y]"
			YDWE_PreloadSL_Save="为",~玩家,"在","『",~目录名,"』","〖",~存档名,"〗","下","保","存","存","档","，","该","存","档","含","有","[",~整数,"]","个","数","据","项"
			YDWE_PreloadSL_SaveHint="保存一个玩家存档在指定路径下，注意存档的数据项数目不要填错。"
		YDWE_PreloadSL_Load="读取玩家存档 [Y]"
			YDWE_PreloadSL_Load="为",~玩家,"从","『",~目录名,"』","〖",~存档名,"〗","上","读","取","存","档","，","该","存","档","含","有","[",~整数,"]","个","数","据","项"
			YDWE_PreloadSL_LoadHint="获取指定目录下某个玩家存档，必须填写正确的文件名和数据项数目。"
		YDWE_PreloadSL_Set="添加存档数据 [Y]"
			YDWE_PreloadSL_Set="为",~玩家,"添","加"," ※",~数据注释,"，","在","当","前","存","档","[",~数据项索引,"]","上","，","添","加","┠",~数据,"┨"
			YDWE_PreloadSL_SetHint="把数据写入到玩家存档，需要填入正确的数据项索引，注释则可以随意填写。"
	// YD LocalVariable
		YDWELocalVariableInitiliation="开启局部变量功能 [Y]"
			YDWELocalVariableInitiliation="开启局部变量功能"
			YDWELocalVariableInitiliationHint="必须在局部变量赋值之前启用；若触发器内没有等待动作，可以不启用；有等待需求时必须选用局部变量专用等待动作。"
		YDWELocalVariableEnd="清空局部变量 [Y]"
			YDWELocalVariableEnd="清空局部变量"
			YDWELocalVariableEndHint="清空本触发器内用到的全部局部变量，避免内存泄露；使用本动作之前请确保局部变量已经使用完毕。"
		YDWESetLocalVariableInteger="设置 整数 局部变量 [Y]"
			YDWESetLocalVariableInteger="设置 local_",~i," = ",~整数
			YDWESetLocalVariableIntegerHint="为整数局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableIntegerArray="设置 整数 局部变量数组 [Y]"
			YDWESetLocalVariableIntegerArray="设置 local_",~i,"[",~index,"]"," = ",~整数
			YDWESetLocalVariableIntegerArrayHint="为整数局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableReal="设置 实数 局部变量 [Y]"
			YDWESetLocalVariableReal="设置 local_",~R," = ",~实数
			YDWESetLocalVariableRealHint="为实数局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableRealArray="设置 实数 局部变量数组 [Y]"
			YDWESetLocalVariableRealArray="设置 local_",~R,"[",~index,"]"," = ",~实数
			YDWESetLocalVariableRealArrayHint="为实数局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableString="设置 字符串 局部变量 [Y]"
			YDWESetLocalVariableString="设置 local_",~str," = ",~字符串
			YDWESetLocalVariableStringHint="为字符串局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableStringArray="设置 字符串 局部变量数组 [Y]"
			YDWESetLocalVariableStringArray="设置 local_",~str,"[",~index,"]"," = ",~字符串
			YDWESetLocalVariableStringArrayHint="为字符串局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableBoolean="设置 真值 局部变量 [Y]"
			YDWESetLocalVariableBoolean="设置 local_",~bl," = ",~真值
			YDWESetLocalVariableBooleanHint="为真值局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableBooleanArray="设置 真值 局部变量数组 [Y]"
			YDWESetLocalVariableBooleanArray="设置 local_",~bl,"[",~index,"]"," = ",~真值
			YDWESetLocalVariableBooleanArrayHint="为真值局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableUnit="设置 单位 局部变量 [Y]"
			YDWESetLocalVariableUnit="设置 local_",~u," = ",~单位
			YDWESetLocalVariableUnitHint="为单位局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableUnitArray="设置 单位 局部变量数组 [Y]"
			YDWESetLocalVariableUnitArray="设置 local_",~u,"[",~index,"]"," = ",~单位
			YDWESetLocalVariableUnitArrayHint="为单位局部变量赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableUnitID="设置 单位类型 局部变量 [Y]"
			YDWESetLocalVariableUnitID="设置 local_",~uid," = ",~单位类型
			YDWESetLocalVariableUnitIDHint="为单位类型局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableUnitIDArray="设置 单位类型 局部变量数组 [Y]"
			YDWESetLocalVariableUnitIDArray="设置 local_",~uid,"[",~index,"]"," = ",~单位类型
			YDWESetLocalVariableUnitIDArrayHint="为单位类型局部变量赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableAbilityID="设置 技能类型 局部变量 [Y]"
			YDWESetLocalVariableAbilityID="设置 local_",~ab," = ",~技能
			YDWESetLocalVariableAbilityIDHint="为单位类型局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableAbilityIDArray="设置 技能类型 局部变量数组 [Y]"
			YDWESetLocalVariableAbilityIDArray="设置 local_",~ab,"[",~index,"]"," = ",~技能
			YDWESetLocalVariableAbilityIDArrayHint="为单位类型局部变量赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableItem="设置 物品 局部变量 [Y]"
			YDWESetLocalVariableItem="设置 local_",~it," = ",~物品
			YDWESetLocalVariableItemHint="为物品局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableItemArray="设置 物品 局部变量数组 [Y]"
			YDWESetLocalVariableItemArray="设置 local_",~it,"[",~index,"]"," = ",~物品
			YDWESetLocalVariableItemArrayHint="为物品局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableItemID="设置 物品类型 局部变量 [Y]"
			YDWESetLocalVariableItemID="设置 local_",~itid," = ",~物品类型
			YDWESetLocalVariableItemIDHint="为物品类型局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableItemIDArray="设置 物品类型 局部变量数组 [Y]"
			YDWESetLocalVariableItemIDArray="设置 local_",~itid,"[",~index,"]"," = ",~物品类型
			YDWESetLocalVariableItemIDArrayHint="为物品类型局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableLocation="设置 点 局部变量 [Y]"
			YDWESetLocalVariableLocation="设置 local_",~point," = ",~点
			YDWESetLocalVariableLocationHint="为点局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableLocationArray="设置 点 局部变量数组 [Y]"
			YDWESetLocalVariableLocationArray="设置 local_",~point,"[",~index,"]"," = ",~点
			YDWESetLocalVariableLocationArrayHint="为点局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableGroup="设置 单位组 局部变量 [Y]"
			YDWESetLocalVariableGroup="设置 local_",~g," = ",~单位组
			YDWESetLocalVariableGroupHint="为单位组局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableGroupArray="设置 单位组 局部变量数组 [Y]"
			YDWESetLocalVariableGroupArray="设置 local_",~g,"[",~index,"]"," = ",~单位组
			YDWESetLocalVariableGroupArrayHint="为单位组局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableEffect="设置 特效 局部变量 [Y]"
			YDWESetLocalVariableEffect="设置 local_",~e," = ",~特效
			YDWESetLocalVariableEffectHint="为特效局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableEffectArray="设置 特效 局部变量数组 [Y]"
			YDWESetLocalVariableEffectArray="设置 local_",~e,"[",~index,"]"," = ",~特效
			YDWESetLocalVariableEffectArrayHint="为特效局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
		YDWESetLocalVariableRect="设置 地区 局部变量 [Y]"
			YDWESetLocalVariableRect="设置 local_",~rt," = ",~地区
			YDWESetLocalVariableRectHint="为地区局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
		YDWESetLocalVariableRectArray="设置 地区 局部变量数组 [Y]"
			YDWESetLocalVariableRectArray="设置 local_",~rt,"[",~index,"]"," = ",~地区
			YDWESetLocalVariableRectArrayHint="为地区局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	// YD Function
		YDWESetAttackDamageWeaponType="设置默认 攻击/伤害/武器 类型 [Y]"
			YDWESetAttackDamageWeaponType="设置默认攻击类型为 ",~攻击类型,"，伤害类型为 ",~伤害类型,"，武器类型为 ",~武器类型
			YDWESetAttackDamageWeaponTypeHint="设置一些技能（如钩子、月神箭）需要用到的攻击|伤害|武器类型，系统会按设置的攻击|伤害|武器类型对目标造成伤害。"
		YDWEFlyEnable="设置单位可以飞行 [Y]"
			YDWEFlyEnable="让单位 ",~地面单位," 变得可以飞行。"
			YDWEFlyEnableHint="让一个地面单位变得可以飞行，可以设置其飞行高度。"
		YDWESetMapLimitCoordinate="设置地图边界坐标 [Y]"
			YDWESetMapLimitCoordinate="设置地图的边界坐标为 ( X坐标最小值 ",~实数,"，X坐标最大值 ",~实数,"，Y坐标最小值 ",~实数,"，Y坐标最大值 ",~实数," )"
			YDWESetMapLimitCoordinateHint="边界坐标的设置会影响钩子、跳跃等技能在地图边界处的表现形式；默认的边界坐标是镜头范围的边界,新手慎用本设置!"
		YDWELifeChange="设置单位生命上限 [Y]"
			YDWELifeChange="设置 ",~单位," 的生命上限 ",~变化," ",~整数," ，关联技能为 ",~辅助技能
			YDWELifeChangeHint="如果修改后单位生命上限小于0，单位会立即死亡；关联技能的设置请参考example文件夹下的辅助地图。"
		YDWEManaChange="设置单位魔法上限 [Y]"
			YDWEManaChange="设置 ",~单位," 的魔法上限 ",~变化," ",~整数," ，关联技能为 ",~辅助技能
			YDWEManaChangeHint="如果修改后单位魔法上限小于0，单位的魔法栏将消失；关联技能的设置请参考example文件夹下的辅助地图。"
	// YD Load
		YDWEFlushMissionByInteger="清空 目录 　(整数路径) [Y]"
			YDWEFlushMissionByInteger="清空目录-> ",~整数
			YDWEFlushMissionByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从GameCache或HashTable上清空目录。"
		YDWESaveIntegerByInteger="存储 整数 　(整数路径) [Y]"
			YDWESaveIntegerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储整数-> ",~整数
			YDWESaveIntegerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储整数数据。"
		YDWESaveRealByInteger="存储 实数 　(整数路径) [Y]"
			YDWESaveRealByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储实数-> ",~实数
			YDWESaveRealByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储实数数据。"
		YDWESaveStringByInteger="存储 字符串 　(整数路径) [Y]"
			YDWESaveStringByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储字符串-> ",~字符串
			YDWESaveStringByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储字符串数据。"
		YDWESaveBooleanByInteger="存储 真值 　(整数路径) [Y]"
			YDWESaveBooleanByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储真值-> ",~真值
			YDWESaveBooleanByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储真值数据。"
		YDWESaveUnitByInteger="存储 单位 　(整数路径) [Y]"
			YDWESaveUnitByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储单位-> ",~单位
			YDWESaveUnitByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位数据。"
		YDWESaveUnitIDByInteger="存储 单位类型 　(整数路径) [Y]"
			YDWESaveUnitIDByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储单位类型 -> ",~单位类型
			YDWESaveUnitIDByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位类型数据。"
		YDWESaveAbilityIDByInteger="存储 技能 　(整数路径) [Y]"
			YDWESaveAbilityIDByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储技能 -> ",~技能
			YDWESaveAbilityIDByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储技能数据。"
		YDWESaveItemByInteger="存储 物品 　(整数路径) [Y]"
			YDWESaveItemByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储物品-> ",~物品
			YDWESaveItemByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品数据。"
		YDWESaveItemIDByInteger="存储 物品类型 　(整数路径) [Y]"
			YDWESaveItemIDByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储物品类型-> ",~物品类型
			YDWESaveItemIDByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品类型数据。"
		YDWESavePlayerByInteger="存储 玩家 　(整数路径) [Y]"
			YDWESavePlayerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储玩家-> ",~玩家
			YDWESavePlayerByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储玩家数据。"
		YDWESaveTimerByInteger="存储 计时器 　(整数路径) [Y]"
			YDWESaveTimerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储计时器-> ",~计时器
			YDWESaveTimerByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器数据。"
		YDWESaveTriggerByInteger="存储 触发器 　(整数路径) [Y]"
			YDWESaveTriggerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储触发器-> ",~触发器
			YDWESaveTriggerByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器数据。"
		YDWESaveLocationByInteger="存储 点 　(整数路径) [Y]"
			YDWESaveLocationByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储点-> ",~点
			YDWESaveLocationByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储点数据。"
		YDWESaveGroupByInteger="存储 单位组 　(整数路径) [Y]"
			YDWESaveGroupByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储单位组-> ",~单位组
			YDWESaveGroupByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位组数据。"
		YDWESaveMultiboardByInteger="存储 多面板 　(整数路径) [Y]"
			YDWESaveMultiboardByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储多面板-> ",~多面板
			YDWESaveMultiboardByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板数据。"
		YDWESaveMultiboardItemByInteger="存储 多面板项目 　(整数路径) [Y]"
			YDWESaveMultiboardItemByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储多面板项目-> ",~多面板项目
			YDWESaveMultiboardItemByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板项目数据。"
		YDWESaveTextTagByInteger="存储 漂浮文字 　(整数路径) [Y]"
			YDWESaveTextTagByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储漂浮文字-> ",~漂浮文字
			YDWESaveTextTagByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储漂浮文字数据。"
		YDWESaveLightningByInteger="存储 闪电 　(整数路径) [Y]"
			YDWESaveLightningByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储闪电-> ",~闪电
			YDWESaveLightningByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储闪电数据。"
		YDWESaveRegionByInteger="存储 区域 　(整数路径) [Y]"
			YDWESaveRegionByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储区域-> ",~区域
			YDWESaveRegionByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储区域数据。"
		YDWESaveRectByInteger="存储 地区 　(整数路径) [Y]"
			YDWESaveRectByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储地区-> ",~地区
			YDWESaveRectByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储地区数据。"
		YDWESaveLeaderboardByInteger="存储 排行榜 　(整数路径) [Y]"
			YDWESaveLeaderboardByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储排行榜-> ",~排行榜
			YDWESaveLeaderboardByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储排行榜数据。"
		YDWESaveEffectByInteger="存储 特效 　(整数路径) [Y]"
			YDWESaveEffectByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储特效-> ",~特效
			YDWESaveEffectByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储特效数据。"
		YDWESaveDestructableByInteger="存储 可破坏物 　(整数路径) [Y]"
			YDWESaveDestructableByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储可破坏物-> ",~可破坏物
			YDWESaveDestructableByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可破坏物数据。"
		YDWESaveTriggerConditionByInteger="存储 触发器条件 　(整数路径) [Y]"
			YDWESaveTriggerConditionByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储触发器条件-> ",~触发器条件
			YDWESaveTriggerConditionByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器条件数据。"
		YDWESaveTriggerActionByInteger="存储 触发器动作 　(整数路径) [Y]"
			YDWESaveTriggerActionByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储触发器动作-> ",~触发器动作
			YDWESaveTriggerActionByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器动作数据。"
		YDWESaveTriggerEventByInteger="存储 事件 　(整数路径) [Y]"
			YDWESaveTriggerEventByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储事件-> ",~事件
			YDWESaveTriggerEventByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储事件数据。"
		YDWESaveForceByInteger="存储 势力 　(整数路径) [Y]"
			YDWESaveForceByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储势力-> ",~势力
			YDWESaveForceByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储势力数据。"
		YDWESaveBoolexprByInteger="存储 布尔表达式 　(整数路径) [Y]"
			YDWESaveBoolexprByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储布尔表达式-> ",~布尔表达式
			YDWESaveBoolexprByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储布尔表达式数据。"
		YDWESaveSoundByInteger="存储 声音 　(整数路径) [Y]"
			YDWESaveSoundByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储声音-> ",~声音
			YDWESaveSoundByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储声音数据。"
		YDWESaveTimerDialogByInteger="存储 计时器窗口 　(整数路径) [Y]"
			YDWESaveTimerDialogByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储计时器窗口-> ",~计时器窗口
			YDWESaveTimerDialogByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器窗口数据。"
		YDWESaveTrackableByInteger="存储 可追踪物 　(整数路径) [Y]"
			YDWESaveTrackableByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储可追踪物-> ",~可追踪物
			YDWESaveTrackableByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可追踪物数据。"
		YDWESaveDialogByInteger="存储 对话框 　(整数路径) [Y]"
			YDWESaveDialogByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储对话框-> ",~对话框
			YDWESaveDialogByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框数据。"
		YDWESaveButtonByInteger="存储 对话框按钮 　(整数路径) [Y]"
			YDWESaveButtonByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储对话框按钮-> ",~对话框按钮
			YDWESaveButtonByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框按钮数据。"
		YDWESaveQuestByInteger="存储 任务 　(整数路径) [Y]"
			YDWESaveQuestByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储任务-> ",~任务
			YDWESaveQuestByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务数据。"
		YDWESaveQuestItemByInteger="存储 任务目标项 　(整数路径) [Y]"
			YDWESaveQuestItemByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储任务目标项-> ",~任务目标项
			YDWESaveQuestItemByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务目标项数据。"
		YDWEFlushMissionByString="清空 目录 (字符串路径) [Y]"
			YDWEFlushMissionByString="清空目录-> ",~字符串
			YDWEFlushMissionByStringHint="通过输入的路径，系统会根据当前魔兽版本从GameCache或HashTable上清空目录。"
		YDWESaveIntegerByString="存储 整数 (字符串路径) [Y]"
			YDWESaveIntegerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储整数-> ",~整数
			YDWESaveIntegerByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储整数数据。"
		YDWESaveRealByString="存储 实数 (字符串路径) [Y]"
			YDWESaveRealByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储实数-> ",~实数
			YDWESaveRealByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储实数数据。"
		YDWESaveStringByString="存储 字符串 (字符串路径) [Y]"
			YDWESaveStringByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储字符串-> ",~字符串
			YDWESaveStringByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储字符串数据。"
		YDWESaveBooleanByString="存储 真值 (字符串路径) [Y]"
			YDWESaveBooleanByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储真值-> ",~真值
			YDWESaveBooleanByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储真值数据。"
		YDWESaveUnitByString="存储 单位 (字符串路径) [Y]"
			YDWESaveUnitByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储单位-> ",~单位
			YDWESaveUnitByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位数据。
		YDWESaveUnitIDByString="存储 单位类型 (字符串路径) [Y]"
			YDWESaveUnitIDByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储单位类型-> ",~单位类型
			YDWESaveUnitIDByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位类型数据。
		YDWESaveAbilityIDByString="存储 技能 (字符串路径) [Y]"
			YDWESaveAbilityIDByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储技能-> ",~技能
			YDWESaveAbilityIDByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储技能数据。
		YDWESaveItemByString="存储 物品 (字符串路径) [Y]"
			YDWESaveItemByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储物品-> ",~物品
			YDWESaveItemByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品数据。
		YDWESaveItemIDByString="存储 物品类型 (字符串路径) [Y]"
			YDWESaveItemIDByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储物品类型-> ",~物品类型
			YDWESaveItemIDByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品类型数据。
		YDWESavePlayerByString="存储 玩家 (字符串路径) [Y]"
			YDWESavePlayerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储玩家-> ",~玩家
			YDWESavePlayerByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储玩家数据。
		YDWESaveTimerByString="存储 计时器 (字符串路径) [Y]"
			YDWESaveTimerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储计时器-> ",~计时器
			YDWESaveTimerByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器数据。
		YDWESaveTriggerByString="存储 触发器 (字符串路径) [Y]"
			YDWESaveTriggerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储触发器-> ",~触发器
			YDWESaveTriggerByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器数据。
		YDWESaveLocationByString="存储 点 (字符串路径) [Y]"
			YDWESaveLocationByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储点-> ",~点
			YDWESaveLocationByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储点数据。
		YDWESaveGroupByString="存储 单位组 (字符串路径) [Y]"
			YDWESaveGroupByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储单位组-> ",~单位组
			YDWESaveGroupByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位组数据。
		YDWESaveMultiboardByString="存储 多面板 (字符串路径) [Y]"
			YDWESaveMultiboardByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储多面板-> ",~多面板
			YDWESaveMultiboardByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板数据。
		YDWESaveMultiboardItemByString="存储 多面板项目 (字符串路径) [Y]"
			YDWESaveMultiboardItemByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储多面板项目-> ",~多面板项目
			YDWESaveMultiboardItemByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板项目数据。
		YDWESaveTextTagByString="存储 漂浮文字 (字符串路径) [Y]"
			YDWESaveTextTagByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储漂浮文字-> ",~漂浮文字
			YDWESaveTextTagByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储漂浮文字数据。
		YDWESaveLightningByString="存储 闪电 (字符串路径) [Y]"
			YDWESaveLightningByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储闪电-> ",~闪电
			YDWESaveLightningByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储闪电数据。
		YDWESaveRegionByString="存储 区域 (字符串路径) [Y]"
			YDWESaveRegionByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储区域-> ",~区域
			YDWESaveRegionByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储区域数据。
		YDWESaveRectByString="存储 地区 (字符串路径) [Y]"
			YDWESaveRectByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储地区-> ",~地区
			YDWESaveRectByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储地区数据。
		YDWESaveLeaderboardByString="存储 排行榜 (字符串路径) [Y]"
			YDWESaveLeaderboardByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储排行榜-> ",~排行榜
			YDWESaveLeaderboardByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储排行榜数据。
		YDWESaveEffectByString="存储 特效 (字符串路径) [Y]"
			YDWESaveEffectByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储特效-> ",~特效
			YDWESaveEffectByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储特效数据。
		YDWESaveDestructableByString="存储 可破坏物 (字符串路径) [Y]"
			YDWESaveDestructableByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储可破坏物-> ",~可破坏物
			YDWESaveDestructableByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可破坏物数据。
		YDWESaveTriggerConditionByString="存储 触发器条件 (字符串路径) [Y]"
			YDWESaveTriggerConditionByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储触发器条件-> ",~触发器条件
			YDWESaveTriggerConditionByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器条件数据。
		YDWESaveTriggerActionByString="存储 触发器动作 (字符串路径) [Y]"
			YDWESaveTriggerActionByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储触发器动作-> ",~触发器动作
			YDWESaveTriggerActionByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器动作数据。
		YDWESaveTriggerEventByString="存储 事件 (字符串路径) [Y]"
			YDWESaveTriggerEventByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储事件-> ",~事件
			YDWESaveTriggerEventByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储事件数据。
		YDWESaveForceByString="存储 势力 (字符串路径) [Y]"
			YDWESaveForceByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储势力-> ",~势力
			YDWESaveForceByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储势力数据。
		YDWESaveBoolexprByString="存储 布尔表达式 (字符串路径) [Y]"
			YDWESaveBoolexprByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储布尔表达式-> ",~布尔表达式
			YDWESaveBoolexprByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储布尔表达式数据。
		YDWESaveSoundByString="存储 声音 (字符串路径) [Y]"
			YDWESaveSoundByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储声音-> ",~声音
			YDWESaveSoundByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储声音数据。
		YDWESaveTimerDialogByString="存储 计时器窗口 (字符串路径) [Y]"
			YDWESaveTimerDialogByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储计时器窗口-> ",~计时器窗口
			YDWESaveTimerDialogByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器窗口数据。
		YDWESaveTrackableByString="存储 可追踪物 (字符串路径) [Y]"
			YDWESaveTrackableByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储可追踪物-> ",~可追踪物
			YDWESaveTrackableByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可追踪物数据。
		YDWESaveDialogByString="存储 对话框 (字符串路径) [Y]"
			YDWESaveDialogByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储对话框-> ",~对话框
			YDWESaveDialogByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框数据。
		YDWESaveButtonByString="存储 对话框按钮 (字符串路径) [Y]"
			YDWESaveButtonByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储对话框按钮-> ",~对话框按钮
			YDWESaveButtonByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框按钮数据。
		YDWESaveQuestByString="存储 任务 (字符串路径) [Y]"
			YDWESaveQuestByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储任务-> ",~任务
			YDWESaveQuestByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务数据。"
		YDWESaveQuestItemByString="存储 任务目标项 (字符串路径) [Y]"
			YDWESaveQuestItemByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储任务目标项 -> ",~任务目标项
			YDWESaveQuestItemByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务目标项数据。"
	// YD Special Effect
	// Script System actions
		YDWEInitCinematicSystem="开启电影系统 [Y]"
			YDWEInitCinematicSystem="开启Script System电影系统"
			YDWEInitCinematicSystemHint="电影系统必需开启后才能使用，YDWE会自动加载对应的函数库。<Anitarf制作>"
		YDWECinematicCameraDisable="关闭电影系统 [Y]"
			YDWECinematicCameraDisable="关闭Script System电影系统"
			YDWECinematicCameraDisableHint="电影系统关闭之后，无法再使用相关触发器动作。<Anitarf制作>"
		YDWECinSInitTempPoint="设置演员出生点 [Y]"
			YDWECinSInitTempPoint="设置演员单位出生在 ",~点"，系统会在该点创建单位"
			YDWECinSInitTempPointHint="系统默认演员单位出生在(0,0)点，通过这条动作可以修改出生点位置。如果要删除这个点，请在单位生成完毕后再删除。<Anitarf制作>"
		YDWEScriptSystemPeriod="设置电影系统刷新周期 [Y]"
			YDWEScriptSystemPeriod="设置电影系统刷新周期为 ",~刷新周期" 秒"
			YDWEScriptSystemPeriodHint="电影系统默认刷新周期是0.02秒，通过这里设定可以改变刷新周期。<Anitarf制作>"
		YDWEParticlePeriod="设置粒子系统刷新周期 [Y]"
			YDWEParticlePeriod="设置粒子系统刷新周期为 ",~刷新周期" 秒"
			YDWEParticlePeriodHint="粒子系统包含单位移动和转向等与单位有关函数，默认刷新周期是0.02秒。<Anitarf制作>"
		YDWECameraPeriod="设置镜头系统刷新周期 [Y]"
			YDWECameraPeriod="设置镜头系统刷新周期为 ",~刷新周期" 秒"
			YDWECameraPeriodHint="镜头系统包含镜头移动和锁定等函数，默认刷新周期是0.02秒。<Anitarf制作>"
		YDWEFadeFilterUnit="设置滤镜单位 [Y]"
			YDWEFadeFilterUnit="设置滤镜辅助单位类型为 ",~单位类型
			YDWEFadeFilterUnitHint="电影系统带有一个滤镜模型，通过它可以获得更好的视觉效果。<Anitarf制作>"
		YDWEWriteToScene="记录当前场景 [Y]"
			YDWEWriteToScene="记录当前场景为 ",~整数
			YDWEWriteToSceneHint="告诉系统本幕场景的序号。<Anitarf制作>"
		YDWEPlayScene="播放场景 [Y]"
			YDWEPlayScene="播放场景 ",~整数
			YDWEPlaySceneHint="播放指定的场景。<Anitarf制作>"
		YDWEScriptNextScene="设置下一幕场景播放时间 [Y]"
			YDWEScriptNextScene="在时间线 ",~实数," 秒时播放下一幕场景"
			YDWEScriptNextSceneHint="电影系统将一部电影分为若干场景，每处场景可以在指定时间播放。<Anitarf制作>"
		YDWEScriptExternalFunc="运行外部函数 [Y]"
			YDWEScriptExternalFunc="在时间线 ",~实数," 秒时运行函数 ",~字符串
			YDWEScriptExternalFuncHint="可以运行电影系统之外的函数，填入函数的名字即可。<Anitarf制作>"
		YDWEScriptSubtitleLine="显示字幕线 [Y]"
			YDWEScriptSubtitleLine="在时间线 ",~实数," 秒时显示字幕线 ",~字符串
			YDWEScriptSubtitleLineHint="可以屏幕上显示一行文字。<Anitarf制作>"
		YDWEScriptSubtitleClear="清除字幕线 [Y]"
			YDWEScriptSubtitleClear="在时间线 ",~实数," 秒时清除字幕线"
			YDWEScriptSubtitleClearHint="清除屏幕上显示的文字。<Anitarf制作>"
		YDWEActorCreate="创建演员 [Y]"
			YDWEActorCreate="为玩家 ",~玩家," 创建一个演员单位，编号为 ",~整数,"，单位类型为 ",~整数
			YDWEActorCreateHint="电影里出场的演员，必须通过这条动作来生成；每个演员需要设置一个终身编号，如9527，系统会通过这个编号来让演员进行表演。<Anitarf制作>"
		YDWEScriptActAbilityLvl="为演员添加技能 [Y]"
			YDWEScriptActAbilityLvl="在时间线 ",~实数," 秒时为演员 ",~整数," 添加技能 ",~技能,"，等级为 ",~整数
			YDWEScriptActAbilityLvlHint="在演员后面的参数填写演员的编号，如9527，就可以为演员添加一个技能；可以设置技能的等级。<Anitarf制作>"
		YDWEScriptActAnimPlay="播放动画 [Y]"
			YDWEScriptActAnimPlay="在时间线 ",~实数," 秒时播放演员 ",~整数," 的动画 ",~整数,"，动画混合时间为 ",~实数," 秒"
			YDWEScriptActAnimPlayHint="在动画后面的参数填写该动画的索引，0为默认动画；动画混合时间是上一个动画到下一个动画的过渡时间，为0则立即切换。<Anitarf制作>"
		YDWEScriptActAnimSpeed="调整动画速度 [Y]"
			YDWEScriptActAnimSpeed="在时间线 ",~实数," 秒时调整演员 ",~整数," 的动画速度为 ",~实数," x100%"
			YDWEScriptActAnimSpeedHint="在动画后面的参数填写该动画的索引，0为默认动画；动画混合时间是上一个动画到下一个动画的过渡时间，为0则立即切换。<Anitarf制作>"
		YDWEScriptActAnimReset="重置动画 [Y]"
			YDWEScriptActAnimReset="在时间线 ",~实数," 秒时重置演员 ",~整数," 的动画"
			YDWEScriptActAnimResetHint="重置单位的动画，即播放单位的默认动画；这个动画通常是站立，索引为0。<Anitarf制作>"
		YDWEActorWalkProperties="设置单位行走动画 [Y]"
			YDWEActorWalkProperties="设置单位类型 ",~单位类型," 的行走动画索引为 ",~整数,"，行走动画播放时间为 ",~实数,"，单位移动速度为 ",~实数
			YDWEActorWalkPropertiesHint="设置单位的行走动画参数，在本系统里单位的行走是通过不断移动单位并播放行走动画来模拟实现。<Anitarf制作>"
		YDWEScriptActWalk="单位行走 [Y]"
			YDWEScriptActWalk="在时间线 ",~实数," 秒时让演员 ",~整数," 走到目的地(坐标X ",~实数,"，坐标Y ",~实数,")，时间为 ",~实数,"，动画混合时间为 ",~实数," 秒"
			YDWEScriptActWalkHint="让单位在指定时间内跑到指定坐标；在使用这条动作之前，必须先设置好单位行走参数。<Anitarf制作>"
		YDWEScriptActSlide="单位滑行 [Y]"
			YDWEScriptActSlide="在时间线 ",~实数," 秒时让演员 ",~整数," 滑行到目的地(坐标X ",~实数,"，坐标Y ",~实数,")，时间为 ",~实数," 秒" ,"，最大高度为 ",~实数
			YDWEScriptActSlideHint="设置单位的行走动画参数，在本系统里单位的行走是通过不断移动单位并播放行走动画来模拟实现。<Anitarf制作>"
		YDWEScriptActTurn="单位转向 [Y]"
			YDWEScriptActTurn="在时间线 ",~实数," 秒时让演员 ",~整数," 朝向角度 ",~实数,"，时间为 ",~实数,"，旋转方向为 ",~整数
			YDWEScriptActTurnHint="让单位在指定时间内旋转到朝向某个角度；当选择最近方向，单位会自动选择用时最短的旋转方式。<Anitarf制作>"
		YDWEScriptActFace="锁定单位朝向 [Y]"
			YDWEScriptActFace="在时间线 ",~实数," 秒时锁定演员 ",~整数," 的朝向演员 ",~整数,"，部位为 ",~部位,"，偏移坐标为( X ",~Xoffset,"，","Y ",~Yoffset,"，","Z ",~offset," )，","动画","混合","时间为 ",~实数," 秒"
			YDWEScriptActFaceHint="让单位的头部或胸部一直朝向目标单位的偏移坐标点处，直到重置朝向为止；坐标偏移以目标单位脚下为原点。<Anitarf制作>"
		YDWEScriptActFaceReset="重置单位朝向 [Y]"
			YDWEScriptActFaceReset="在时间线 ",~实数," 秒时重置演员 ",~整数," 的朝向，动画混合时间为 ",~实数
			YDWEScriptActFaceResetHint="让单位的朝向恢复正常。<Anitarf制作>"
		YDWEScriptActColour="改变单位颜色 [Y]"
			YDWEScriptActColour="在时间线 ",~实数," 秒时改变演员 ",~整数," 的颜色比例为( ","红 ",~红,"%，绿 ",~绿,"%，蓝 ",~蓝,"% )，可见度为 ",~可见度,"%，指定时间为 ",~时间," 秒"
			YDWEScriptActColourHint="在指定时间内逐渐改变单位的颜色比例和可见度到指定值，单位默认颜色比列均是100%，可见度为0时单位完全透明。<Anitarf制作>"
		YDWEScriptActSize="改变单位尺寸 [Y]"
			YDWEScriptActSize="在时间线 ",~实数," 秒时改变演员 ",~整数," 的尺寸为 " ,~实数,"，指定时间为 ",~实数," 秒"
			YDWEScriptActSizeHint="在指定时间内逐渐改变单位的尺寸为目标值，1.0为单位正常尺寸。<Anitarf制作>"
		YDWECameraSetupAssign="设置镜头 [Y]"
			YDWECameraSetupAssign="设置镜头 ",~镜头," 的编号为 ",~整数
			YDWECameraSetupAssignHint="设置镜头的编号，系统会根据镜头这个编号来调用镜头。<Anitarf制作>"
		YDWEScriptCamera="应用镜头 [Y]"
			YDWEScriptCamera="在时间线 ",~实数," 秒时应用镜头 ",~整数,"，指定时间为 ",~实数,"，镜头切换方式为 ",~整数
			YDWEScriptCameraHint="在指定时间内将当前镜头切换到目标镜头；可以选择镜头切换方式，当选择立即切换，指定时间的参数会被忽略。<Anitarf制作>"
		YDWEScriptCameraStat="改变镜头参数 [Y]"
			YDWEScriptCameraStat="在时间线 ",~实数," 秒时设置当前镜头的参数 ",~整数," 在指定时间 ",~实数," 内改变为 ",~实数,"，速度为 ",~实数,"，镜头切换方式为 ",~整数
			YDWEScriptCameraStatHint="在指定时间内将改变当前镜头的某个属性到目标值；当选择立即切换，指定时间、目标值和速度的参数会被忽略。<Anitarf制作>"
		YDWEScriptCameraIgnoreTerrain="设置镜头忽略悬崖 [Y]"
			YDWEScriptCameraIgnoreTerrain="在时间线 ",~实数," 秒时设置镜头移动时 ",~真值," 悬崖高度"
			YDWEScriptCameraIgnoreTerrainHint="如果选择不忽略，那么镜头在移动时，会随着地形起伏而抖动；选择忽略，如果镜头高度低于地表，会看到地表下的天空。<Anitarf制作>"
		YDWEScriptActCameraLock="锁定镜头位置 [Y]"
			YDWEScriptActCameraLock="在时间线 ",~实数," 秒时锁定镜头位置到演员 ",~整数,"，偏移坐标为( X ",~Xoffset,"，","Y ",~Yoffset,"，","Z ",~offset," )，镜头运动是否平滑(",~真值,")，指","定","时","间","为 ",~实数," 秒"
			YDWEScriptActCameraLockHint="在指定时间内将镜头位置锁定在目标单位的偏移坐标点处，如果镜头运动选择不平滑，那么镜头将按线性移动。<Anitarf制作>"
		YDWEScriptActCameraLockReset="重置镜头位置 [Y]"
			YDWEScriptActCameraLockReset="在时间线 ",~实数," 秒时重置镜头位置，镜头运动是否平滑(",~真值,")，指","定","时","间","为 ",~实数," 秒"
			YDWEScriptActCameraLockResetHint="在指定时间内解除镜头位置锁定，如果镜头运动选择不平滑，那么镜头将按线性移动。<Anitarf制作>"
		YDWEScriptActCameraFace="锁定镜头角度 [Y]"
			YDWEScriptActCameraFace="在时间线 ",~实数," 秒时锁定镜头角度到演员 ",~整数,"，偏移坐标为( X ",~Xoffset,"，","Y ",~Yoffset,"，","Z ",~offset," )，镜头运动是否平滑(",~真值,")，指","定","时","间","为 ",~实数," 秒"
			YDWEScriptActCameraFaceHint="在指定时间内将镜头角度锁定在目标单位的偏移坐标点处，如果镜头运动选择不平滑，那么镜头将按线性移动。<Anitarf制作>"
		YDWEScriptActCameraFaceReset="重置镜头角度 [Y]"
			YDWEScriptActCameraFaceReset="在时间线 ",~实数," 秒时重置镜头角度，镜头运动是否平滑(",~真值,")，指","定","时","间","为 ",~实数," 秒"
			YDWEScriptActCameraFaceResetHint="在指定时间内解除镜头角度锁定，如果镜头运动选择不平滑，那么镜头将按线性移动。<Anitarf制作>"
		YDWEScriptFog="设置迷雾 [Y]"
			YDWEScriptFog="在时间线 ",~实数," 秒时设置迷雾，Z轴起始 ",~实数,"，Z轴结束 ",~实数,"，颜色比例为( ","红 ",~红,"%，绿 ",~绿,"%，蓝 ",~蓝,"% )，指定时间为 ",~实数," 秒"
			YDWEScriptFogHint="迷雾在指定时间内变化到指定值。<Anitarf制作>"
		YDWEScriptFade="设置滤镜 [Y]"
			YDWEScriptFade="在时间线 ",~实数," 秒时设置滤镜，颜色比例为( ","红 ",~红,"%，绿 ",~绿,"%，蓝 ",~蓝,"% )，透明度为 ",~实数,"%，指定时间为 ",~实数," 秒"
			YDWEScriptFadeHint="滤镜在指定时间内变化到指定值。<Anitarf制作>"
		YDWEScriptPlaySound="播放声音 [Y]"
			YDWEScriptPlaySound="在时间线 ",~实数," 秒时播放声音，路径为 ",~字符串,"，播放速率为 ",~实数,"，音量为 ",~整数
			YDWEScriptPlaySoundHint="播放声音；在路径处填写声音文件的路径；1.0为正常播放速率，0.5为半速，2.0为两倍速率；音量是声音大小，取值于0-127之间。<Anitarf制作>"
		YDWEScriptPointEffect="创建特效(指定点) [Y]"
			YDWEScriptPointEffect="在时间线 ",~实数," 秒时创建特效在空间坐标( X ",~实数,"，Y ",~实数,"，Z ",~实数," )，路径为 ",~字符串,"，特效存在时间为 ",~实数," 秒"
			YDWEScriptPointEffectHint="创建特效在空间坐标处，可以设置特效存在的时间。<Anitarf制作>"
		YDWEScriptActEffect="创建特效(绑定单位) [Y]"
			YDWEScriptActEffect="在时间线 ",~实数," 秒时创建特效在演员 ",~整数," 身上，特效路径为 ",~字符串,"，附加部位为 ",~字符串,"，特效存在时间为 ",~实数
			YDWEScriptActEffectHint="创建特效在单位身上，可以设置特效附加部位和存在时间。<Anitarf制作>"
	// AI actions
		StartMeleeAI="启用对战AI"
			StartMeleeAI="为 ",~Player," 启用对战AI: ",~Script
			StartMeleeAIHint="AI只能对电脑玩家使用,当运行该动作后,与之配匹的电脑玩家会强制执行该AI脚本."
		StartCampaignAI="启用战役AI"
			StartCampaignAI="为 ",~Player," 启用战役AI: ",~Script
			StartCampaignAIHint="AI只能对电脑玩家使用,当运行该动作后,与之配匹的电脑玩家会强制执行该AI脚本."
		CommandAI="发送AI命令"
			CommandAI="对 ",~Player," 发送AI命令:(",~命令,", ",~数据,")"
			CommandAIHint="发送的AI命令将被AI脚本所使用."
		PauseCompAI="暂停/恢复 AI脚本运行"
			PauseCompAI="设定 ",~Player," ",~暂停/恢复," 当前AI脚本的运行"
			PauseCompAIHint="事实上该函数是有问题的,可以这么理解:设玩家当前AI脚本的运行状态R为0,暂停1次则R+1,恢复1次则R-1,仅当R=0时该玩家才会运行AI. 在使用前请先理解这段话的意思."
		RemoveGuardPosition="忽视指定单位的警戒点"
			RemoveGuardPosition="忽视 ",~单位," 的警戒点"
			RemoveGuardPositionHint="单位将不会自动返回原警戒点. 一个很有用的功能就是刷怪进攻时忽视单位警戒范围的话,怪就不会想家了."
		RemoveAllGuardPositions="忽视所有单位的警戒点"
			RemoveAllGuardPositions="忽视 ",~Player," 的所有单位的警戒点"
			RemoveAllGuardPositionsHint="单位将不会自动返回原警戒点. 一个很有用的功能就是刷怪进攻时忽视单位警戒范围的话,怪就不会想家了."
		RecycleGuardPosition="恢复指定单位的警戒点"
			RecycleGuardPosition="恢复 ",~单位," 的警戒点"
			RecycleGuardPositionHint=这个动作通过 AI 来恢复特定单位的警戒点."
		SetUnitCreepGuard="锁定指定单位的警戒点 [C]"
			SetUnitCreepGuard="设置 ",~单位," 的警戒点: ",~option
			SetUnitCreepGuardHint="锁定并防止 AI 脚本改动单位警戒点."
		LockGuardPosition="锁定指定单位的警戒点"
			LockGuardPosition="锁定 ",~单位," 的警戒点"
			LockGuardPositionHint="锁定并防止 AI 脚本改动单位警戒点."
	// Lua actions
		LuaDamageKey="伤害&暴击系统 - 开关 [W]"
			LuaDamageKey="伤害&暴击系统 - 设置开关：",~伤害开关
			LuaDamageKeyHint="同时决定伤害系统和暴击系统是否开启，该功能可随时使用"
		LuaInDamageUnit="伤害系统 - 添加 (单位) [W]"
			LuaInDamageUnit="伤害系统 - 设置单位 ",~单位," 在 ",~情况," 时获得 ",~运算符," ",~实数," 的 加成/削减。伤害数值操作选择：",~伤害选择,"，要求伤害类型为：",~伤害类型
			LuaInDamageUnitHint=
		LuaInDamage="伤害系统 - 添加 (类型) [W]"
			LuaInDamage="伤害系统 - 设置类型为 [",~物体种类,"] 的物体ID ",~整数," 物体在 ",~情况 ," 时获得 ",~运算符," ",~实数," 的 加成/削减。伤害数值操作选择：",~伤害选择,"，要求伤害类型为：",~伤害类型
			LuaInDamageHint="物体ID请使用YDWE的'函数 - 显示 (单位|技能|物品)类型 为整数'来设置"
		LuaInCritOddUnit="暴击系统 - 添加 (单位) - 概率 [W]"
			LuaInCritOddUnit="暴击系统 - 设置单位 ",~单位," 获得暴击概率 ",~运算符," ",~实数," 的 加成/削减。数值操作选择：",~伤害选择
			LuaInCritOddUnitHint="该动作需与添加数值连用才有效果。"
		LuaInCritValueUnit="暴击系统 - 添加 (单位) - 数值 [W]"
			LuaInCritValueUnit="暴击系统 - 设置单位 ",~单位," 暴击时获得 ",~运算符," ",~实数," 的 加成/削减。数值操作选择：",~伤害选择
			LuaInCritValueUnitHint="该动作需与添加概率连用才有效果。"
		LuaInCritOdd="暴击系统 - 添加 (类型) - 概率 [W]"
			LuaInCritOdd="暴击系统 - 设置类型为 [",~物体种类,"] 的物体ID ",~整数," 物体获得暴击概率 ",~运算符," ",~实数," 的 加成/削减。数值操作选择：",~伤害选择
			LuaInCritOddHint="该动作需与添加数值连用才有效果。物体ID请使用YDWE的'函数 - 显示 (单位|技能|物品)类型 为整数'来设置"
		LuaInCritValue="暴击系统 - 添加 (类型) - 数值 [W]"
			LuaInCritValue="暴击系统 - 设置类型为 [",~物体种类,"] 的物体ID ",~整数," 物体暴击时获得 ",~运算符," ",~实数," 的 加成/削减。数值操作选择：",~伤害选择
			LuaInCritValueHint="该动作需与添加概率连用才有效果。物体ID请使用YDWE的'函数 - 显示 (单位|技能|物品)类型 为整数'来设置"
		LuaToEvent="自定义事件 - 执行 [W]"
			LuaToEvent="自定义事件 - 立刻执行事件为 ",~字符串," 的动作 [W]"
			LuaToEventHint="如果执行一个尚未被定义过的事件，那将会创建这个事件但并不执行"
		LuaRemoveEventAction="自定义事件 -  删除动作 [W]"
			LuaRemoveEventAction="自定义事件 - 将触发器 ",~触发器," 从 ",~字符串," 事件中删除"
			LuaRemoveEventActionHint="这等同于在实际运作中删除了触发器的事件"
	// Trigger actions
		EnableTrigger="开启触发器"
			EnableTrigger="开启 ",~触发器
			EnableTriggerHint=
		DisableTrigger="关闭触发器"
			DisableTrigger="关闭 ",~触发器
			DisableTriggerHint=
		DestroyTrigger="删除触发器"
			DestroyTrigger="删除 ",~触发器
			DestroyTriggerHint="对不再使用的触发器可以使用该动作来删除."
		ConditionalTriggerExecute="运行触发器(检查条件)"
			ConditionalTriggerExecute="运行 ",~触发器," (检查条件)"
			ConditionalTriggerExecuteHint="如果其触发条件成立则运行触发动作."
		TriggerExecute="运行触发器(无视条件)"
			TriggerExecute="运行 ",~触发器," (无视条件)"
			TriggerExecuteHint="无视事件和条件,运行触发动作."
		QueuedTriggerAddBJ="添加到触发队列"
			QueuedTriggerAddBJ="添加 ",~触发," 到触发队列(",~Checking/Ignoring," 条件)"
			QueuedTriggerAddBJHint="个人认为触发队列属于没用的功能."
		QueuedTriggerRemoveBJ="移出触发队列"
			QueuedTriggerRemoveBJ="将 ",~触发," 移出触发队列"
			QueuedTriggerRemoveBJHint="如果触发正在运行,从队列移出该单位将允许后面的触发运行,但不影响本身的动作."
		QueuedTriggerClearBJ="清空触发队列"
			QueuedTriggerClearBJ="清空触发队列中所有触发"
			QueuedTriggerClearBJHint=
		QueuedTriggerClearInactiveBJ="清空未运行触发"
			QueuedTriggerClearInactiveBJ="清空触发队列中所有未运行触发"
			QueuedTriggerClearInactiveBJHint="只有正在运行的触发不会被移出队列."
		AddTriggerEvent="触发添加事件"
			AddTriggerEvent="为 ",~触发," 添加事件: ",~事件
			AddTriggerEventHint="使用该功能可以在游戏中为其他触发添加事件."
		YDWETimerRunTrigger="计时器系统 - 运行触发器"
			YDWETimerRunTrigger="在 ",~时间," 秒后运行 ",~触发器
			YDWETimerRunTriggerHint="启动中心计时器，在指定时间之后运行触发器。"
		YDWETimerRunPeriodicTrigger="计时器系统 - 循环运行触发器"
			YDWETimerRunPeriodicTrigger="每隔 ",~时间," 秒运行 ",~触发器,"，永久运行 ",~真值,"，运行 ",~整数," 次，运行标识 ",~整数,"。"
			YDWETimerRunPeriodicTriggerHint="启动中心计时器，按指定间隔时间运行触发器；当永久运行为真，运行次数会被忽略；运行标识是自定义一个值，用来区别其它运行。"
		YDWETimerRunPeriodicTriggerFunction="计时器系统 - 循环运行触发器函数"
			YDWETimerRunPeriodicTriggerFunction="每隔 ",~时间," 秒直接运行 ",~触发器," 动作函数，永久运行 ",~真值,"，运行 ",~整数," 次，运行标识 ",~整数,"。"
			YDWETimerRunPeriodicTriggerFunctionHint="使用方法同上；直接运行触发器动作函数效率比运行触发器高，但触发器动作中不能有等待。"
		YDWETimerRunPeriodicTriggerOver="计时器系统 - 终止运行触发器"
			YDWETimerRunPeriodicTriggerOver="停止运行 ",~触发器,"，运行标识 ",~整数,"。"
			YDWETimerRunPeriodicTriggerOverHint="使中心计时器不再运行该触发器；若触发器同一时间被多次运行且运行标识相同，中心计时器会停止对该触发器所有运行。"
	// Unit actions
		CreateNUnitsAtLocEx="创建单位(指定伪点|面向角度) [W]"
			CreateNUnitsAtLocEx="创建 ",~Number," 个 ",~单位," 给 ",~Player," 在 ",~指定伪点," ,面向角度为 ",~Direction
			CreateNUnitsAtLocExHint="面向角度采用角度制,0度为正东方向,90度为正北方向. 使用'最后创建的单位组'来获取创建的所有单位. 使用'最后创建的单位'来获取创建的单个单位.采用伪点系统,该函数自动清除伪点.无需排泄."
		CreateNUnitsAtLoc="创建单位(指定点|面向角度)"
			CreateNUnitsAtLoc="创建 ",~Number," 个 ",~单位," 给 ",~玩家," 在 ",~指定点," ,面向角度为 ",~朝向
			CreateNUnitsAtLocHint="面向角度采用角度制,0度为正东方向,90度为正北方向. 使用'最后创建的单位组'来获取创建的所有单位. 使用'最后创建的单位'来获取创建的单个单位."
		CreateNUnitsAtLocFacingLocBJ="创建单位(指定点|面向点)"
			CreateNUnitsAtLocFacingLocBJ="创建 ",~Number," ",~单位," 给 ",~玩家," 在 ",~指定点," ,面向 ",~指定点
			CreateNUnitsAtLocFacingLocBJHint="使用'最后创建的单位组'来获取创建的所有单位. 使用'最后创建的单位'来获取创建的单个单位."
		# CreateUnit="创建单位(指定坐标|面向角度) [C]"
			 CreateUnit="为玩家 ",~玩家," 创建一个 ",~单位," 在(",~X,", ",~Y,"), 面向角度: ",~朝向
			 CreateUnitHint="不能被'最后创建的单位'捕获"
		# CreateUnitAtLoc="创建单位(指定点|面向点) [C]"
			 CreateUnitAtLoc="为玩家 ",~玩家," 创建一个 ",~单位," 在 ",~指定点," ,面向角度: ",~朝向
			 CreateUnitAtLocHint="不能被'最后创建的单位'捕获"
		CreateAssUnit="创建马甲 [W]"
			CreateAssUnit="为 ",~p," 创建一个 ",~u," 马甲在 (",~X,", ",~Y,"), 生命周期: ",~t," ,添加技能: ",~a," ,技能等级: ",~l
			CreateAssUnitHint="使用'事件响应 - 最后创建的单位'来获取"
		CreateCorpseLocBJ="创建尸体"
			CreateCorpseLocBJ="创建一个 ",~单位," 的尸体给 ",~玩家," 在 ",~指定点
			CreateCorpseLocBJHint="不是所有单位都有尸体形态. 使用'最后创建的单位'来获取该尸体."
		CreateCorpseLocBJEx="创建尸体 [W]"
			CreateCorpseLocBJEx="创建一个 ",~单位," 的尸体给 ",~Player," 在 ",~指定点
			CreateCorpseLocBJExHint="不是所有单位都有尸体形态. 使用'最后创建的单位'来获取该尸体.采用伪点系统,该函数自动清除伪点.无需排泄"
		CreatePermanentCorpseLocBJ="创建永久性尸体"
			CreatePermanentCorpseLocBJ="创建一个 ",~Style," ",~单位," 尸体给 ",~玩家," 在 ",~指定点," 面向角度为 ",~Direction," 度"
			CreatePermanentCorpseLocBJHint="肉态尸体经常会自动变为骨态尸体."
		KillUnit="杀死单位"
			KillUnit="杀死 ",~单位
			KillUnitHint=
		RemoveUnit="删除单位"
			RemoveUnit="删除 ",~单位
			RemoveUnitHint="被删除的单位不会留下尸体. 如果是英雄则不能再被复活."
		YDWETimerRemoveUnit="删除单位(延时) [Y]"
			YDWETimerRemoveUnit="延时 ",~时间," 秒删除 ",~单位
			YDWETimerRemoveUnitHint="启动中心计时器，在指定时间之后删除单位。"
		ExplodeUnitBJ="爆炸单位"
			ExplodeUnitBJ="使 ",~单位," 爆炸而死"
			ExplodeUnitBJHint="爆炸死亡不会留下尸体."
		ReplaceUnitBJ="替换单位"
			ReplaceUnitBJ="将 ",~单位," 替换为 ",~单位类型," 使用 ",~Property Usage," 生命和魔法"
			ReplaceUnitBJHint="使用'最后替换的单位'来获取该单位. 如果是不死族金矿被替换,经常还会留下一个普通的金矿. 实际上就是创建加删除单位"
		ShowUnit="设置单位可见性 [C]"
			ShowUnit="设置 ",~单位," 的可见性为 ",~显示/隐藏
			ShowUnitHint="隐藏单位不会被'区域内单位'所选取"
		ShowUnitHide="隐藏"
			ShowUnitHide="隐藏 ",~单位
			ShowUnitHideHint="使用'单位 - 显示'来显示该单位. 隐藏单位不会被'区域内单位'所选取"
		ShowUnitShow="显示"
			ShowUnitShow="显示 ",~单位
			ShowUnitShowHint="使用'单位 - 隐藏'来显示该单位. 隐藏单位不会被'区域内单位'所选取"
		SetUnitOwner="设置单位所属玩家"
			SetUnitOwner="设置 ",~单位," 所属为 ",~Player," 并 ",~Change/Retain Color
			SetUnitOwnerHint=
		SetUnitColor="设置单位队伍颜色"
			SetUnitColor="设置 ",~单位," 的队伍颜色为 ",~Color
			SetUnitColorHint="改变队伍颜色并不会改变单位所属"
		UnitShareVision="设置单位共享视野 [C]"
			UnitShareVision="设置 ",~单位," 的视野对 ",~Player," ",~on/off
			UnitShareVisionHint=
		UnitShareVisionBJ="共享视野"
			UnitShareVisionBJ=~Grant/Deny," 共享 ",~单位," 的视野对 ",~Player
			UnitShareVisionBJHint=
		SetUnitPosition="设置单位位置(坐标)"
			SetUnitPosition="设置 ",~单位," 的位置到 (",~X,", ",~Y,")"
			SetUnitPositionHint=
		SetUnitPositionLoc="设置单位位置(点)"
			SetUnitPositionLoc="设置 ",~单位," 的位置到 ",~指定点
			SetUnitPositionLocHint=
		SetUnitXYEx="设置单位位置(伪点|高效) [W]"
			SetUnitXYEx="设置 ",~单位," 的位置到 ",~指定伪点
			SetUnitXYExHint="采用伪点系统,该函数自动清除伪点.无需排泄. 这个函数实际是SetUnitX/Y两个函数.相比下面效率高"
		SetUnitPositionLocEx="设置单位位置(伪点|低效) [W]"
			SetUnitPositionLocEx="设置 ",~单位," 的位置到 ",~指定伪点," (低效)"
			SetUnitPositionLocExHint="采用伪点系统,该函数自动清除伪点.无需排泄. 这个函数实际是SetUnitPosition函数.相比上面效率低但有时有特殊用途"
		unWESetUnitPositionByVector="设置单位位置(向量) [U]"
			unWESetUnitPositionByVector="设置 ",~单位," 的位置到距离 ",~距离," 方向 ",~方向," 的 ",~方式
			unWESetUnitPositionByVectorHint=
		SetUnitPositionLocFacingBJ="设置单位位置和朝向"
			SetUnitPositionLocFacingBJ="设置 ",~单位," 的位置到 ",~指定点," ,朝向 ",~Direction
			SetUnitPositionLocFacingBJHint="建议使用'移动单位'+'设置面向角度'动作. 面向角度采用角度制,0度为正东方向,90度为正北方向."
		SetUnitPositionLocFacingLocBJ="移动单位面向点(立即)"
			SetUnitPositionLocFacingLocBJ="设置 ",~单位," 的位置到 ",~指定点," ,朝向 ",~指定点
			SetUnitPositionLocFacingLocBJHint="建议使用'移动单位'+'设置面向角度'动作."
		SetUnitX="设置单位位置(X坐标) [C]"
			SetUnitX="设置 ",~单位," 的X坐标为 ",~X
			SetUnitXHint="注意如果坐标超出地图边界是会出错的."
		SetUnitY="设置单位位置(Y坐标) [C]"
			SetUnitY="设置 ",~单位," 的Y坐标为 ",~Y
			SetUnitYHint="注意如果坐标超出地图边界是会出错的."
		SetUnitRallyPoint="设置单位集结点(指定点)"
			SetUnitRallyPoint="设置 ",~单位," 的集结点到 ",~指定点
			SetUnitRallyPointHint="建议用发布'setrally'命令来实现该功能."
		SetUnitRallyUnit="设置单位集结点(指定单位)"
			SetUnitRallyUnit="设置 ",~单位," 的集结点到 ",~单位
			SetUnitRallyUnitHint="建议用发布'setrally'命令来实现该功能."
		SetUnitRallyDestructable="设置单位集结点(指定可破坏物)"
			SetUnitRallyDestructable="设置 ",~单位," 的集结点到 ",~可破坏物
			SetUnitRallyDestructableHint="建议用发布'setrally'命令来实现该功能."
		SetUnitState="设置单位属性 [C]"
			SetUnitState="设置 ",~单位," 的 ",~属性," 为 ",~Value
			SetUnitStateHint=
		SetUnitLifePercentBJ="设置单位生命值(百分比)"
			SetUnitLifePercentBJ="设置 ",~单位," 的生命值为 ",~Percent,"%"
			SetUnitLifePercentBJHint=
		SetUnitManaPercentBJ="设置单位魔法值(百分比)"
			SetUnitManaPercentBJ="设置 ",~单位," 的魔法值为 ",~Percent,"%"
			SetUnitManaPercentBJHint=
		SetUnitLifeBJ="设置单位生命值(值)"
			SetUnitLifeBJ="设置 ",~单位," 的生命值为 ",~Value
			SetUnitLifeBJHint=
		SetUnitManaBJ="设置单位魔法值(值)"
			SetUnitManaBJ="设置 ",~单位," 的魔法值为 ",~Value
			SetUnitManaBJHint=
		SetUnitInvulnerable="设置单位无敌"
			SetUnitInvulnerable="设置 ",~单位," ",~Invulnerable/Vulnerable
			SetUnitInvulnerableHint=
		PauseUnit="设置单位暂停 [C]"
			PauseUnit="设置 ",~单位," ",~Pause/Unpause
			PauseUnitHint=
		PauseUnitBJ="设置单位暂停"
			PauseUnitBJ=~Pause/Unpause," ",~单位
			PauseUnitBJHint=
		PauseAllUnitsBJ="设置单位暂停(所有)"
			PauseAllUnitsBJ="设置 所有单位 "~Pause/Unpause
			PauseAllUnitsBJHint="该动作只作用于当前存在于地图的单位. 对于之后创建或复活的单位并不会受到影响."
		UnitPauseTimedLife="设置单位生命周期暂停 [C]"
			UnitPauseTimedLife="为 ",~单位," ",~Pause/Unpause," 生命周期"
			UnitPauseTimedLifeHint="只有召唤单位有生命周期"
		UnitPauseTimedLifeBJ="设置单位生命周期暂停"
			UnitPauseTimedLifeBJ=~Pause/Unpause," ",~单位," 的生命周期"
			UnitPauseTimedLifeBJHint="只有召唤单位有生命周期"
		UnitApplyTimedLife="设置单位生命周期 [C]"
			UnitApplyTimedLife="为 ",~单位," 设置 ",~Buff Type," 类型的生命周期,持续时间为 ",~Duration," 秒"
			UnitApplyTimedLifeHint=
		UnitApplyTimedLifeBJ="设置单位生命周期"
			UnitApplyTimedLifeBJ="设置 ",~Duration," 秒 ",~Buff Type," 类型的生命周期对 ",~单位
			UnitApplyTimedLifeBJHint=
		SetUnitExplodedBJ="设置单位死亡方式"
			SetUnitExplodedBJ="设置 ",~单位," 的死亡方式为 ",~Explode/Die Normally
			SetUnitExplodedBJHint=
		UnitSuspendDecay="设置单位尸体腐烂暂停 [C]"
			UnitSuspendDecay="设置 ",~单位," 的尸体腐烂状态为 ",~Suspend/Resume
			UnitSuspendDecayHint="只对已完成死亡动作的尸体有效"
		UnitSuspendDecayBJ="设置单位尸体腐烂暂停"
			UnitSuspendDecayBJ=~Suspend/Resume," 尸体腐烂对 ",~单位
			UnitSuspendDecayBJHint="只对已完成死亡动作的尸体有效. （WMUI: 原版YDWE误解,该函数无bug,但仍建议使用上面的函数.）"
		AbilityResetCooldown="重置单位指定技能CD [W]"
			AbilityResetCooldown="重置 ",~u," 的 ",~技能," , 等待施法结束: ",~f
			AbilityResetCooldownHint="等待施法结束则在施法结束自动重置CD.感谢金皮蛋"
		UnitResetCooldown="重置单位技能CD"
			UnitResetCooldown="重置 ",~单位," 的所有技能冷却时间"
			UnitResetCooldownHint="如果要重置单一技能的CD,可以通过删除技能+添加技能+设置技能等级来完成."
		UnitSetConstructionProgress="设置建筑建造进度条"
			UnitSetConstructionProgress="设置 ",~Building," 的建造进度条为 ",~Progress,"%"
			UnitSetConstructionProgressHint="只作用于正在建造的建筑."
		UnitSetUpgradeProgress="设置建筑升级进度条"
			UnitSetUpgradeProgress="设置 ",~Building," 的升级进度条为 ",~Progress,"%"
			UnitSetUpgradeProgressHint="只作用于正在升级的建筑. 是建筑A升级为建筑B的升级,不是科技的研究."
		UnitAddSleepPerm="设置单位睡眠状态"
			UnitAddSleepPerm="使 ",~单位," ",~Sleep/Remain Awake
			UnitAddSleepPermHint="使用该功能前必须用触发为单位添加'一直睡眠'技能."
		UnitSetCanSleepBJ="设置单位夜晚睡眠状态"
			UnitSetCanSleepBJ="设置 ",~单位," ",~Sleep/Remain Awake," 在夜晚"
			UnitSetCanSleepBJHint="只对中立单位有效. 并不影响催眠魔法."
		UnitWakeUpBJ="叫醒"
			UnitWakeUpBJ="叫醒 ",~单位
			UnitWakeUpBJHint="不影响催眠魔法效果."
		UnitGenerateAlarms="设置单位警报状态"
			UnitGenerateAlarms="设置警报对 ",~单位," ",~On/Off
			UnitGenerateAlarmsHint="只对建筑生效"
		RescueUnitBJ="营救单位"
			RescueUnitBJ="营救 ",~单位," ,改变所属为 ",~Player," 并 ",~Change/Retain Color
			RescueUnitBJHint=
		SetUnitRescuable="设置单位营救状态(对玩家) [C]"
			SetUnitRescuable="设置 ",~单位," 对 ",~玩家," ",~Rescuable/Unrescuable
			SetUnitRescuableHint=
		MakeUnitRescuableToForceBJ="设置单位营救状态(对玩家组)"
			MakeUnitRescuableToForceBJ="设置 ",~单位," ",~Rescuable/Unrescuable," 对 ",~玩家组
			MakeUnitRescuableToForceBJHint=
		SetUnitRescueRange="设置单位可被营救范围"
			SetUnitRescueRange="设置 ",~单位," 的营救范围为 ",~Range
			SetUnitRescueRangeHint=
		SetRescueUnitColorChangeBJ="设置单位被营救颜色(单位)"
			SetRescueUnitColorChangeBJ="设置单位在被营救时 ",~Change/Retain Color
			SetRescueUnitColorChangeBJHint="默认情况单位被营救时会改变颜色. 不影响已经被营救的单位."
		SetRescueBuildingColorChangeBJ="设置单位被营救颜色(建筑)"
			SetRescueBuildingColorChangeBJ="设置建筑在被营救时 ",~Change/Retain Color
			SetRescueBuildingColorChangeBJHint="默认建筑被营救时不会改变颜色. 不影响已经被营救的建筑."
		SetUnitUseFood="设置单位人口占用状态 [C]"
			SetUnitUseFood="设置 ",~单位," 人口占用状态: ",~Enable/Disable
			SetUnitUseFoodHint=
		SetUnitUseFoodBJ="设置单位人口占用状态"
			SetUnitUseFoodBJ=~Enable/Disable," ",~单位," 的人口占用"
			SetUnitUseFoodBJHint=
		SetUnitFacing="设置单位面向角度 [C]"
			SetUnitFacing="设置 ",~单位," 的面向角度为 ",~Angle," 度
			SetUnitFacingHint="面向角度采用角度制,0度为正东方向,90度为正北方向."
		SetUnitFacingTimed="命令单位面向角度(指定时间)"
			SetUnitFacingTimed="命令 ",~单位," 朝向 ",~Angle," 度, 用时 ",~Time," 秒"
			SetUnitFacingTimedHint="面向角度采用角度制,0度为正东方向,90度为正北方向."
		SetUnitFacingToFaceUnitTimed="命令单位面向单位位置"
			SetUnitFacingToFaceUnitTimed="命令 ",~单位," 面向 ",~目标单位," 当前位置 , 使用时间 ",~Time," 秒"
			SetUnitFacingToFaceUnitTimedHint="仅面向单位当前所在位置，不会因为目标单位位置改变而改变"
		SetUnitFacingToFaceLocTimed="命令单位面向点"
			SetUnitFacingToFaceLocTimed="设置 ",~单位," 面向 ",~点," , 使用时间 ",~Time," 秒"
			SetUnitFacingToFaceLocTimedHint=
		SetUnitMoveSpeed="设置单位移动速度"
			SetUnitMoveSpeed="设置 ",~单位," 的移动速度为 ",~Speed
			SetUnitMoveSpeedHint=
		SetUnitMovable="设置单位移动性 [W]"
			SetUnitMovable="设置 ",~u," 移动性: ",~f
			SetUnitMovableHint="false则为不可移动,感谢ck."
		SetUnitPathing="设置单位碰撞性"
			SetUnitPathing="设置 ",~单位," ",~On/Off," 碰撞"
			SetUnitPathingHint="关闭碰撞的单位无视障碍物,但其他单位仍视其为障碍物."
		SetUnitPathingAll="设置单位双向碰撞性 [W]"
			SetUnitPathingAll="设置 ",~u," 忽略双向碰撞: ",~b
			SetUnitPathingAllHint="true为忽略双向碰撞,和一般忽略碰撞不一样,感谢金皮蛋提供."
		SetUnitAcquireRangeBJ="设置单位主动攻击范围"
			SetUnitAcquireRangeBJ="设置 ",~单位," 的主动攻击范围为 ",~数值
			SetUnitAcquireRangeBJHint=
		SetUnitUserData="设置单位自定义值"
			SetUnitUserData="设置 ",~单位," 的自定义值为 ",~Index
			SetUnitUserDataHint="单位自定义值仅用于触发器. 可用来给单位绑定一个整型数据."
		UnitRemoveBuffs="删除魔法效果(指定极性) [C]"
			UnitRemoveBuffs="删除 ",~单位," 的附带Buff,(",~Include/Exclude," 正面Buff, ",~Include/Exclude," 负面Buff)"
		UnitRemoveBuffsEx="删除魔法效果(详细类别) [C]"
			UnitRemoveBuffsEx="删除 ",~单位," 的附带Buff,(",~Include/Exclude," 正面Buff, ",~Include/Exclude," 负面Buff",~Include/Exclude," 魔法Buff, ",~Include/Exclude," 物理Buff",~Include/Exclude," 生命周期, ",~Include/Exclude," 光环效果",~Include/Exclude," 不可驱散Buff)"
		UnitRemoveBuffNT="删除指定魔法效果 [C]"
			UnitRemoveBuffNT="删除 ",~单位," 的 ",~魔法效果
			UnitRemoveBuffNTHint=
		UnitRemoveBuffsBJ="删除魔法效果(指定类别)"
			UnitRemoveBuffsBJ="删除 ",~Buff Type," 魔法效果从 ",~单位
			UnitRemoveBuffsBJHint=
		UnitRemoveBuffsExBJ="删除魔法效果(详细类别)"
			UnitRemoveBuffsExBJ="删除 ",~Buff Type," ",~Buff Resist," Buff从 ",~单位,"(",~Include/Exclude," 生命周期, ",~Include/Exclude," 光环)"
			UnitRemoveBuffsExBJHint="buff性质选项第4项为无效选项, 仅为兼容而保留."
		UnitRemoveBuffBJ="删除指定魔法效果"
			UnitRemoveBuffBJ="删除 ",~魔法效果," 从 ",~单位
			UnitRemoveBuffBJHint=
		UnitAddAbility="添加技能 [C]"
			UnitAddAbility="为 ",~单位," 添加 ",~技能
			UnitAddAbilityHint=
		UnitAddAbilityBJ="添加技能"
			UnitAddAbilityBJ="添加 ",~技能," 给 ",~单位
			UnitAddAbilityBJHint=
		UnitRemoveAbility="删除技能 [C]"
			UnitRemoveAbility="为 ",~单位," 删除 ",~技能
			UnitRemoveAbilityHint=
		UnitRemoveAbilityBJ="删除技能"
			UnitRemoveAbilityBJ="删除 ",~技能," 从 ",~单位
			UnitRemoveAbilityBJHint=
		UnitMakeAbilityPermanent="设置技能永久性 [C]"
			UnitMakeAbilityPermanent="设置 ",~单位," ",~是否," ",~技能," 永久性"
			UnitMakeAbilityPermanentHint="如触发添加给单位的技能就是非永久性的,非永久性技能在变身并回复之后会丢失掉. 这类情况就需要设置技能永久性."
		UnitAddType="添加类别 [C]"
			UnitAddType="为 ",~单位," 添加 ",~Classification," 类别"
			UnitAddTypeHint="已去除所有无效类别."
		UnitAddTypeBJ="添加类别"
			UnitAddTypeBJ="添加 ",~Classification," 类别到 ",~单位
			UnitAddTypeBJHint="并非所有类别都是可以添加的,建议使用新函数."
		UnitRemoveType="删除类别 [C]"
			UnitRemoveType="为 ",~单位," 删除 ",~Classification," 类别"
			UnitRemoveTypeHint="已去除所有无效类别."
		UnitRemoveTypeBJ="删除类别"
			UnitRemoveTypeBJ="删除 ",~Classification," 类别从 ",~单位
			UnitRemoveTypeBJHint="并非所有类别都是可以删除的,建议使用新函数."
		DecUnitAbilityLevel="降低技能等级 [C]"
			DecUnitAbilityLevel="使 ",~单位," 的 ",~技能," 等级降低1级"
			DecUnitAbilityLeveldHint="改变死亡单位的光环技能会导致魔兽崩溃."
		DecUnitAbilityLevelSwapped="降低技能等级"
			DecUnitAbilityLevelSwapped="降低 ",~技能," 等级对 ",~单位
			DecUnitAbilityLevelSwappedHint="改变死亡单位的光环技能会导致魔兽崩溃."
		IncUnitAbilityLevel="提升技能等级 [C]"
			IncUnitAbilityLevel="使 ",~单位," 的 ",~技能," 等级提升1级"
			IncUnitAbilityLevelHint="改变死亡单位的光环技能会导致魔兽崩溃."
		IncUnitAbilityLevelSwapped="提升技能等级"
			IncUnitAbilityLevelSwapped="提升 ",~技能," 等级对 ",~单位
			IncUnitAbilityLevelSwappedHint="改变死亡单位的光环技能会导致魔兽崩溃."
		SetUnitAbilityLevel="设置技能等级 [C]"
			SetUnitAbilityLevel="设置 ",~单位," 的 ",~技能," 等级为 ",~Level
			SetUnitAbilityLevelHint="改变死亡单位的光环技能会导致魔兽崩溃."
		SetUnitAbilityLevelSwapped="设置技能等级"
			SetUnitAbilityLevelSwapped="设置 ",~技能," 等级对 ",~单位," 为 ",~Level
			SetUnitAbilityLevelSwappedHint="改变死亡单位的光环技能会导致魔兽崩溃."
		IssueImmediateOrder="发布命令(无目标)"
			IssueImmediateOrder="对 ",~单位," 发布 ",~Order," 命令"
			IssueImmediateOrderHint=
		IssuePointOrder="发布命令(指定坐标) [C]"
			IssuePointOrder="对 ",~单位," 发布 ",~Order," 命令到坐标:(",~X,",",~Y,")"
			IssuePointOrderHint=
		IssuePointOrderLoc="发布命令(指定点)"
			IssuePointOrderLoc="对 ",~单位," 发布 ",~Order," 命令到目标点: ",~指定点
			IssuePointOrderLocHint=
		IssuePointOrderLocEx="发布命令(指定伪点) [W]"
			IssuePointOrderLocEx="对 ",~单位," 发布 ",~Order," 命令到目标点: ",~指定伪点
			IssuePointOrderLocExHint="采用伪点系统,该函数自动清除伪点.无需排泄"
		IssueTargetOrder="发布命令(指定单位)"
			IssueTargetOrder="对 ",~单位," 发布 ",~Order," 命令到目标: ",~单位
			IssueTargetOrderHint=
		IssueTargetDestructableOrder="发布命令(指定可破坏物)"
			IssueTargetDestructableOrder="对 ",~单位," 发布 ",~Order," 命令到目标: ",~可破坏物
			IssueTargetDestructableOrderHint=
		IssueTargetItemOrder="发布命令(指定物品)"
			IssueTargetItemOrder="对 ",~单位," 发布 ",~Order," 命令到目标: ",~物品
			IssueTargetItemOrderHint=
		IssueImmediateOrderById="按ID发布命令(无目标) [C]"
			IssueImmediateOrderById="对 ",~单位," 发布 ",~Order," 命令"
			IssueImmediateOrderByIdHint=
		IssuePointOrderById="按ID发布命令(指定坐标) [C]"
			IssuePointOrderById="对 ",~单位," 发布 ",~Order," 命令到坐标:(",~X,",",~Y,")"
			IssuePointOrderByIdHint=
		IssuePointOrderByIdLoc="按ID发布命令(指定点) [C]"
			IssuePointOrderByIdLoc="对 ",~单位," 发布 ",~Order," 命令到目标点: ",~指定点
			IssuePointOrderByIdLocHint=
		IssueTargetOrderById="按ID发布命令(指定单位) [C]"
			IssueTargetOrderById="对 ",~单位," 发布 ",~Order," 命令到目标: ",~单位
			IssueTargetOrderByIdHint=
		IssueTargetDestructableOrderById="按ID发布命令(指定可破坏物) [C]"
			IssueTargetDestructableOrderById="对 ",~单位," 发布 ",~Order," 命令到目标: ",~可破坏物
			IssueTargetDestructableOrderByIdHint=
		IssueTargetItemOrderById="按ID发布命令(指定物品) [C]"
			IssueTargetItemOrderById="对 ",~单位," 发布 ",~Order," 命令到目标: ",~物品
			IssueTargetItemOrderByIdHint=
		IssueTrainOrderByIdBJ="发布训练/升级命令"
			IssueTrainOrderByIdBJ="命令 ",~单位," 建造/升级为 ",~单位类型
			IssueTrainOrderByIdBJHint="该升级是指A单位升级为B单位,而不是科技升级."
		IssueUpgradeOrderByIdBJ="发布研究科技命令"
			IssueUpgradeOrderByIdBJ="命令 ",~单位," 研究 ",~Tech-Type
			IssueUpgradeOrderByIdBJHint=
		IssueBuildOrderById="发布建造命令(指定坐标) [C]"
			IssueBuildOrderById="命令 ",~单位," 建造 ",~单位类型," 在坐标:(",~X,",",~Y,")"
			IssueBuildOrderByIdHint=
		IssueBuildOrderByIdLocBJ="发布建造命令(指定点)"
			IssueBuildOrderByIdLocBJ="命令 ",~单位," 建造 ",~单位类型," 在 ",~指定点
			IssueBuildOrderByIdLocBJHint=
		UnitDropItemPoint="发布丢弃物品命令(指定坐标) [C]"
			UnitDropItemPoint="命令 ",~单位," 丢弃物品 ",~物品," 到坐标:(",~X,",",~Y,")"
			UnitDropItemPointHint=
		UnitDropItemPointLoc="发布丢弃物品命令(指定点)"
			UnitDropItemPointLoc="命令 ",~单位," 丢弃物品 ",~物品," 到 ",~指定点
			UnitDropItemPointLocHint=
		UnitDropItemSlot="移动物品到物品栏 [C]"
			UnitDropItemSlot="命令 ",~单位," 移动 ",~物品," 到物品栏# ",~Index
			UnitDropItemSlotHint="只有当单位持有该物品时才有效. 注意: 该函数中物品栏编号从0-5,而不是1-6."
		UnitDropItemSlotBJ="移动物品到物品栏"
			UnitDropItemSlotBJ="命令 ",~单位," 移动 ",~物品," 到物品栏第 ",~Index," 格"
			UnitDropItemSlotBJHint="只有当单位持有该物品时才有效."
		UnitDropItemTargetBJ="发布给予物品命令"
			UnitDropItemTargetBJ="命令 ",~单位," 把 ",~物品," 给 ",~单位
			UnitDropItemTargetBJHint=
		IssueBuyUnitOrder="发布购买单位命令 [C]"
			IssueBuyUnitOrder="使 ",~玩家," 从 ",~单位," 处购买 ",~单位类型
			IssueBuyUnitOrderHint=
		IssueBuyItemOrder="发布购买物品命令 [C]"
			IssueBuyItemOrder="使 ",~玩家," 从 ",~单位," 处购买 ",~物品类型
			IssueBuyItemOrderHint="先让商店对玩家单位发布'中立商店 - 选择'命令,再使用该函数就能实现指定单位的购买物品了."
		IssueNeutralImmediateOrder="发布中介命令(无目标) [C]"
			IssueNeutralImmediateOrder="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令"
			IssueNeutralImmediateOrderHint="可以用来对非本玩家单位发布命令."
		IssueNeutralPointOrder="发布中介命令(指定坐标) [C]"
			IssueNeutralPointOrder="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到坐标:(",~X,",",~Y,")"
			IssueNeutralPointOrderHint="可以用来对非本玩家单位发布命令."
		IssueNeutralTargetOrder="发布中介命令(指定单位) [C]"
			IssueNeutralTargetOrder="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~单位
			IssueNeutralTargetOrderHint="可以用来对非本玩家单位发布命令."
		IssueNeutralTargetDestructableOrder="发布中介命令(指定可破坏物) [C]"
			IssueNeutralTargetDestructableOrder="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~可破坏物
			IssueNeutralTargetDestructableOrderHint="可以用来对非本玩家单位发布命令."
		IssueNeutralTargetItemOrder="发布中介命令(指定物品) [C]"
			IssueNeutralTargetItemOrder="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~物品
			IssueNeutralTargetItemOrderHint="可以用来对非本玩家单位发布命令."
		IssueNeutralImmediateOrderById="按ID发布中介命令(无目标) [C]"
			IssueNeutralImmediateOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令"
			IssueNeutralImmediateOrderByIdHint="可以用来对非本玩家单位发布命令."
		IssueNeutralPointOrderById="按ID发布中介命令(指定坐标) [C]"
			IssueNeutralPointOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到坐标:(",~X,",",~Y,")"
			IssueNeutralPointOrderByIdHint="可以用来对非本玩家单位发布命令."
		IssueNeutralTargetOrderById="按ID发布中介命令(指定单位) [C]"
			IssueNeutralTargetOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~单位
			IssueNeutralTargetOrderByIdHint="可以用来对非本玩家单位发布命令."
		IssueNeutralTargetDestructableOrderById="按ID发布中介命令(指定可破坏物) [C]"
			IssueNeutralTargetDestructableOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~可破坏物
			IssueNeutralTargetDestructableOrderByIdHint="可以用来对非本玩家单位发布命令."
		IssueNeutralTargetItemOrderById="按ID发布中介命令(指定物品) [C]"
			IssueNeutralTargetItemOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~物品
			IssueNeutralTargetItemOrderByIdHint="可以用来对非本玩家单位发布命令."
		YDWEIssueNeutralImmediateOrderById="自定义ID发布中介命令(无目标)"
			YDWEIssueNeutralImmediateOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令"
			YDWEIssueNeutralImmediateOrderByIdHint="可以用来对非本玩家单位发布命令，能直接输入数字命令ID。"
		YDWEIssueNeutralPointOrderById="自定义ID发布中介命令(指定坐标)"
			YDWEIssueNeutralPointOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到坐标:(",~X,",",~Y,")"
			YDWEIssueNeutralPointOrderByIdHint="可以用来对非本玩家单位发布命令，能直接输入数字命令ID。"
		YDWEIssueNeutralTargetOrderById="自定义ID发布中介命令(指定单位)"
			YDWEIssueNeutralTargetOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~单位
			YDWEIssueNeutralTargetOrderByIdHint="可以用来对非本玩家单位发布命令，能直接输入数字命令ID。"
		YDWEIssueNeutralTargetDestructableOrderById="自定义ID发布中介命令(指定可破坏物)"
			YDWEIssueNeutralTargetDestructableOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~可破坏物
			YDWEIssueNeutralTargetDestructableOrderByIdHint="可以用来对非本玩家单位发布命令，能直接输入数字命令ID。"
		YDWEIssueNeutralTargetItemOrderById="自定义ID发布中介命令(指定物品)"
			YDWEIssueNeutralTargetItemOrderById="使 ",~玩家," 对 ",~单位," 发布 ",~Order," 命令到目标: ",~物品
			YDWEIssueNeutralTargetItemOrderByIdHint="可以用来对非本玩家单位发布命令，能直接输入数字命令ID。"
		UnitDamagePoint="命令单位伤害区域 [C]"
			UnitDamagePoint="命令 ",~单位," 在 ",~Seconds," 秒后对半径为 ",~Size," 圆心为(",~X,",",~Y,")的范围造成 ",~Amount," 点伤害(",~是," 攻击伤害, ",~是,"远程攻击) 攻击类型: ",~AttackType," 伤害类型: ",~DamageType," 装甲类型: ",~WeaponType
			UnitDamagePointHint="该动作不会打断单位动作. 由该动作伤害/杀死单位同样正常触发'受到伤害'和'死亡'单位事件."
		UnitDamagePointLoc="命令单位伤害区域"
			UnitDamagePointLoc="命令 ",~单位," 在 ",~Seconds," 秒后对半径为 ",~Size," 圆心为 ",~指定点," 的范围造成",~Amount," 点伤害,攻击类型: ",~AttackType," 伤害类型: ",~DamageType
			UnitDamagePointLocHint="该动作不会打断单位动作. 由该动作伤害/杀死单位同样正常触发'受到伤害'和'死亡'单位事件."
		unWEUnitDamageTarget="命令单位伤害目标 [U]"
			unWEUnitDamageTarget=~单位," 对 ",~目标," 造成 ",~数值," 点伤害 伤害方式: ",~伤害方式," 攻击类型: ",~AttackType," 伤害类型: ",~DamageType," 武器类型: ",~WeaponType
		UnitDamageTarget="命令单位伤害目标 [C]"
			UnitDamageTarget="命令 ",~单位," 对 ",~Target," 造成 ",~Amount," 点伤害(",~是," 攻击伤害, ",~是,"远程攻击) 攻击类型: ",~AttackType," 伤害类型: ",~DamageType," 武器类型: ",~WeaponType
			UnitDamageTargetHint="该动作不会打断单位动作. 由该动作伤害/杀死单位同样正常触发'受到伤害'和'死亡'单位事件."
		UnitDamageTargetBJ="命令单位伤害目标"
			UnitDamageTargetBJ="命令 ",~单位," 对 ",~Target," 造成 ",~Amount," 点伤害,攻击类型: ",~AttackType," 伤害类型: ",~DamageType
			UnitDamageTargetBJHint="该动作不会打断单位动作. 由该动作伤害/杀死单位同样正常触发'受到伤害'和'死亡'单位事件."
		WMAOE="命令单位造成AOE伤害 [W]"
			WMAOE="命令",~u,"对以(",~x,",",~y,")为中心,",~r,"为半径内所有敌方单位造成",~d,"点伤害(",~b,"攻击伤害",~b,"远程攻击) 攻击类型:",~t," 伤害类型:",~t
			WMAOEHint=
	// Custom actions
		YDWECreateUnitPool="创建单位池 [Y]"
			YDWECreateUnitPool="新建一个单位池"
			YDWECreateUnitPoolHint="新建一个单位池，该单位池可以被<最后创建的单位池>获得。"
		UnitPoolAddUnitType="添加单位类型 [C]"
			UnitPoolAddUnitType="在 ",~单位池," 中添加一个 ",~单位," 比重为 ",~数值
			UnitPoolAddUnitTypeHint="比重越高被选择的机率越大"
	// Unitpool actions
		UnitPoolRemoveUnitType="删除单位类型 [C]"
			UnitPoolRemoveUnitType="从 ",~单位池," 中删除 ",~单位
			UnitPoolRemoveUnitTypeHint=
		PlaceRandomUnit="提取单位 [C]"
			PlaceRandomUnit="根据 ",~单位池," 的权重为 ",~玩家," 提取其中任意一个单位到点 (",~X,", ",~Y,")"," 面向角度 ",~度
			PlaceRandomUnitHint=
		YDWEPlaceRandomUnit="提取单位 [Y]"
			YDWEPlaceRandomUnit="根据 ",~单位池," 的权重为 ",~玩家," 提取其中任意一个单位到点 (",~X,", ",~Y,")"," 面向角度 ",~度
			YDWEPlaceRandomUnitHint="使用 '最后从单位池中取出的单位' 获取"
		DestroyUnitPool="删除单位池 [C]"
			DestroyUnitPool="删除 ",~单位池
			DestroyUnitPoolHint=
	// Unit Group actions
		ForGroupMultiple="选取单位组内单位做动作(多个动作)"
			ForGroupMultiple="选取 ",~单位组," 内所有单位做动作"
			ForGroupMultipleHint="使用'选取单位'来取代相应的单位. 对于单位组内每个单位都会运行一次动作(包括死亡的,不包括隐藏的). 等待不能在组动作中运行."
		ForGroup="选取单位组内单位做动作"
			ForGroup="选取 ",~单位组," 内所有单位 ",~做动作
			ForGroupHint="使用'选取单位'来取代相应的单位. 对于单位组内每个单位都会运行一次动作(包括死亡的,不包括隐藏的). 等待不能在组动作中运行."
		GroupEnumUnitsInRange="选取圆范围内单位添加到单位组(坐标)"
			GroupEnumUnitsInRange="为 ",~单位组," 添加以( ",~坐标X," , ",~坐标Y," )为圆心，",~半径," 为半径的圆范围内，满足 ",~条件," 的单位"
			GroupEnumUnitsInRangeHint=
		GroupEnumUnitsInRangeCounted="选取单位添加到单位组(坐标)(不建议使用)"
			GroupEnumUnitsInRangeCounted="为 ",~单位组," 添加以( ",~坐标X," , ",~坐标Y," )为圆心，",~半径," 为半径的圆范围内，满足 ",~条件," 的单位。无效项( ",~N," )"
			GroupEnumUnitsInRangeCountedHint="最后一项是无效项，建议用上一个UI"
		GroupEnumUnitsInRangeOfLoc="选取圆范围内单位添加到单位组(点)"
			GroupEnumUnitsInRangeOfLoc="为 ",~单位组," 添加以 ",~点," 为圆心，",~半径," 为半径的圆范围内，满足 ",~条件," 的单位"
			GroupEnumUnitsInRangeOfLocHint=
		GroupEnumUnitsInRangeOfLocCounted="选取单位添加到单位组(点)(不建议使用)"
			GroupEnumUnitsInRangeOfLocCounted="为 ",~单位组," 添加以 ",~点," 为圆心，",~半径," 为半径的圆范围内，满足 ",~条件," 的单位。无效项( ",~N," )"
			GroupEnumUnitsInRangeOfLocCountedHint="最后一项是无效项，建议用上一个UI"
		GroupAddUnit="添加单位 [C]"
			GroupAddUnit="为 ",~单位组," 添加 ",~单位
			GroupAddUnitHint="并不影响单位本身"
		GroupAddUnitSimple="添加单位"
			GroupAddUnitSimple="添加 ",~单位," 到 ",~单位组
			GroupAddUnitSimpleHint="并不影响单位本身"
		GroupAddGroup="添加单位组"
			GroupAddGroup="添加 ",~单位组," 内所有单位到 ",~单位组
			GroupAddGroupHint="并不影响单位本身"
		GroupRemoveUnit="移除单位 [C]"
			GroupRemoveUnit="为 ",~单位组," 删除 ",~单位
			GroupRemoveUnitHint="并不影响单位本身"
		GroupRemoveUnitSimple="移除单位"
			GroupRemoveUnitSimple="把 ",~单位," 从 ",~单位组," 移除"
			GroupRemoveUnitSimpleHint="并不影响单位本身"
		GroupRemoveGroup="移除单位组"
			GroupRemoveGroup="把 ",~单位组," 中的单位从 ",~单位组," 移除"
			GroupRemoveGroupHint="并不影响单位本身"
		GroupClear="清空单位组"
			GroupClear="清空 ",~单位组," 内所有单位"
			GroupClearHint="并不影响单位本身"
		DestroyGroup="删除单位组 [C]"
			DestroyGroup="删除 ",~单位组
			DestroyGroupHint=
		GroupImmediateOrder="发布命令(无目标)"
			GroupImmediateOrder="对 ",~单位组,"发布 ",~Order
			GroupImmediateOrderHint="最多只能对单位组中12个单位发布命令"
		GroupPointOrder="发布命令(指定坐标) [C]"
			GroupPointOrder="对 ",~单位组,"发布 ",~Order," 命令,目标点:(",~X,",",~Y,")"
			GroupPointOrderHint="最多只能对单位组中12个单位发布命令"
		GroupPointOrderLoc="发布命令(指定点)"
			GroupPointOrderLoc="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~指定点
			GroupPointOrderLocHint="最多只能对单位组中12个单位发布命令"
		unWEGroupRectOrder="发布命令(指定区域) [U]"
			unWEGroupRectOrder="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~指定区域
			unWEGroupRectOrderHint="最多只能对单位组中12个单位发布命令."
		GroupTargetOrder="发布命令(指定单位)"
			GroupTargetOrder="对 ",~单位组," 发布 ",~Order," 命令,目标: ",~指定单位
			GroupTargetOrderHint="最多只能对单位组中12个单位发布命令"
		GroupTargetDestructableOrder="发布命令(指定可破坏物)"
			GroupTargetDestructableOrder="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~可破坏物
			GroupTargetDestructableOrderHint="最多只能对单位组中12个单位发布命令"
		GroupTargetItemOrder="发布命令(指定物品)"
			GroupTargetItemOrder="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~物品
			GroupTargetItemOrderHint="最多只能对单位组中12个单位发布命令"
		GroupImmediateOrderById="按ID发布命令(无目标) [C]"
			GroupImmediateOrderById="对 ",~单位组,"发布 ",~Order
			GroupImmediateOrderByIdHint="最多只能对单位组中12个单位发布命令"
		GroupPointOrderById="按ID发布命令(指定坐标) [C]"
			GroupPointOrderById="对 ",~单位组,"发布 ",~Order," 命令,目标点:(",~X,",",~Y,")"
			GroupPointOrderByIdint="最多只能对单位组中12个单位发布命令"
		GroupPointOrderByIdLoc="按ID发布命令(指定点) [C]"
			GroupPointOrderByIdLoc="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~指定点
			GroupPointOrderByIdLocHint="最多只能对单位组中12个单位发布命令"
		unWEGroupRectOrderById="按ID发布命令(指定区域) [U]"
			unWEGroupRectOrderById="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~指定区域
			unWEGroupRectOrderByIdHint="最多只能对单位组中12个单位发布命令."
		GroupTargetOrderById="按ID发布命令(指定单位) [C]"
			GroupTargetOrderById="对 ",~单位组," 发布 ",~Order," 命令,目标: ",~单位
			GroupTargetOrderByIdHint="最多只能对单位组中12个单位发布命令"
		GroupTargetDestructableOrderById="按ID发布命令(指定可破坏物) [C]"
			GroupTargetDestructableOrderById="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~可破坏物
			GroupTargetDestructableOrderByIdHint="最多只能对单位组中12个单位发布命令"
		GroupTargetItemOrderById="按ID发布命令(指定物品) [C]"
			GroupTargetItemOrderById="对 ",~单位组,"发布 ",~Order," 命令,目标: ",~物品
			GroupTargetItemOrderByIdHint="最多只能对单位组中12个单位发布命令"
		GroupTrainOrderByIdBJ="按ID发布命令(训练/升级) [C]"
			GroupTrainOrderByIdBJ="命令 ",~单位组," 训练/升级为 ",~单位类型
			GroupTrainOrderByIdBJHint="最多只能对单位组中12个单位发布命令"
	// Ubersplat actions
		CreateUbersplatBJ="创建地面纹理变化"
			CreateUbersplatBJ="创建一个地面纹理变化在 ",~指定点," ,使用图像: ",~Type," 颜色值:(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度",~Transparency,"% (",~Enable/Disable," 暂停状态, ",~Enble/Disable," 跳过出生动画)"
			CreateUbersplatBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的. 使用'地面纹理变化 - 设置永久渲染状态' 来显示创建的纹理变化. 暂停状态表示动画播放完毕后是否继续保留该纹理变化."
		DestroyUbersplat="删除地面纹理变化"
			DestroyUbersplat="删除 ",~Ubersplat
			DestroyUbersplatHint=
		ResetUbersplat="重置地面纹理变化"
			ResetUbersplat="重置 ",~Ubersplat
			ResetUbersplatHint=
		FinishUbersplat="结束地面纹理变化"
			FinishUbersplat="结束 ",~Ubersplat
			FinishUbersplatHint="在动画播放完毕时自动清除该地面纹理变化."
		ShowUbersplat="显示/隐藏 地面纹理变化 [C]"
			ShowUbersplat="设置 ",~Ubersplat," 状态为 ",~Show/Hide
			ShowUbersplatHint=
		ShowUbersplatBJ="显示/隐藏 地面纹理变化"
			ShowUbersplatBJ=~Show/Hide," ",~Ubersplat
			ShowUbersplatBJHint=
		SetUbersplatRender="设置渲染状态"
			SetUbersplatRender="设置 ",~Ubersplat," : ",~Enable/Disable," 渲染状态"
			SetUbersplatRenderHint="未发现有任何作用."
		SetUbersplatRenderAlways="设置永久渲染状态"
			SetUbersplatRenderAlways="设置 ",~Ubersplat," : ",~Enable/Disable," 永久渲染状态"
			SetUbersplatRenderAlwaysHint="要显示地面纹理变化则必须开启该项."
	// Location actions
		MoveLocation="移动点 [C]"
			MoveLocation="移动 ",~点," 到(",~X,",",~Y,")"
			MoveLocationHint="该点必须是一个变量. 因为移动一个不可重用的点是无意义的."
		RemoveLocation="清除点 [C]"
			RemoveLocation="清除 ",~点
			RemoveLocationHint="点是堆积最多的垃圾资源,不需要再使用的点都要记得清除掉."
	// Cinematic actions
		TransmissionFromUnitWithNameBJ="播放对话(指定单位)"
			TransmissionFromUnitWithNameBJ="对 ",~玩家组," 播送信息,发言单位: ",~单位," 显示名字: ",~文字," ,播放音效: ",~音效," 显示信息: ",~文字," 持续时间: ",~Method," ",~Time," 秒并 ",~Wait/Don't Wait
			TransmissionFromUnitWithNameBJHint="'没有声音'的持续时间为5秒. 等待表示其他动作需要等待信息播放完毕后才能运行."
		TransmissionFromUnitTypeWithNameBJ="播放对话(指定单位类型)"
			TransmissionFromUnitTypeWithNameBJ="对 ",~玩家组," 播送信息,发言单位: ",~Player," 的 ",~单位类型,"  显示名字:  ",~文字," 发言位置: ",~指定点," 播放音效: ",~音效," 显示信息: ",~文字," 持续时间: ",~Method," ",~Time," 秒并 ",~Wait/Don't Wait
			TransmissionFromUnitTypeWithNameBJHint="'没有声音'的持续时间为5秒. 等待表示其他动作需要等待信息播放完毕后才能运行."
		ForceCinematicSubtitlesBJ="设置字幕显示状态"
			ForceCinematicSubtitlesBJ=~On/Off," 游戏字幕显示功能"
			ForceCinematicSubtitlesBJHint="该功能和'游戏菜单-声音选项'中的字幕选项中有一项为开时即能够显示电影字幕."
		CinematicModeBJ="电影模式"
			CinematicModeBJ=~On/Off," 电影模式对 ",~玩家组
			CinematicModeBJHint=
		CinematicModeExBJ="电影模式(指定时间)"
			CinematicModeExBJ=~On/Off," 电影模式对 ",~玩家组," ,转换时间为 ",~Time," 秒"
			CinematicModeExBJHint=
		CinematicFadeForPlayer="淡入淡出滤镜(指定玩家) [W]"
			CinematicFadeForPlayer="对"~玩家,"使用",~fadetype,"持续 ",~Duration," 秒时间,使用图片: ",~Texture,"混合方式: ",~Blending Method,"地形涂层标志",~te," 颜色值:(",~Red,", ",~Green,", ",~Blue,", ",~Alpha,")"
			CinematicFadeForPlayerHint="颜色格式为(红,绿,蓝,Alpha通道). Alpha通道为0是不可见的."
		CinematicFadeBJ="淡入淡出滤镜"
			CinematicFadeBJ=~Fade Type," 使用 ",~Duration," 秒时间,使用图片: ",~Texture," 颜色值:(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度: ",~Transparency,"%"
			CinematicFadeBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		CinematicFilterGenericBJ="高级滤镜"
			CinematicFilterGenericBJ="持续时间: ",~Duration," 秒,混合方式: ",~Blending Method," 使用图片: ",~Texture," 开始颜色值:(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度: ",~Transparency,"% ,结束颜色值:(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度:",~Transparency,"%"
			CinematicFilterGenericBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		DisplayCineFilterBJ="显示/隐藏 滤镜"
			DisplayCineFilterBJ=~Show/Hide," 滤镜"
			DisplayCineFilterBJHint=
		PingMinimap="小地图信号(所有玩家) [C]"
			PingMinimap="对所有玩家发送小地图信号到坐标(",~X,",",~Y,") 持续时间: ",~Duration," 秒"
			PingMinimapHint=
		PingMinimapLocForForce="小地图信号(指定玩家组)"
			PingMinimapLocForForce="对 ",~玩家组," 发送小地图信号到 ",~指定点," ,持续时间: ",~Duration," 秒"
			PingMinimapLocForForceHint=
		PingMinimapEx="小地图信号(指定颜色|所有玩家) [C]"
			PingMinimapEx="对所有玩家发送小地图信号到坐标(",~X,",",~Y,") 持续时间: ",~Duration," 秒, 信号颜色:(",~Red,",",~Green,",",~Blue,") 信号类型: ",~Style
			PingMinimapExHint="颜色格式为(红,绿,蓝). 颜色值取值范围为0-255."
		PingMinimapLocForForceEx="小地图信号(指定颜色|指定玩家组)"
			PingMinimapLocForForceEx="对 ",~玩家组," 发送小地图信号到 ",~指定点," ,持续时间: ",~Duration," 秒,信号类型: ",~Style," 信号颜色:(",~Red,"%, ",~Green,"%, ",~Blue,"%)"
			PingMinimapLocForForceExHint="颜色格式为(红,绿,蓝). 警告信号总是红色不可变."
		UnitAddIndicator="闪动指示器(单位|十六进制) [C]"
			UnitAddIndicator="对 ",~单位," 闪动指示器,使用颜色:(",~Red,"%, ",~Green,"%, ",~Blue,"%) Alpha通道值: ",~Transparency
			UnitAddIndicatorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和Alpha通道值取值范围为0-255."
		UnitAddIndicatorBJ="闪动指示器(单位|百分比)"
			UnitAddIndicatorBJ="对 ",~单位," 闪动指示器,使用颜色(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度 ",~Transparency,"%"
			UnitAddIndicatorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		DestructableAddIndicator="闪动指示器(可破坏物|十六进制) [C]"
			DestructableAddIndicator="对 ",~可破坏物," 闪动指示器,使用颜色:(",~Red,"%, ",~Green,"%, ",~Blue,"%) Alpha通道值: ",~Transparency
			DestructableAddIndicatorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和Alpha通道值取值范围为0-255."
		DestructableAddIndicatorBJ="闪动指示器(可破坏物|百分比)"
			DestructableAddIndicatorBJ="对 ",~可破坏物," 闪动指示器,使用颜色(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度 ",~Transparency,"%"
			DestructableAddIndicatorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		ItemAddIndicator="闪动指示器(物品|十六进制) [C]"
			ItemAddIndicator="对 ",~物品," 闪动指示器,使用颜色:(",~Red,"%, ",~Green,"%, ",~Blue,"%) Alpha通道值: ",~Transparency
			ItemAddIndicatorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和Alpha通道值取值范围为0-255."
		ItemAddIndicatorBJ="闪动指示器(物品|百分比)"
			ItemAddIndicatorBJ="对 ",~物品," 闪动指示器,使用颜色(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度 ",~Transparency,"%"
			ItemAddIndicatorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		ShowInterface="设置信箱模式(所有玩家) [C]"
			ShowInterface=~开启/关闭," 信箱模式,转换时间为 ",~Duration," 秒"
			ShowInterfaceHint="使用电影镜头模式,隐藏游戏界面."
		ShowInterfaceForceOff="打开信箱模式(指定玩家组)"
			ShowInterfaceForceOff="对 ",~玩家组," 开启信箱模式,转换时间为 ",~Duration," 秒"
			ShowInterfaceForceOffHint="使用电影镜头模式,隐藏游戏界面."
		ShowInterfaceForceOn="关闭信箱模式(指定玩家组)"
			ShowInterfaceForceOn="对 ",~玩家组," 关闭信箱模式,转换时间为 ",~Duration," 秒"
			ShowInterfaceForceOnHint="关闭信箱模式,返回游戏界面."
		EnableUserControl="设置玩家控制权(所有玩家) [C]"
			EnableUserControl=~启用/禁用," 玩家控制权"
			EnableUserControlHint=
		SetUserControlForceOff="禁用玩家控制权(指定玩家组)"
			SetUserControlForceOff="禁用 ",~玩家组," 的控制权"
			SetUserControlForceOffHint=
		SetUserControlForceOn="启用玩家控制权(指定玩家组)"
			SetUserControlForceOn="启用 ",~玩家组," 的控制权"
			SetUserControlForceOnHint=
		EnableOcclusion="设置闭塞(所有玩家) [C]"
			EnableOcclusion="对所有玩家 ",~Enable/Disable," 闭塞"
			EnableOcclusionHint=
		EnableOcclusionBJ="设置闭塞(指定玩家组)"
			EnableOcclusionBJ=~Enable/Disable," ",~玩家组," 的闭塞"
			EnableOcclusionBJHint=
		EnableWorldFogBoundary="设置边界染色(所有玩家) [C]"
			EnableWorldFogBoundary="对所有玩家 "~Enable/Disable," 边界染色"
			EnableWorldFogBoundaryHint="禁用边界染色时边界为普通地形,不显示为黑色,但仍是不可通行的."
		EnableWorldFogBoundaryBJ="设置边界染色(指定玩家组)"
			EnableWorldFogBoundaryBJ=~Enable/Disable," 边界染色对 ",~玩家组
			EnableWorldFogBoundaryBJHint="禁用边界染色时边界为普通地形,不显示为黑色,但仍是不可通行的."
	// Animation actions
		SetUnitAnimation="播放单位动画(名字)"
			SetUnitAnimation="播放 ",~Unit," 的 ",~动画名," 动画"
			SetUnitAnimationHint="通过 '重置单位动画' 恢复到普通的动画"
		SetUnitAnimationByIndex="播放单位动画(序号) [C]"
			SetUnitAnimationByIndex="播放 ",~单位," 的第 ",~序号," 号动画"
			SetUnitAnimationByIndexHint="可以指定播放所有的单位动画,不过需要自己多尝试.每个单位的动画序号不一样的."
		SetUnitAnimationWithRarity="播放单位动画(名字|概率)"
			SetUnitAnimationWithRarity="播放 ",~单位," 的 ",~Animation Name," 动画, 只用 ",~Rarity," 动画"
			SetUnitAnimationWithRarityHint="通过 '重置单位动画' 恢复到普通的动画."
		QueueUnitAnimationBJ="添加单位动画到队列"
			QueueUnitAnimationBJ="添加 ",~单位," 的 ",~Animation Name," 动画到动画队列"
			QueueUnitAnimationBJHint="单位按队列中动画的先后顺序播放动画"
		ResetUnitAnimation="重置单位动画"
			ResetUnitAnimation="重置 ",~单位," 的动画,恢复到普通状态"
			ResetUnitAnimationHint="无论该单位在做什么动画, 都将把单位的动画恢复到普通状态('stand'状态)"
		AddUnitAnimationProperties="设置单位动画附加名 [C]"
			AddUnitAnimationProperties="设置 ",~单位," 附加动画名 ",~Tag," 的状态为 ",~Add/Remove
			AddUnitAnimationPropertiesHint="比如为恶魔猎手添加'alternate'会显示为恶魔形态，为农民添加'gold'则为背负黄金形态"
		AddUnitAnimationPropertiesBJ="设置单位动画附加名"
			AddUnitAnimationPropertiesBJ=~Add/Remove," 动画附加名 ",~Tag," 给 ",~单位
			AddUnitAnimationPropertiesBJHint="比如为恶魔猎手添加'alternate'会显示为恶魔形态，为农民添加'gold'则为背负黄金形态"
		SetUnitLookAt="锁定身体朝向"
			SetUnitLookAt="锁定 ",~单位," 的 ",~Source," 朝向 ",~目标单位," ,偏移坐标 (",~X,", ",~Y,", ",~Z,")"
			SetUnitLookAtHint="单位的该身体部件会一直朝向目标单位的偏移坐标点处,直到使用'重置身体朝向'. 坐标偏移以目标单位脚下为坐标原点."
		ResetUnitLookAt="重置身体朝向"
			ResetUnitLookAt="重置 ",~单位," 的身体朝向"
			ResetUnitLookAtHint="恢复单位的身体朝向为正常状态."
		SetUnitScale="设置单位尺寸(倍数) [C]"
			SetUnitScale="设置 ",~单位," 的尺寸缩放为 (",~X,", ",~Y,", ",~Z,")"
			SetUnitScaleHint="缩放尺寸使用(长, 宽, 高)格式."
		SetUnitScalePercent="设置单位尺寸(百分比)"
			SetUnitScalePercent="设置 ",~Unit," 的缩放尺寸为 (",~X,"%, ",~Y,"%, ",~Z,"%)"
			SetUnitScalePercentHint="缩放尺寸使用(长,宽,高)格式."
		SetUnitVertexColor="设置单位颜色(十六进制) [C]"
			SetUnitVertexColor="设置 ",~单位," 的颜色值 (",~Red,", ",~Green,", ",~Blue,"), 透明值 ",~Transparency
			SetUnitVertexColorHint="颜色格式为(红,绿,蓝). 大多数单位使用(255,255,255)的颜色值和255的Alpha值. 透明值为0是不可见的.颜色值和Alpha值取值范围为0-255."
		SetUnitVertexColorBJ="设置单位颜色(百分比)"
			SetUnitVertexColorBJ="设置 ",~单位," 的颜色比例 (",~Red,"%, ",~Green,"%, ",~Blue,"%), 透明度 ",~Transparency,"%"
			SetUnitVertexColorBJHint="颜色格式为(红,绿,蓝). 大多数单位使用100%的颜色值和0%透明度. 100%透明度是完全透明的"
		SetUnitTimeScale="设置单位动画播放速度(倍数) [C]"
			SetUnitTimeScale="设置 ",~单位," 的动画播放速度为正常速度的 ",~倍数," 倍"
			SetUnitTimeScaleHint="设置1倍动画播放速度来恢复正常状态"
		SetUnitTimeScalePercent="设置单位动画播放速度(百分比)"
			SetUnitTimeScalePercent="设置 ",~单位," 的动画播放速度为正常速度的 ",~百分比,"%"
			SetUnitTimeScalePercentHint="设置100%动画播放速度来恢复正常状态"
		SetUnitTurnSpeedBJ="设置单位转身速度"
			SetUnitTurnSpeedBJ="设置 ",~单位," 的转身速度为 ",~数值
			SetUnitTurnSpeedBJHint="转身速度表示单位改变面向方向时的速度，数值(0-1)越小表示转身越慢，为0时无法转身"
		SetUnitBlendTimeBJ="设置单位动画混合时间"
			SetUnitBlendTimeBJ="设置 ",~单位," 的动画混合时间为 ",~数值
			SetUnitBlendTimeBJHint="单位动画图像混合时间. 决定身体部件连接的快慢,比如攻击时手臂挥舞的速度. 默认值为0.15, 增大该值会导致动作僵硬化"
		SetUnitFlyHeightBJ="设置单位飞行高度"
			SetUnitFlyHeightBJ="设置 ",~单位," 的飞行高度为 ",~数值," ,变换速率 ",~数值
			SetUnitFlyHeightBJHint="飞行单位可以直接改变飞行高度. 其他单位通过添加/删除 替换为飞行单位的变身技能(如乌鸦形态)之后,也能改变飞行高度"
		SetUnitPropWindow="设置单位转向角(弧度) [C]"
			SetUnitPropWindow="设置 ",~单位," 的转向角为 ",~数值," (弧度)"
			SetUnitPropWindowHint="设置单位转身时的转向角. 数值越大转向幅度越大"
		SetUnitPropWindowBJ="设置单位转向角(角度)"
			SetUnitPropWindowBJ="设置 ",~单位," 的转向角为 ",~数值," (角度)"
			SetUnitPropWindowBJHint="设置单位转身时的转向角. 数值越大转向幅度越大. 大于360度的角将作为359度角处理."
		SetDestructableAnimationBJ="播放可破坏物动画"
			SetDestructableAnimationBJ="播放 ",~可破坏物," 的 ",~Animation Name," 动画"
			SetDestructableAnimationBJHint=
		QueueDestructableAnimationBJ="添加可破坏物动画到队列"
			QueueDestructableAnimationBJ="将 ",~可破坏物," 的 ",~Animation Name," 动画加入队列"
			QueueDestructableAnimationBJHint=
		SetDestructableAnimationSpeed="设置可破坏物动画播放速度(倍数) [C]"
			SetDestructableAnimationSpeed="设置 ",~可破坏物," 的动画播放速度为正常的 ",~倍数," 倍"
			SetDestructableAnimationSpeedHint="设置1倍动画播放速度来恢复正常状态"
		SetDestAnimationSpeedPercent="设置可破坏物动画播放速度(百分比)"
			SetDestAnimationSpeedPercent="设置 ",~可破坏物," 的动画播放速度为正常的 ",~百分比,"%"
			SetDestAnimationSpeedPercentHint="设置100%动画播放速度来恢复正常状态"
		SetDoodadAnimationRect="播放矩形区域内地形装饰物动画 [C]"
			SetDoodadAnimationRect="播放 ",~Rect," 内所有 ",~装饰物类型," 的 ",~Animation Name," 动作(",~允许/禁止," 随机播放)"
			SetDoodadAnimationRectHint="特殊动画名: 'show', 'hide', 'soundon', 'soundoff'. 随机播放:比如某装饰物有好几个'stand'动作,则允许该项时会随机抽取某个动作播放,而禁止该项时只播放首个动作."
		SetDoodadAnimationRectBJ="播放矩形区域内地形装饰物动画"
			SetDoodadAnimationRectBJ="播放 ",~Animation Name," 动作对所有 ",~装饰物类型," 在 ",~Rect," 内"
			SetDoodadAnimationRectBJHint="特殊动画名: 'show', 'hide', 'soundon', 'soundoff'"
		SetDoodadAnimation="播放圆范围内地形装饰物动画 [C]"
			SetDoodadAnimation="选取圆心为(",~X,",",~Y,"),半径为 ",~半径," 的圆范围内的 ",~装饰物类型,"(选取方式:",~选取方式,"), 做 ",~Animation Name," 动作(",~允许/禁止," 随机播放)"
			SetDoodadAnimationHint="特殊动画名: 'show', 'hide', 'soundon', 'soundoff'. 随机播放:比如某装饰物有好几个'stand'动作,则允许该项时会随机抽取某个动作播放,而禁止该项时只播放首个动作."
		SetDoodadAnimationBJ="播放圆范围内地形装饰物动画"
			SetDoodadAnimationBJ="播放 ",~Animation Name," 动作对所有 ",~装饰物类型," 在半径为 ",~Radius," 圆心为 ",~指定点," 的圆范围内"
			SetDoodadAnimationBJHint="特殊动画名: 'show', 'hide', 'soundon', 'soundoff'"
	// Dialog actions
		DialogDisplay="设置对话框可见性 [C]"
			DialogDisplay="为 ",~Player," 设置 ",~对话框," 的可见性为 ",~Show/Hide
			DialogDisplayHint="不能在'地图初始化'事件内使用对话框"
		DialogDisplayBJ="设置对话框可见性"
			DialogDisplayBJ=~Show/Hide," ",~Dialog," 对 ",~Player
			DialogDisplayBJHint="不能在'地图初始化'事件内使用对话框"
		DialogSetMessageBJ="设置对话框标题"
			DialogSetMessageBJ="设置 ",~Dialog," 的标题为 ",~Title
			DialogSetMessageBJHint=
		DialogAddButtonBJ="为对话框添加按钮"
			DialogAddButtonBJ="为 ",~对话框," 添加标签为 ",~Text," 的按钮"
			DialogAddButtonBJHint="使用'最后创建的对话框按钮'获取创建的对话按钮"
		DialogAddButtonWithHotkeyBJ="为对话框添加按钮(快捷键) [C]"
			DialogAddButtonWithHotkeyBJ="为 ",~对话框," 添加标签为 ",~文字," , 快捷键为 ",~HotKey," 的按钮"
			DialogAddButtonWithHotkeyBJHint="使用'最后创建的对话框按钮'来获得创建的按钮"
		DialogAddQuitButton="为对话框添加按钮(退出游戏|快捷键) [C]"
			DialogAddQuitButton="为 ",~对话框," 添加退出游戏按钮( ",~跳过," 计分屏), 标签为 ",~文字," , 快捷键为 ",~HotKey
			DialogAddQuitButtonHint="该函数创建的按钮不会被记录到'最后创建的对话框按钮', 当该按钮被点击时会退出游戏"
		DialogClearBJ="清空对话框"
			DialogClearBJ="清空 ",~Dialog
			DialogClearBJHint="清除对话框的标题和按钮"
		DialogDestroy="删除对话框 [C]"
			DialogDestroy="删除 ",~Dialog
			DialogDestroyHint="从内存中删除对话框, 不过对话框通常不需要删除"
	// Multiboard actions
		CreateMultiboardBJ="创建"
			CreateMultiboardBJ="创建一个 (",~Columns," 列 ",~Rows," 行), 标题为 ",~文字," 的多面板"
			CreateMultiboardBJHint="不能在'地图初始化'事件中显示多面板"
		DestroyMultiboardBJ="删除"
			DestroyMultiboardBJ="删除 ",~多面板
			DestroyMultiboardBJHint=
		MultiboardDisplay="设置可见性 [C]"
			MultiboardDisplay="设置 ",~多面板," ",~Show/Hide
			MultiboardDisplayHint="不能在'地图初始化'事件中显示多面板"
		MultiboardDisplayBJ="设置可见性"
			MultiboardDisplayBJ=~Show/Hide," ",~多面板
			MultiboardDisplayBJHint="不能在'地图初始化'事件中显示多面板"
		MultiboardSuppressDisplay="设置多面板模式 [C]"
			MultiboardSuppressDisplay=~打开/关闭," 隐藏多面板模式"
			MultiboardSuppressDisplayHint="隐藏多面板模式将无法显示多面板"
		MultiboardAllowDisplayBJ="设置多面板模式"
			MultiboardAllowDisplayBJ=~显示/隐藏," 多面板模式"
			MultiboardAllowDisplayBJHint="隐藏多面板模式将无法显示多面板"
		MultiboardMinimize="设置窗口显示模式 [C]"
			MultiboardMinimize="设置 ",~多面板," ",~最小化/最大化
			MultiboardMinimizeHint="最小化的多面板只显示标题"
		MultiboardMinimizeBJ="设置窗口显示模式"
			MultiboardMinimizeBJ=~最小化/最大化," ",~多面板
			MultiboardMinimizeBJHint="最小化的多面板只显示标题"
		MultiboardClear="清空"
			MultiboardClear="清空 ",~多面板
			MultiboardClearHint="清空该多面板中的所有行和列"
		MultiboardSetTitleText="设置标题"
			MultiboardSetTitleText="设置 ",~多面板," 的标题为 ",~文字
			MultiboardSetTitleTextHint=
		MultiboardSetTitleTextColor="设置标题颜色(十六进制) [C]"
			MultiboardSetTitleTextColor="设置 ",~多面板," 的标题颜色为(",~Red,", ",~Green,", ",~Blue,"), Alpha为 ",~Transparency
			MultiboardSetTitleTextColorHint="颜色格式为(红,绿,蓝), Alpha值为0是不可见的. 颜色值和Alpha值取值范围为0-255"
		MultiboardSetTitleTextColorBJ="设置标题颜色(百分比)"
			MultiboardSetTitleTextColorBJ="设置 ",~多面板," 的标题颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%), 透明度为 ",~Transparency,"%"
			MultiboardSetTitleTextColorBJHint="颜色格式为(红,绿,蓝), 透明度100%是不可见的"
		MultiboardSetRowCount="设置行数"
			MultiboardSetRowCount="设置 ",~多面板," 的行数为 ",~Rows
			MultiboardSetRowCountHint=
		MultiboardSetColumnCount="设置列数"
			MultiboardSetColumnCount="设置 ",~多面板," 的列数为 ",~Columns
			MultiboardSetColumnCountHint=
		MultiboardSetItemStyle="设置指定项显示风格 [C]"
			MultiboardSetItemStyle="设置 ",~多面板项," 的显示风格: ",~Show/Hide," 文字, ",~Show/Hide," 图标"
			MultiboardSetItemStyleHint=
		MultiboardSetItemValue="设置指定项文本 [C]"
			MultiboardSetItemValue="设置 ",~多面板项," 的文本为 ",~文字
			MultiboardSetItemValueHint=
		MultiboardSetItemValueColor="设置指定项颜色(十六进制) [C]"
			MultiboardSetItemValueColor="设置 ",~多面板项," 的颜色为(",~Red,", ",~Green,", ",~Blue,"), Alpha值为 ",~Transparency
			MultiboardSetItemValueColorHint="颜色格式为(红,绿,蓝), Alpha值为0是不可见的, 颜色值和Alpha值取值范围为0-255."
		MultiboardSetItemWidth="设置指定项宽度 [C]"
			MultiboardSetItemWidth="设置 ",~多面板项," 的宽度为 ",~Width," 倍屏幕宽度"
		MultiboardSetItemIcon="设置指定项图标 [C]"
			MultiboardSetItemIcon="设置 ",~多面板项," 的图标为 ",~Icon File
		MultiboardSetItemsStyle="设置所有项显示风格 [C]"
			MultiboardSetItemsStyle="设置 ",~多面板," 的所有项的显示风格为 ",~Show/Hide," 文字 ",~Show/Hide," 图标"
		MultiboardSetItemsValue="设置所有项文本 [C]"
			MultiboardSetItemsValue="设置 ",~多面板," 的所有项的文本为 ",~文字
		MultiboardSetItemsValueColor="设置所有项颜色(十六进制) [C]"
			MultiboardSetItemsValueColor="设置 ",~多面板," 的所有项的颜色为(",~Red,", ",~Green,", ",~Blue,"), Alpha值为 ",~Transparency
			MultiboardSetItemsValueColorHint="颜色格式为(红,绿,蓝). Alpha值为0是不可见的. 颜色值和Alpha值取值范围为0-255."
		MultiboardSetItemsWidth="设置所有项宽度 [C]"
			MultiboardSetItemsWidth="设置 ",~多面板," 的所有项的宽度为 ",~Width," 倍屏幕宽度"
		MultiboardSetItemsIcon="设置所有项图标 [C]"
			MultiboardSetItemsIcon="设置 ",~多面板," 的所有项的图标为 ",~Icon File
		MultiboardSetItemStyleBJ="设置项显示风格"
			MultiboardSetItemStyleBJ="设置 ",~多面板," 第 ",~Column," 列,第 ",~Row," 行的项的显示风格: ",~Show/Hide," 文字 ",~Show/Hide," 图标"
			MultiboardSetItemStyleBJHint="可以设置行/列数为0来指代所有的行/列. "
		MultiboardSetItemValueBJ="设置项文本"
			MultiboardSetItemValueBJ="设置 ",~多面板," 第 ",~Column," 列,第 ",~Row," 行的项的文本为 ",~文字
			MultiboardSetItemValueBJHint="可以设置行/列数为0来指代所有的行/列."
		MultiboardSetItemColorBJ="设置项颜色"
			MultiboardSetItemColorBJ="设置 ",~多面板," 第 ",~Column," 列,第 ",~Row," 行的项的颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			MultiboardSetItemColorBJHint="可以设置行/列数为0来指代所有的行/列. 颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		MultiboardSetItemWidthBJ="设置项宽度"
			MultiboardSetItemWidthBJ="设置 ",~多面板," 第 ",~Column," 列,第 ",~Row," 行的项的宽度为屏幕的 ",~Width,"%"
			MultiboardSetItemWidthBJHint=
		MultiboardSetItemIconBJ="设置项图标"
			MultiboardSetItemIconBJ="设置 ",~多面板," 第 ",~Column," 列,第 ",~Row," 行的项的图标为 ",~Icon File
			MultiboardSetItemIconBJHint=
		MultiboardReleaseItem="删除多面板项 [C]"
			MultiboardReleaseItem="删除 ",~多面板项
			MultiboardReleaseItemHint="并不会影响对多面板的显示. 多面板项指向多面板但不附属于多面板."
	// Environment actions
		AddWeatherEffectSaveLast="添加天气效果"
			AddWeatherEffectSaveLast="给 ",~Rect," 添加天气效果: ",~Weather Id
			AddWeatherEffectSaveLastHint="用'最后添加的天气效果'来获得所添加的天气效果."
		EnableWeatherEffect="设置天气效果状态"
			EnableWeatherEffect="设置 ",~Weather Effect," 的状态为: ",~On/Off
			EnableWeatherEffectHint="可以使用'环境 - 创建天气效果'动作来创建天气效果."
		RemoveWeatherEffectBJ="删除天气效果"
			RemoveWeatherEffectBJ="删除 ",~天气效果
			RemoveWeatherEffectBJHint=
		TerrainDeformationCraterBJ="创建地形变化:弹坑"
			TerrainDeformationCraterBJ="创建一个持续 ",~Duration," 秒的 ",~Type," 弹坑变形在 ",~指定点," ,半径: ",~Radius,"深度: ",~Depth
			TerrainDeformationCraterBJHint="使用'最后创建的地形变化'来获取该变化. 深度可取负数. 永久地形变化在保存游戏时不会被记录."
		TerrainDeformationRippleBJ="创建地形变化:波纹"
			TerrainDeformationRippleBJ="创建一个持续 ",~Duration," 秒的 ",~Type," 波纹变形在 ",~指定点," ,开始半径: ",~Radius," ,结束半径: ",~Radius," ,深度: ",~Depth," 周期: ",~Time," 秒,波间距: ",~Distance
			TerrainDeformationRippleBJHint="使用'最后创建的地形变化'来获取该变化."
		TerrainDeformationWaveBJ="创建地形变化:冲击波"
			TerrainDeformationWaveBJ="创建一个持续 ",~Duration," 秒的冲击波变形从 ",~Source," 到 ",~Target," ,半径: ",~Radius," ,深度: ",~Depth," ,效果存在时间: ",~Delay," 秒"
			TerrainDeformationWaveBJHint="使用'最后创建的地形变化'来获取该变化. 深度可取负数."
		TerrainDeformationRandomBJ="创建地形变化:随机"
			TerrainDeformationRandomBJ="创建一个持续 ",~Duration," 秒的随机变形变形在 ",~指定点," ,半径: ",~Radius," 最小深度: ",~Minimum," 最大深度: ",~Maximum,", 变形间隔: ",~Update Interval," 秒"
			TerrainDeformationRandomBJHint="使用'最后创建的地形变化'来获取该变化."
		TerrainDeformStop="停止地形变化 [C]"
			TerrainDeformStop="停止 ",~Terrain Deformation," ,衰退时间: ",~Duration," 毫秒"
			TerrainDeformStopHint="地形变化会平滑地过渡到无."
		TerrainDeformationStopBJ="停止地形变化"
			TerrainDeformationStopBJ="停止 ",~Terrain Deformation," ,衰退时间: ",~Duration," 秒"
			TerrainDeformationStopBJHint="地形变化会平滑地过渡到无."
		TerrainDeformStopAll="停止所有地形变化"
			TerrainDeformStopAll="停止所有地形变化"
			TerrainDeformStopAllHint="包括由技能引起的地形变化."
		SetWaterDeforms="设置水面变形状态"
			SetWaterDeforms=~On/Off," 水面变形"
			SetWaterDeformsHint="开启时当发生地形变化时水面高度也会随着变化. 对永久变形无效."
		SetTerrainType="设置地形类型(指定坐标) [C]"
			SetTerrainType="改变(",~X,",",~Y,")处的地形为 ",~Terrain Type," ,使用样式: ",~Variation," 范围: ",~Area," 形状: ",~Shape
			SetTerrainTypeHint="地形样式-1表示随机样式. 范围即地形编辑器中的刷子大小.1表示128x128范围"
		SetTerrainTypeBJ="设置地形类型(指定点)"
			SetTerrainTypeBJ="改变 ",~指定点," 处的地形为 ",~Terrain Type," ,使用样式: ",~Variation," 范围: ",~Area," 形状: ",~Shape
			SetTerrainTypeBJHint="地形样式-1表示随机样式. 范围即地形编辑器中的刷子大小.1表示128x128范围"
		SetTerrainPathable="设置地形通行状态(指定坐标) [C]"
			SetTerrainPathable="设置(",~X,",",~Y,")处单元点的 ",~Pathing," 地形通行状态为: ",~On/Off
			SetTerrainPathableHint="例:设置'建造'通行状态为开,则该点可以建造建筑. 一个单元点范围为32x32."
		SetTerrainPathableBJ="设置地形通行状态(指定点)"
			SetTerrainPathableBJ="设置 ",~指定点," 处单元点的 ",~Pathing," 地形通行状态为: ",~On/Off
			SetTerrainPathableBJHint="例:设置'建造'通行状态为开,则该点可以建造建筑. 一个单元点范围为32x32."
		SetWaterBaseColor="设置水颜色 [C]"
			SetWaterBaseColor="设置水颜色为:(",~Red,",",~Green,",",~Blue,"), 透明值为: ",~Transparency
			SetWaterBaseColorHint="颜色格式为(红,绿,蓝). 透明值0为不可见. 颜色值和透明道值取值范围为0-255."
		SetWaterBaseColorBJ="设置水颜色"
			SetWaterBaseColorBJ="设置水颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			SetWaterBaseColorBJHint="颜色格式为(红,绿,蓝). 100%透明的水是不可见的."
		SetSkyModel="设置天空"
			SetSkyModel="设置天空模型为 ",~Sky
			SetSkyModelHint=
		SetTerrainFogEx="设置迷雾 [C]"
			SetTerrainFogEx="迷雾风格: ",~Style,", Z轴开始端: ",~Z-Start,", Z轴结束端: ",~Z-End,", 密度: ",~Density," 颜色:(",~Red,",",~Green,",",~Blue,")"
			SetTerrainFogExHint="颜色格式为(红,绿,蓝). 取值范围0.00-1.00."
		SetTerrainFogExBJ="设置迷雾"
			SetTerrainFogExBJ="迷雾风格: ",~Style,", Z轴开始端: ",~Z-Start,", Z轴结束端: ",~Z-End,", 密度: ",~Density," 颜色:(",~Red,"%, ",~Green,"%, ",~Blue,"%)"
			SetTerrainFogExBJHint="颜色格式为(红,绿,蓝)."
		ResetTerrainFogBJ="重置迷雾"
			ResetTerrainFogBJ="重置迷雾为默认设置"
			ResetTerrainFogBJHint=
		SetBlightRect="设置荒芜地表(矩形区域) [C]"
			SetBlightRect="为 ",~Player," 在 ",~Region," ",~Create/Remove," 一块荒芜地表"
			SetBlightRectHint=
		SetBlightRectBJ="设置荒芜地表(矩形区域)"
			SetBlightRectBJ=~Create/Remove," 一块荒芜地表给 ",~Player," 在 ",~Region
			SetBlightRectBJHint=
		SetBlight="设置荒芜地表(圆范围|指定坐标) [C]"
			SetBlight="为 ",~Player," 在圆心为(",~X,",",~Y,"),半径为 ",~R," 的圆范围内 ",~Create/Remove," 一块荒芜地表"
			SetBlightHint=
		SetBlightRadiusLocBJ="设置荒芜地表(圆范围|指定点)"
			SetBlightRadiusLocBJ=~Create/Remove," 一块荒芜地表给 ",~Player," 在圆心为 ",~指定点," 半径为 ",~Radius," 的圆范围"
			SetBlightRadiusLocBJHint=
	// Camera actions
		CameraSetupApplyForceDuration="应用镜头(所有玩家)(限时) [C]"
			CameraSetupApplyForceDuration="将 ",~镜头," 应用方式设置为 ",~Apply Method,",持续 ",~Time," 秒"
			CameraSetupApplyForceDurationHint=
		CameraSetupApplyForPlayer="应用镜头(指定玩家)(限时)"
			CameraSetupApplyForPlayer="",~应用方式," ",~镜头," 作用于 ",~Player,",持续 ",~Time," 秒"
			CameraSetupApplyForPlayerHint=
		PanCameraToTimed="平移镜头(所有玩家)(限时) [C]"
			PanCameraToTimed="平移玩家镜头到(",~X,",",~Y,"),持续 ",~Time," 秒"
			PanCameraToTimedHint=
		PanCameraToTimedLocForPlayer="平移镜头(指定玩家)(限时)"
			PanCameraToTimedLocForPlayer="平移 ",~Player," 的镜头到 ",~点,",持续 ",~Time," 秒"
			PanCameraToTimedLocForPlayerHint=
		PanCameraToTimedLocForPlayerEx="平移镜头(指定玩家)(限时) [W]"
			PanCameraToTimedLocForPlayerEx="平移 ",~Player," 的镜头到 ",~点,",持续 ",~Time," 秒"
			PanCameraToTimedLocForPlayerExHint="采用伪点系统,该函数自动清除伪点.无需排泄"
		PanCameraToTimedWithZ="指定高度平移镜头(所有玩家)(限时) [C]"
			PanCameraToTimedWithZ="平移玩家镜头到(",~X,",",~Y,"),镜头距离地面高度为 ",~Z,",持续 ",~Time," 秒"
			PanCameraToTimedWithZHint="在指定移动路径上镜头不会低于地面高度."
		PanCameraToTimedLocWithZForPlayer="指定高度平移镜头(指定玩家)(限时)"
			PanCameraToTimedLocWithZForPlayer="平移 ",~Player," 的镜头到 ",~Point," 距离地面高度为 ",~Z,",持续 ",~Time," 秒"
			PanCameraToTimedLocWithZForPlayerHint="在指定移动路径上镜头不会低于地面高度."
		SmartCameraPanBJ="在必要时平移镜头(指定玩家)(限时)"
			SmartCameraPanBJ="在必要时平移 ",~Player," 的镜头到 ",~指定点," ,持续 ",~Time," 秒"
			SmartCameraPanBJHint="如果距离过远则直接跳转镜头,如果过近则不做动作."
		SetCameraField="设置镜头属性(所有玩家)(限时) [C]"
			SetCameraField="设置玩家的镜头属性 ",~Field," 为 ",~数值,",持续 ",~Time," 秒"
			SetCameraFieldHint=
		SetCameraFieldForPlayer="设置镜头属性(指定玩家)(限时)"
			SetCameraFieldForPlayer="设置 ",~Player," 的镜头属性 ",~Field," 为 ",~Value,",持续 ",~Time," 秒"
			SetCameraFieldForPlayerHint=
		SetCameraRotateMode="指定点旋转镜头(所有玩家)(弧度)(限时) [C]"
			SetCameraRotateMode="以(",~X,",",~Y,")为中心,旋转弧度为",~Rad,", 持续: ",~Time," 秒"
			SetCameraRotateModeHint=
		RotateCameraAroundLocBJ="指定点旋转镜头(指定玩家)(角度)(限时)"
			RotateCameraAroundLocBJ="旋转角度为",~Angle," 度,以 ",~点," 为中心,应用于 ",~Player,",持续 ",~Time," 秒"
			RotateCameraAroundLocBJHint=
		SetCameraTargetControllerEx="玩家镜头锁定单位(加强) [W]"
			SetCameraTargetControllerEx="设置",~p,"锁定",~d,"为",~b,
			SetCameraTargetControllerExHint="原本的可以通过Ctrl+C解开,虽然这个仍会有不足,但不至于那么容易bug."
		SetCameraTargetController="锁定镜头到单位(所有玩家) [C]"
			SetCameraTargetController="锁定玩家镜头到 ",~单位,", 偏移坐标(",~X,", ",~Y,") ,使用 ",~Rotation Source
			SetCameraTargetControllerHint="偏移坐标(X,Y)以单位脚底为原点坐标."
		SetCameraTargetControllerNoZForPlayer="锁定镜头到单位(指定玩家)"
			SetCameraTargetControllerNoZForPlayer="锁定 ",~Player," 的镜头到 ",~单位,", 偏移坐标(",~X,", ",~Y,") ,使用 ",~Rotation Source
			SetCameraTargetControllerNoZForPlayerHint="偏移坐标(X,Y)以单位脚底为原点坐标."
		SetCameraOrientController="锁定镜头到单位(固定镜头源)(所有玩家) [C]"
			SetCameraOrientController="锁定玩家镜头到 ",~单位,", 偏移坐标(",~X,", ",~Y,")"
			SetCameraOrientControllerHint="偏移坐标(X,Y)以单位脚底为原点坐标."
		SetCameraOrientControllerForPlayerBJ="锁定镜头到单位(固定镜头源)(指定玩家)"
			SetCameraOrientControllerForPlayerBJ="锁定 ",~Player," 的镜头到 ",~单位,", 偏移坐标(",~X,", ",~Y,")"
			SetCameraOrientControllerForPlayerBJHint="偏移坐标(X,Y)以单位脚底为原点坐标."
		SetCinematicCamera="播放电影镜头(所有玩家) [C]"
			SetCinematicCamera="对所有玩家播放电影镜头: ",~Camera File
			SetCinematicCameraHint="在'Objects\CinematicCameras'目录下有一些电影镜头,可用Mpq工具来查询."
		SetCinematicCameraForPlayer="播放电影镜头(指定玩家)"
			SetCinematicCameraForPlayer="对 ",~Player," 播放电影镜头: ",~Camera File
			SetCinematicCameraForPlayerHint="在'Objects\CinematicCameras'目录下有一些电影镜头,可用Mpq工具来查询."
		StopCamera="停止播放镜头(所有玩家) [C]"
			StopCamera="让所有玩家停止播放镜头"
			StopCameraHint="比如在平移镜头的过程中可用该动作来中断平移."
		StopCameraForPlayerBJ="停止播放镜头(指定玩家)"
			StopCameraForPlayerBJ="让 ",~Player," 停止播放镜头"
			StopCameraForPlayerBJHint="比如在平移镜头的过程中可用该动作来中断平移."
		ResetToGameCamera="重置游戏镜头(所有玩家) [C]"
			ResetToGameCamera="重置玩家镜头为游戏默认状态,持续  ",~Time," 秒"
			ResetToGameCameraHint=
		ResetToGameCameraForPlayer="重置游戏镜头(指定玩家)"
			ResetToGameCameraForPlayer="重置 ",~Player," 的镜头为游戏默认状态,持续 ",~Time," 秒"
			ResetToGameCameraForPlayerHint=
		CameraSetSmoothingFactorBJ="设置镜头平滑参数"
			CameraSetSmoothingFactorBJ="设置镜头平滑参数为 ",~Factor
			CameraSetSmoothingFactorBJHint="数值越大,镜头转换越平滑."
		CameraResetSmoothingFactorBJ="重置镜头平滑参数"
			CameraResetSmoothingFactorBJ="重置镜头平滑参数为游戏默认值"
			CameraResetSmoothingFactorBJHint="其实就是设置镜头平滑参数为0."
		// CameraSetSourceNoise
		// CameraSetTargetNoise
		CameraSetSourceNoiseEx="摇晃镜头源(所有玩家) [C]"
			CameraSetSourceNoiseEx="摇晃玩家的镜头源, 摇晃幅度: ",~Magnitude," 速率: ",~Velocity," 摇晃方式: ",~方式
			CameraSetSourceNoiseExHint="使用'镜头 - 重置镜头'或设置摇晃幅度和速率为0来停止摇晃."
		CameraSetSourceNoise="摇晃镜头源(所有玩家)(不使用摇晃方式) [C]"
			CameraSetSourceNoise="摇晃玩家的镜头源, 摇晃幅度: ",~Magnitude," 速率: ",~Velocity
			CameraSetSourceNoiseExHint="使用'镜头 - 重置镜头'或设置摇晃幅度和速率为0来停止摇晃."
		CameraSetSourceNoiseForPlayer="摇晃镜头源(指定玩家)"
			CameraSetSourceNoiseForPlayer="摇晃 ",~Player," 的镜头源, 摇晃幅度: ",~Magnitude," 速率: ",~Velocity
			CameraSetSourceNoiseForPlayerHint="使用'镜头 - 重置镜头'或'镜头 - 停止摇晃镜头'来停止摇晃."
		CameraSetTargetNoiseEx="摇晃镜头目标(所有玩家) [C]"
			CameraSetTargetNoiseEx="摇晃玩家的镜头源, 摇晃幅度: ",~Magnitude," 速率: ",~Velocity," 摇晃方式: ",~方式
			CameraSetTargetNoiseExHint="使用'镜头 - 重置镜头'或设置摇晃幅度和速率为0来停止摇晃."
		CameraSetTargetNoise="摇晃镜头目标(所有玩家)(不使用摇晃方式) [C]"
			CameraSetTargetNoise="摇晃玩家的镜头源, 摇晃幅度: ",~Magnitude," 速率: ",~Velocity
			CameraSetTargetNoiseHint="使用'镜头 - 重置镜头'或设置摇晃幅度和速率为0来停止摇晃."
		CameraSetTargetNoiseForPlayer="摇晃镜头目标(指定玩家)"
			CameraSetTargetNoiseForPlayer="摇晃 ",~Player," 的镜头目标, 摇晃幅度: ",~Magnitude," 速率: ",~Velocity
			CameraSetTargetNoiseForPlayerHint="使用'镜头 - 重置镜头'或'镜头 - 停止摇晃镜头'来停止摇晃."
		CameraSetEQNoiseForPlayer="震动镜头(指定玩家)"
			CameraSetEQNoiseForPlayer="震动 ",~Player," 的镜头, 震动幅度: ",~Magnitude
			CameraSetEQNoiseForPlayerHint="使用'镜头 - 重置镜头'或'镜头 - 停止震动镜头'来停止震动."
		CameraClearNoiseForPlayer="停止摇晃/震动镜头(指定玩家)"
			CameraClearNoiseForPlayer="停止 ",~Player," 镜头的摇晃和震动"
			CameraClearNoiseForPlayerHint="可以用本地玩家实现对所有玩家停止摇晃/震动镜头."
		SetCameraBounds="设置可用镜头区域(所有玩家) [C]"
			SetCameraBounds="设置玩家可用镜头区域: 左下角(",~X,",",~Y,"), 左上角(",~X,",",~Y,"), 右上角(",~X,",",~Y,"), 右下角(",~X,",",~Y,")"
			SetCameraBoundsHint="该动作同样会影响小地图的显示. 但小地图的图片是无法改变的. 实际可用区域要大于可用镜头区域."
		AdjustCameraBoundsForPlayerBJ="扩张/收缩 可用镜头区域(指定玩家)"
			AdjustCameraBoundsForPlayerBJ=~Extend/Shrink," ",~Player," 的可用镜头区域, 西: ",~West," ,东 ",~East," ,北: ",~North," ,南: ",~South
			AdjustCameraBoundsForPlayerBJHint="该动作同样会影响小地图的显示. 但小地图的图片是无法改变的. 实际可用区域要大于可用镜头区域."
		SetCameraBoundsToRectForPlayerBJ="设置可用镜头区域(指定玩家)"
			SetCameraBoundsToRectForPlayerBJ="设置 ",~Player," 的可用镜头区域为 ",~地区
			SetCameraBoundsToRectForPlayerBJHint="该动作同样会影响小地图的显示. 但小地图的图片是无法改变的. 实际可用区域要大于可用镜头区域."
		SetCameraQuickPosition="设置空格键转向点(所有玩家) [C]"
			SetCameraQuickPosition="设置玩家的空格键转向点为(",~X,",",~Y,")"
			SetCameraQuickPositionHint="按下空格键时镜头转向的位置."
		SetCameraQuickPositionLocForPlayer="设置空格键转向点(指定玩家)"
			SetCameraQuickPositionLocForPlayer="设置 ",~Player," 的空格键转向点为 ",~指定点
			SetCameraQuickPositionLocForPlayerHint="按下空格键时镜头转向的位置."
	// Visibility actions
		FogEnable="启用/禁用 战争迷雾 [C]"
			FogEnable=~启用/禁用," 战争迷雾"
			FogEnableHint=
		FogEnableOn="启用战争迷雾"
			FogEnableOn="启用战争迷雾"
			FogEnableOnHint=
		FogEnableOff="禁用战争迷雾"
			FogEnableOff="禁用战争迷雾"
			FogEnableOffHint=
		FogMaskEnable="启用/禁用黑色阴影 [C]"
			FogMaskEnable=~启用/禁用," 黑色阴影"
			FogMaskEnableHint=
		FogMaskEnableOn="启用黑色阴影"
			FogMaskEnableOn="启用黑色阴影"
			FogMaskEnableOnHint=
		FogMaskEnableOff="禁用黑色阴影"
			FogMaskEnableOff="禁用黑色阴影"
			FogMaskEnableOffHint=
		CreateFogModifierRectBJ="创建可见度修正器(矩形区域)"
			CreateFogModifierRectBJ="创建一个状态为 ",~Enabled/Disabled," 的可见度修正器给 ",~Player," ,设置 ",~Visibility State," 在 ",~Region
			CreateFogModifierRectBJHint="会创建可见度修正器."
		CreateFogModifierRadiusLocBJ="创建可见度修正器(圆范围)"
			CreateFogModifierRadiusLocBJ="创建一个状态为 ",~Enabled/Disabled," 的可见度修正器给 ",~Player," ,设置 ",~Visibility State," 在圆心为 ",~指定点," 半径为 ",~Radius," 的圆范围"
			CreateFogModifierRadiusLocBJHint="会创建可见度修正器."
		FogModifierStart="启用可见度修正器"
			FogModifierStart="启用 ",~Visibility Modifier
			FogModifierStartHint=
		FogModifierStop="禁用可见度修正器"
			FogModifierStop="禁用 ",~Visibility Modifier
			FogModifierStopHint=
		DestroyFogModifier="删除可见度修正器"
			DestroyFogModifier="删除 ",~Visibility Modifier
			DestroyFogModifierHint=
		SetFogStateRect="设置地图迷雾(矩形区域) [C]"
			SetFogStateRect="为 ",~玩家," 设置 ",~FogStateVisible," 在 ",~矩形区域," (对盟友 ",~共享," 视野)"
			SetFogStateRectHint=
		SetFogStateRadius="设置地图迷雾(圆范围) [C]"
			SetFogStateRadius="为 ",~玩家," 设置 ",~FogStateVisible," 在圆心为(",~X,",",~Y,") 半径为 ",~数值," 的范围, (对盟友 ",~共享," 视野)"
			SetFogStateRadiusHint=
	// Countdown Timer actions
		TimerStart="运行计时器 [C]"
			TimerStart="立即运行 ",~计时器," 时间设置: ",~Time," 秒,是否循环: ",~false/true," ,运行函数: ",~function name
			TimerStartHint="等同于TimerStart"
		PauseTimer="暂停计时器 [C]"
			PauseTimer="暂停 ",~计时器
			PauseTimerHint=
		ResumeTimer="恢复计时器 [C]"
			ResumeTimer="恢复 ",~计时器
			ResumeTimerHint=
		PauseTimerBJ="暂停/恢复 计时器"
			PauseTimerBJ=~Pause/Resume," ",~Timer
			PauseTimerBJHint=
		DestroyTimer="删除计时器 [C]"
			DestroyTimer="删除 ",~计时器
			DestroyTimerHint="一般来说,计时器并不需要删除.只为某些有特别需求的用户提供."
		YDWETimerDestroyTimer="删除计时器(延时|计时器系统) [Y]"
			YDWETimerDestroyTimer="在 ",~时间," 秒后删除 ",~计时器
			YDWETimerDestroyTimerHint="启动中心计时器，在指定时间之后删除计时器。"
		CreateTimerDialogBJ="创建计时器窗口"
			CreateTimerDialogBJ="为 ",~计时器," 创建计时器窗口,标题: ",~文字
			CreateTimerDialogBJHint="计时器窗口不能在地图初始化时显示."
		DestroyTimerDialogBJ="删除计时器窗口"
			DestroyTimerDialogBJ="删除 ",~计时器窗口
			DestroyTimerDialogBJHint=
		TimerDialogDisplay="显示/隐藏 计时器窗口(所有玩家) [C]"
			TimerDialogDisplay="设置 ",~计时器窗口," 的状态为",~Show/Hide
			TimerDialogDisplayHint="计时器窗口不能在地图初始化时显示."
		TimerDialogDisplayBJ="显示/隐藏 计时器窗口(所有玩家)"
			TimerDialogDisplayBJ=~Show/Hide," ",~计时器窗口
			TimerDialogDisplayBJHint="计时器窗口不能在地图初始化时显示."
		TimerDialogDisplayForPlayerBJ="显示/隐藏 计时器窗口(指定玩家)"
			TimerDialogDisplayForPlayerBJ=~Show/Hide," ",~计时器窗口," 应用于 ",~Player
			TimerDialogDisplayForPlayerBJHint="计时器窗口不能在地图初始化时显示."
		TimerDialogSetTitleBJ="改变计时器窗口标题"
			TimerDialogSetTitleBJ="改变 ",~Timer Window," 的标题为 ",~Title
			TimerDialogSetTitleBJHint=
		TimerDialogSetTitleColor="改变计时器窗口文字颜色 [C]"
			TimerDialogSetTitleColor="改变 ",~Timer Window," 文字颜色为(",~Red,",",~Green,",",~Blue,") 透明值为: ",~Transparency
			TimerDialogSetTitleColorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和透明值值取值范围为0-255."
		TimerDialogSetTitleColorBJ="改变计时器窗口标题颜色"
			TimerDialogSetTitleColorBJ="改变 ",~Timer Window," 的标题颜色为 (",~红,"%, ",~绿,"%, ",~蓝,"%) 透明度为 ",~Transparency,"%"
			TimerDialogSetTitleColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		TimerDialogSetTimeColor="改变计时器窗口计时颜色 [C]"
			TimerDialogSetTimeColor="改变 ",~Timer Window," 的计间颜色为(",~Red,",",~Green,",",~Blue,") 透明值为: ",~Transparency
			TimerDialogSetTimeColorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和透明值值取值范围为0-255."
		TimerDialogSetTimeColorBJ="改变计时器窗口计时颜色"
			TimerDialogSetTimeColorBJ="改变 ",~Timer Window," 的计时颜色为 (",~红,"%, ",~绿,"%, ",~蓝,"%) 透明度为 ",~Transparency,"%"
			TimerDialogSetTimeColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		TimerDialogSetSpeed="设置计时器窗口速率 [C]"
			TimerDialogSetSpeed="设置 ",~Timer Window," 的时间流逝速度为 ",~Factor," 倍"
			TimerDialogSetSpeedHint=" 同时计时器显示时间也会随之变化. 就是说60秒的计时器设置为2倍速则显示时间也会变为120秒."
		StartTimerBJ="启动计时器"
			StartTimerBJ="启动 ",~Timer,",应用计时方式: ",~One-Shot/Repeating,",计时周期为 ",~Time," 秒"
			StartTimerBJHint=
	// Destructable actions
		CreateDestructableLoc="创建"
			CreateDestructableLoc="创建 ",~可破坏物类型," 在 ",~指定点," ,面向角度: ",~Direction," 尺寸缩放: ",~Scale," 样式: ",~Variation
			CreateDestructableLocHint="面向角度采用角度制,0度为正东方向,90度为正北方向. 使用'最后创建的可破坏物'来获取创建的物体."
		ReviveDestructables="复活 [W]"
			ReviveDestructables="复活",~区域,"区域内所有 ",~id,",复活间隔:",~t
			ReviveDestructablesHint=
		CreateDeadDestructableLocBJ="创建(死亡)"
			CreateDeadDestructableLocBJ="创建死亡的 ",~可破坏物类型," 在 ",~指定点," ,面向角度: ",~Direction," 尺寸缩放: ",~Scale," 样式: ",~Variation
			CreateDeadDestructableLocBJHint="面向角度采用角度制,0度为正东方向,90度为正北方向. 使用'最后创建的可破坏物'来获取创建的物体."
		KillDestructable="杀死"
			KillDestructable="杀死 ",~可破坏物
			KillDestructableHint=
		RemoveDestructable="删除"
			RemoveDestructable="删除 ",~可破坏物
			RemoveDestructableHint=
		DestructableRestoreLife="复活"
			DestructableRestoreLife="复活 ",~Destructible," ,设置生命值为 ",~Value," 并 ",~Show/Hide," 生长动画"
			DestructableRestoreLifeHint=
		ShowDestructable="设置可见状态 [C]"
			ShowDestructable="设置 ",~可破坏物," 的可见状态为 ",~Show/Hide
			ShowDestructableHint="隐藏的可破坏物不被显示,但仍影响通行和视线."
		ShowDestructableBJ="显示/隐藏"
			ShowDestructableBJ=~Show/Hide," ",~可破坏物
			ShowDestructableBJHint="隐藏的可破坏物不被显示,但仍影响通行和视线."
		SetDestructableLifePercentBJ="设置生命值(百分比)"
			SetDestructableLifePercentBJ="设置 ",~可破坏物," 的生命值为 ",~Percent,"%"
			SetDestructableLifePercentBJHint=
		SetDestructableLife="设置生命值"
			SetDestructableLife="设置 ",~可破坏物," 的生命值为 ",~Value
			SetDestructableLifeHint=
		SetDestructableMaxLifeBJ="设置最大生命值"
			SetDestructableMaxLifeBJ="设置 ",~可破坏物," 的最大生命值为 ",~Value
			SetDestructableMaxLifeBJHint=
		SetDestructableInvulnerableBJ="设置无敌/可攻击"
			SetDestructableInvulnerableBJ="设置 ",~可破坏物," ",~Invulnerable/Vulnerable
			SetDestructableInvulnerableBJHint=
		SetDestructableOccluderHeight="设置闭塞高度"
			SetDestructableOccluderHeight="设置 ",~可破坏物," 的闭塞高度为 ",~Height
			SetDestructableOccluderHeightHint=
		ModifyGateBJ="设置大门状态"
			ModifyGateBJ=~Open/Close/Destroy," ",~大门
			ModifyGateBJHint=
		ChangeElevatorWalls="设置升降机墙壁状态"
			ChangeElevatorWalls=~Open/Close," ",~Walls," 对 ",~升降机
			ChangeElevatorWallsHint=""
		ChangeElevatorHeight="设置升降机高度"
			ChangeElevatorHeight="设置 ",~升降机," 的高度为 ",~Height
			ChangeElevatorHeightHint=
		EnumDestructablesInRectAllMultiple="选取矩形区域内可破坏物做动作(多个动作)"
			EnumDestructablesInRectAllMultiple="选取 ",~矩形区域," 内所有可破坏物做动作"
			EnumDestructablesInRectAllMultipleHint="组动作中可使用'选取的可破坏物'来获取对应的可破坏物. 每个可破坏物都会运行一次动作(包括死亡和隐藏的). 等待不能在组动作中运行."
		EnumDestructablesInCircleBJMultiple="选取指定点范围内可破坏物做动作(多个动作)"
			EnumDestructablesInCircleBJMultiple="选取 ",~Radius," 范围以 ",~指定点," 为中心的区域内所有可破坏物做动作(多个动作)"
			EnumDestructablesInCircleBJMultipleHint="组动作中可使用'选取的可破坏物'来获取对应的可破坏物. 每个可破坏物都会运行一次动作(包括死亡和隐藏的). 等待不能在组动作中运行."
		EnumDestructablesInRectAll="选取矩形区域内可破坏物做动作"
			EnumDestructablesInRectAll="选取 ",~矩形区域," 内所有可破坏物 ",~做动作
			EnumDestructablesInRectAllHint="组动作中可使用'选取的可破坏物'来获取对应的可破坏物. 每个可破坏物都会运行一次动作(包括死亡和隐藏的). 等待不能在组动作中运行."
		EnumDestructablesInCircleBJ="选取指定点范围内可破坏物做动作"
			EnumDestructablesInCircleBJ="选取 ",~Radius," 范围以 ",~指定点,"为中心的区域内所有可破坏物 ",~做动作
			EnumDestructablesInCircleBJHint="组动作中可使用'选取的可破坏物'来获取对应的可破坏物. 每个可破坏物都会运行一次动作(包括死亡和隐藏的). 等待不能在组动作中运行."
	// Leaderboard actions
		CreateLeaderboardBJ="创建"
			CreateLeaderboardBJ="对 ",~玩家组," 创建排行榜,使用标题: ",~文字
			CreateLeaderboardBJHint="排行榜不能在地图初始化时显示. 标题为空则不显示标题栏."
		DestroyLeaderboardBJ="删除"
			DestroyLeaderboardBJ="删除 ",~排行榜
			DestroyLeaderboardBJHint=
		LeaderboardClear="清空 [C]"
			LeaderboardClear="清空 ",~排行榜
			LeaderboardClearHint="清空排行榜中所有内容."
		LeaderboardSortItemsBJ="排序"
			LeaderboardSortItemsBJ="将 ",~排行榜," 按 ",~Field," 使用 ",~Ascending/Descending," 排列"
			LeaderboardSortItemsBJHint=
		LeaderboardDisplay="显示/隐藏 [C]"
			LeaderboardDisplay="设置 ",~排行榜," ",~Show/Hide,
			LeaderboardDisplayHint="排行榜不能在地图初始化时显示."
		LeaderboardDisplayBJ="显示/隐藏"
			LeaderboardDisplayBJ=~Show/Hide," ",~排行榜
			LeaderboardDisplayBJHint="排行榜不能在地图初始化时显示."
		PlayerSetLeaderboard="设置玩家使用的排行榜 [C]"
			PlayerSetLeaderboard="设置 ",~Player," 使用 ",~排行榜
			PlayerSetLeaderboardHint="每个玩家只能显示一个排行榜."
		LeaderboardSetLabelBJ="设置标题"
			LeaderboardSetLabelBJ="设置 ",~Leaderboard," 的标题为 ",~文字
			LeaderboardSetLabelBJHint=
		LeaderboardSetLabelColor="设置文字颜色(十六进制) [C]"
			LeaderboardSetLabelColor="设置 ",~Leaderboard," 的文字颜色为(",~Red,",",~Green,",",~Blue,") Alpha通道值为: ",~Transparency
			LeaderboardSetLabelColorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和Alpha通道值取值范围为0-255."
		LeaderboardSetLabelColorBJ="设置文字颜色(百分比)"
			LeaderboardSetLabelColorBJ="设置 ",~Leaderboard," 的文字颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			LeaderboardSetLabelColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		LeaderboardSetValueColor="设置数值颜色(十六进制) [C]"
			LeaderboardSetValueColor="设置 ",~Leaderboard," 的数值颜色为(",~Red,",",~Green,",",~Blue,") Alpha通道值为: ",~Transparency
			LeaderboardSetValueColorHint="颜色格式为(红,绿,蓝). Alpha通道值0为不可见. 颜色值和Alpha通道值取值范围为0-255."
		LeaderboardSetValueColorBJ="设置数值颜色(百分比)"
			LeaderboardSetValueColorBJ="设置 ",~Leaderboard," 的数值颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			LeaderboardSetValueColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		LeaderboardSetStyleBJ="设置显示样式"
			LeaderboardSetStyleBJ="设置 ",~Leaderboard," 的显示样式: ",~Show/Hide," 标题, ",~Show/Hide," 文字, ",~Show/Hide," 分数, ",~Show/Hide," 图标"
			LeaderboardSetStyleBJHint=
		LeaderboardAddItemBJ="添加玩家"
			LeaderboardAddItemBJ="添加 ",~Player," 到 ",~Leaderboard," ,使用名字: ",~文字," 设置分数: ",~Value
			LeaderboardAddItemBJHint=
		LeaderboardRemovePlayerItemBJ="移除玩家"
			LeaderboardRemovePlayerItemBJ="把 ",~Player," 从 ",~Leaderboard," 移除"
			LeaderboardRemovePlayerItemBJHint=
		LeaderboardSetPlayerItemLabelBJ="改变玩家名字"
			LeaderboardSetPlayerItemLabelBJ="设置 ",~Player," 在 ",~Leaderboard," 中的名字为 ",~文字
			LeaderboardSetPlayerItemLabelBJHint=
		LeaderboardSetPlayerItemLabelColorBJ="设置玩家名字颜色"
			LeaderboardSetPlayerItemLabelColorBJ="设置 ",~Player," 在 ",~Leaderboard," 中的名字颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			LeaderboardSetPlayerItemLabelColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		LeaderboardSetPlayerItemValueBJ="改变玩家分数"
			LeaderboardSetPlayerItemValueBJ="设置 ",~Player," 在 ",~Leaderboard," 中的分数为: ",~Value
			LeaderboardSetPlayerItemValueBJHint=
		LeaderboardSetPlayerItemValueColorBJ="改变玩家分数颜色"
			LeaderboardSetPlayerItemValueColorBJ="设置 ",~Player," 在 ",~Leaderboard," 中的分数颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			LeaderboardSetPlayerItemValueColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		LeaderboardSetPlayerItemStyleBJ="设置玩家显示样式"
			LeaderboardSetPlayerItemStyleBJ="设置 ",~Player," 在 ",~Leaderboard," 中的显示样式: ",~Show/Hide," 名字, ",~Show/Hide," 分数, ",~Show/Hide," 图标"
			LeaderboardSetPlayerItemStyleBJHint=
	// Text Tag actions
		unWECreateTextTagForDamage="创建漂浮文字(伤害数值) [U]"
			unWECreateTextTagForDamage="在 ",~单位," 的位置显示伤害: ",~伤害值," RGB: (",~R,", ",~G,", ",~B,")"
			unWECreateTextTagForDamageHint="创建默认风格的伤害数值"
		CreateTextTagLocBJ="创建漂浮文字(指定点)"
			CreateTextTagLocBJ="创建漂浮文字: ",~文字," 在 ",~指定点,",Z轴高度: ",~Z," ,字体大小: ",~Size," ,颜色值:(",~Red,"%, ",~Green,"%, ",~Blue,"%) ,透明度: ",~Transparency,"%"
			CreateTextTagLocBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		CreateTextTagUnitBJ="创建漂浮文字(指定单位)"
			CreateTextTagUnitBJ="创建漂浮文字: ",~文字," 在 ",~单位,"的头顶, Z轴偏移 ",~Z,",字体大小: ",~Size," ,颜色值:(",~Red,"%, ",~Green,"%, ",~Blue,"%) ,透明度: ",~Transparency,"%"
			CreateTextTagUnitBJHint="该方式创建的漂浮文字并不会跟随单位一起移动.  颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		CreateTextTagForPlayer="为指定玩家创建漂浮(指定坐标) [W]"
			CreateTextTagForPlayer="为"~玩家,"创建漂浮文字在坐标(",~x,","~y,")，文字内容为"~字符串,"，颜色值(",~R,",",~G,","~B,",",~A,")，大小"~实数,"，高度"~实数,"，速率(",~实数,","~实数,")，生命周期",~实数,"，是否永久显示",~布尔值
			CreateTextTagForPlayerHint="颜色值为红,绿,蓝,alpha通道,在0-255之间,最后一项填0则不显示。是否永久显示若填TRUE则无论生命周期如何都会永久显示。"
		DestroyTextTagBJ="删除"
			DestroyTextTagBJ="删除 ",~Floating Text
			DestroyTextTagBJHint="游戏最多允许存在100个漂浮文字,所以请及时删除不再使用的漂浮文字."
		YDWETimerDestroyTextTag="删除(延时|计时器系统) [Y]"
			YDWETimerDestroyTextTag="在 ",~时间," 秒后删除 ",~漂浮文字
			YDWETimerDestroyTextTagHint="启动中心计时器，在指定时间之后删除漂浮文字。"
		SetTextTagVisibility="设置可见性(所有玩家) [C]"
			SetTextTagVisibility="对所有玩家 ",~Show/Hide," ",~Floating Text
			SetTextTagVisibilityHint=
		ShowTextTagForceBJ="设置可见性(玩家组)"
			ShowTextTagForceBJ=~Show/Hide," ",~Floating Text," 对 ",~玩家组
			ShowTextTagForceBJHint=
		SetTextTagVelocity="设置速率 [C]"
			SetTextTagVelocity="设置 ",~Floating Text," 的X轴速率: ",~XSpeed," ,Y轴速率: ",~YSpeed
			SetTextTagVelocityHint="对移动后的漂浮文字设置速率,该漂浮文字会先回到原点再向设定的角度移动. 这里的1约等于游戏中的1800速度."
		SetTextTagVelocityBJ="设置速率"
			SetTextTagVelocityBJ="设置 ",~Floating Text," 的移动速率为 ",~Speed," ,方向为 ",~Angle," 度"
			SetTextTagVelocityBJHint="对移动后的漂浮文字设置速率,该漂浮文字会先回到原点再向设定的角度移动. 方向采用角度制,0度为正东方向,90度为正北方向."
		SetTextTagColor="改变颜色(十六进制) [C]"
			SetTextTagColor="改变 ",~Floating Text," 的颜色为(",~Red,",",~Green,",",~Blue,") 透明值为 ",~Transparency
			SetTextTagColorHint="颜色格式为(红,绿,蓝). 透明值0为不可见. 颜色值和透明值取值范围为0-255."
		SetTextTagColorBJ="改变颜色(百分比)"
			SetTextTagColorBJ="改变 ",~Floating Text," 的颜色为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			SetTextTagColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		SetTextTagPos="改变位置(坐标) [C]"
			SetTextTagPos="改变 ",~Floating Text," 的位置为 (",~X,",",~Y,") ,Z轴高度为 ",~Z
			SetTextTagPosHint=
		SetTextTagPosBJ="改变位置(点)"
			SetTextTagPosBJ="改变 ",~Floating Text," 的位置为 ",~指定点," ,Z轴高度为 ",~Z
			SetTextTagPosBJHint=
		SetTextTagPosUnitBJ="改变位置(单位)"
			SetTextTagPosUnitBJ="改变 ",~Floating Text," 的位置到 ",~单位," 头顶Z轴偏移 ",~Z," 处"
			SetTextTagPosUnitBJHint=
		SetTextTagText="改变文字内容 [C]"
			SetTextTagText="改变 ",~Floating Text," 的内容为 ",~文字," ,字体大小: ",~Size
			SetTextTagTextHint="采用原始字体大小单位. 字体大小不能超过0.5"
		SetTextTagTextBJ="改变文字内容"
			SetTextTagTextBJ="改变 ",~Floating Text," 的内容为 ",~文字," ,字体大小: ",~Size
			SetTextTagTextBJHint=
		SetTextTagSuspendedBJ="设置暂停状态"
			SetTextTagSuspendedBJ="设置 ",~Floating Text," : ",~Enable/Disable," 暂停状态"
			SetTextTagSuspendedBJHint="暂停状态暂停漂浮文字的移动和生命计时"
		SetTextTagPermanentBJ="设置永久显示"
			SetTextTagPermanentBJ="设置 ",~Floating Text," : ",~Enable/Disable," 永久显示"
			SetTextTagPermanentBJHint=
		SetTextTagLifespanBJ="设置显示时间"
			SetTextTagLifespanBJ="设置 ",~Floating Text," 的显示时间为 ",~Time," 秒"
			SetTextTagLifespanBJHint="该动作并不影响永久性漂浮文字. 当显示时间到期时,系统会自动清除该漂浮文字"
		SetTextTagFadepointBJ="设置消逝时间点"
			SetTextTagFadepointBJ="设置 ",~Floating Text," 的消逝时间点为 ",~Time," 秒"
			SetTextTagFadepointBJHint="该动作并不影响永久性漂浮文字. 当漂浮文字存在时间到达该值时会开始淡化消逝"
		SetTextTagAgeBJ="设置已存在时间"
			SetTextTagAgeBJ="设置 ",~Floating Text," 的已存在时间为 ",~Time," 秒"
			SetTextTagAgeBJHint="该动作并不影响永久性漂浮文字"
	// Region actions
		RegionAddRect="添加区域 [C]"
			RegionAddRect="对 ",~不规则区域," 添加 ",~矩形区域
			RegionAddRectHint=区域是游戏中一个游戏地区的集合体,可以包含地区和点.
		RegionClearRect="移除区域 [C]"
			RegionClearRect="在 ",~不规则区域," 中移除 ",~矩形区域
			RegionClearRectHint=
		RegionAddCell="添加单元点(指定坐标) [C]"
			RegionAddCell="对 ",~不规则区域," 添加单元点: (",~X,",",~Y,")"
			RegionAddCellHint=单元点大小为32x32.
		RegionAddCellAtLoc="添加单元点(指定点) [C]"
			RegionAddCellAtLoc="对 ",~不规则区域," 添加单元点: ",~点
			RegionAddCellAtLocHint=单元点大小为32x32.
		RegionClearCell="移除单元点(指定坐标) [C]"
			RegionClearCell="在 ",~不规则区域," 中移除单元点: (",~X,",",~Y,")"
			RegionClearCellHint="单元点大小为32x32."
		RegionClearCellAtLoc="移除单元点(指定点) [C]"
			RegionClearCellAtLoc="在 ",~不规则区域," 中移除单元点: ",~点
			RegionClearCellAtLocHint="单元点大小为32x32."
		RemoveRegion="删除不规则区域 [C]"
			RemoveRegion="删除 ",~不规则区域
			RemoveRegionHint=
	// Rect actions
		SetRect="设置矩形区域(指定坐标) [C]"
			SetRect="重新设置 ",~矩形区域," ,左下角坐标为(",~X,",",~Y,"), 右上角坐标为(",~X,",",~Y,")"
			SetRectHint="该区域必须是一个变量. 重新设置矩形区域的大小和位置."
		SetRectFromLoc="设置矩形区域(指定点) [C]"
			SetRectFromLoc="重新设置 ",~矩形区域," ,左下角点为 ",~点," 右上角点为 ",~点
			SetRectFromLocHint="该区域必须是一个变量. 重新设置矩形区域的大小和位置."
		MoveRectTo="移动矩形区域(指定坐标) [C]"
			MoveRectTo="移动 ",~矩形区域," 到(",~X,",",~Y,")"
			MoveRectToHint="该区域必须是一个变量. 目标点将作为该区域的新中心点."
		MoveRectToLoc="移动矩形区域(指定点)"
			MoveRectToLoc="移动 ",~矩形区域," 到 ",~目标点
			MoveRectToLocHint="该区域必须是一个变量. 目标点将作为该区域的新中心点."
		RemoveRect="删除矩形区域 [C]"
			RemoveRect="删除 ",~矩形区域
			RemoveRectHint=
	// Quest actions
		QuestMessageBJ="发送任务信息"
			QuestMessageBJ="对 ",~玩家组," 发送 ",~Quest Message Type," 信息: ",~文字
			QuestMessageBJHint=
		FlashQuestDialogButtonBJ="闪动任务按钮"
			FlashQuestDialogButtonBJ="闪动任务按钮"
			FlashQuestDialogButtonBJHint=
		CreateQuestBJ="创建任务"
			CreateQuestBJ="创建一个 ",~Quest Type," 任务,标题: ",~文字," 任务说明: ",~文字," 任务图标: ",~Icon Path
			CreateQuestBJHint=
		DestroyQuestBJ="删除任务"
			DestroyQuestBJ="删除 ",~Quest
			DestroyQuestBJHint="被删除的任务将不再显示在任务列表."
		QuestSetEnabled="设置任务有效状态 [C]"
			QuestSetEnabled="设置 ",~Quest," ",~Enable/Disable
			QuestSetEnabledHint="被禁用的任务将不会显示在任务列表."
		QuestSetCompletedBJ="设置任务完成状态"
			QuestSetCompletedBJ="设置 ",~Quest," ",~Completed/Incomplete
			QuestSetCompletedBJHint=
		QuestSetFailedBJ="设置任务失败状态"
			QuestSetFailedBJ="设置 ",~Quest," ",~Failed/Not Failed
			QuestSetFailedBJHint=
		QuestSetDiscoveredBJ="设置任务被发现状态"
			QuestSetDiscoveredBJ="设置 ",~Quest," ",~Discovered/Undiscovered
			QuestSetDiscoveredBJHint=
		QuestSetTitleBJ="设置任务标题"
			QuestSetTitleBJ="设置 ",~Quest," 的标题为 ",~文字
			QuestSetTitleBJHint=
		QuestSetDescriptionBJ="设置任务说明"
			QuestSetDescriptionBJ="设置 ",~Quest," 的任务说明为: ",~文字
			QuestSetDescriptionBJHint=
		CreateQuestItemBJ="创建任务项目"
			CreateQuestItemBJ="为 ",~Quest," 创建一个任务项目: ",~文字
			CreateQuestItemBJHint=
		QuestItemSetCompletedBJ="设置任务项目完成"
			QuestItemSetCompletedBJ="设置 ",~Quest Requirement," ",~Completed/Incomplete
			QuestItemSetCompletedBJHint=
		QuestItemSetDescriptionBJ="改变任务项目说明"
			QuestItemSetDescriptionBJ="改变 ",~Quest Requirement," 的说明为: ",~文字
			QuestItemSetDescriptionBJHint=
		CreateDefeatConditionBJ="创建失败条件"
			CreateDefeatConditionBJ="创建失败条件: ",~文字
			CreateDefeatConditionBJHint="失败条件会在每个任务中显示."
		DestroyDefeatConditionBJ="删除失败条件"
			DestroyDefeatConditionBJ="删除 ",~Defeat Condition
			DestroyDefeatConditionBJHint="被删除的失败条件会从每个任务中移除."
		DefeatConditionSetDescriptionBJ="改变失败条件说明"
			DefeatConditionSetDescriptionBJ="改变 ",~Defeat Condition," 的说明为: ",~文字
			DefeatConditionSetDescriptionBJHint=
		QuestSetEnabledBJ="设置任务有效状态"
			QuestSetEnabledBJ=~Enable/Disable," ",~Quest
			QuestSetEnabledBJHint="被禁用的任务将不会显示在任务列表."
	// Lightning actions
		AddLightningLoc="创建闪电效果"
			AddLightningLoc="创建一道 ",~Type," 闪电效果,从 ",~点," 到 ",~点
			AddLightningLocHint=
		DestroyLightningBJ="删除闪电效果"
			DestroyLightningBJ="删除 ",~Lightning
			DestroyLightningBJHint=
		YDWETimerDestroyLightning="删除闪电效果(计时器系统) [Y]"
			YDWETimerDestroyLightning="在 ",~时间," 秒后删除 ",~闪电效果
			YDWETimerDestroyLightningHint="启动中心计时器，在指定时间之后删除闪电效果。"
		MoveLightningEx="移动闪电效果(指定坐标) [C]"
			MoveLightningEx="移动 ",~Lightning," 到新位置,(",~Boolean," 检查可见性) 新起始点: (",~X,",",~Y,",",~Z,") 新终结点: (",~X,",",~Y,",",~Z,")
			MoveLightningExHint="可指定Z坐标. 允许检查可见性则在指定起始点和终结点都不可见时将不移动闪电效果."
		MoveLightningLoc="移动闪电效果(指定点)"
			MoveLightningLoc="移动 ",~Lightning," ,使其连接 ",~点," 到 ",~点
			MoveLightningLocHint=
		SetLightningColorBJ="改变闪电效果颜色"
			SetLightningColorBJ="改变 ",~Lightning," 的颜色值为(",~Red," ",~Green," ",~Blue,") Alpha通道值为 ",~Alpha
			SetLightningColorBJHint="颜色格式为(红,绿,蓝). 颜色和Alpha通道值取值范围0-1. Alpha通道值为0即完全透明."
	// Sound actions
		PlaySoundBJ="播放音效"
			PlaySoundBJ="播放 ",~音效
			PlaySoundBJHint="音效不能在地图初始化时播放. 注意3D音效必须指定地点播放."
		PlaySoundAtPointBJ="播放3D音效(指定点)"
			PlaySoundAtPointBJ="播放 ",~3D音效," ,音量: ",~Volume,"% 播放位置: ",~指定点," Z轴高度: ",~Z
			PlaySoundAtPointBJHint="音效不能在地图初始化时播放. 该动作只能用于播放3D音效."
		PlaySoundOnUnitBJ="播放3D音效(跟随单位)"
			PlaySoundOnUnitBJ="播放 ",~3D音效," ,音量: ",~Volume,"%, 跟随单位: ",~目标单位
			PlaySoundOnUnitBJHint="音效不能在地图初始化时播放. 该动作只能用于播放3D音效."
		PlaySoundFromOffsetBJ="跳播音效"
			PlaySoundFromOffsetBJ="播放 ",~音效,",音量: ",~Volume,"%,跳过开始 ",~Offset," 秒"
			PlaySoundFromOffsetBJHint="音效不能在地图初始化时播放.该动作不能用于3D音效."
		StopSoundBJ="停止音效"
			StopSoundBJ="停止播放 ",~音效," ",~After Fading/Immediately
			StopSoundBJHint=
		KillSoundWhenDoneBJ="删除音效"
			KillSoundWhenDoneBJ="删除 ",~音效
			KillSoundWhenDoneBJHint="如果音效正在播放则在播放结束时删除."
		SetSoundVolume="设置音效音量 [C]"
			SetSoundVolume="设置 ",~音效," 的音量为 ",~Volume
			SetSoundVolumeHint="音量取值范围0-127."
		SetSoundVolumeBJ="设置音效音量"
			SetSoundVolumeBJ="设置 ",~音效," 的音量为 ",~Volume,"%"
			SetSoundVolumeBJHint=
		SetSoundPlayPosition="设置音效播放时间点 [C]"
			SetSoundPlayPosition="设置 ",~音效," 的播放时间点为 ",~Offset," 毫秒"
			SetSoundPlayPositionHint="音效必须是正在播放的. 不能用于3D音效."
		SetSoundOffsetBJ="设置音效播放时间点"
			SetSoundOffsetBJ="设置播放时间点为 ",~Offset," 秒对 ",~音效
			SetSoundOffsetBJHint="音效必须是正在播放的. 不能用于3D音效."
		SetSoundDistanceCutoffBJ="设置声音截断距离"
			SetSoundDistanceCutoffBJ="设置 ",~音效," 的截断距离为 ",~数值
			SetSoundDistanceCutoffBJHint="地图距离,玩家镜头距离音源超过该范围则切断声音."
		SetSoundPitchBJ="设置声音速率"
			SetSoundPitchBJ="设置 ",~音效," 的速率为 ",~数值
			SetSoundPitchBJHint="表示正常速率的倍数."
		AttachSoundToUnitBJ="绑定单位"
			AttachSoundToUnitBJ="将 ",~3D音效," 绑定到 ",~单位
			AttachSoundToUnitBJHint="该动作仅用于3D音效."
		SetSoundPosition="设置3D音效位置(指定坐标) [C]"
			SetSoundPosition="设置 ",~3D音效," 的播放位置为(",~X,",",~Y,"), Z轴高度为 ",~Z
			SetSoundPosition="该动作仅用于3D音效."
		SetSoundPositionLocBJ="设置3D音效位置(指定点)"
			SetSoundPositionLocBJ="设置 ",~3D音效," 的播放位置为 ",~指定点," Z轴高度为 ",~Z
			SetSoundPositionLocBJHint="该动作仅用于3D音效."
		SetSoundDistances="设置3D音效衰减范围"
			SetSoundDistances="设置 ",~3D音效," 的衰减最小范围: ",~数值," 最大范围: ",~数值
			SetSoundDistancesHint="该动作仅用于3D音效. 注意不一定要达到最大范围,音量衰减到一定程度也会变没的."
		SetStackedSoundBJ="添加/删除区域音效"
			SetStackedSoundBJ=~Add/Remove," ",~3D音效," 到 ",~地区
			SetStackedSoundBJHint="该动作仅用于3D音效."
		SetAmbientDaySound="使用白天环境音效"
			SetAmbientDaySound="使用 ",~Theme," 白天环境音效"
			SetAmbientDaySoundHint=
		SetAmbientNightSound="使用夜晚环境音效"
			SetAmbientNightSound="使用 ",~Theme," 夜晚环境音效"
			SetAmbientNightSoundHint=
		EnableDawnDusk="允许/禁止昼夜交替音效"
			EnableDawnDusk=~Enable/Disable," 昼夜交替音效"
			EnableDawnDuskHint=
		SetMapMusic="设置背景音乐列表 [C]"
			SetMapMusic="设置背景音乐列表为: ",~Music," , ",~允许/禁止," 随机播放, 开始播放序号为 ",~Index
			SetMapMusicHint="可指定播放文件或播放目录."
		SetMapMusicIndexedBJ="设置背景音乐列表(指定播放)"
			SetMapMusicIndexedBJ="设置背景音乐列表为: ",~Music," ,播放序号: ",~Index
			SetMapMusicIndexedBJHint="可指定播放文件或播放目录."
		SetMapMusicRandomBJ="设置背景音乐列表(随机播放)"
			SetMapMusicRandomBJ="设置背景音乐列表为: ",~Music," ,随机播放"
			SetMapMusicRandomBJHint="可指定播放文件或播放目录."
		ClearMapMusicBJ="清空背景音乐列表"
			ClearMapMusicBJ="清空背景音乐列表"
			ClearMapMusicBJHint=
		// PlayMusic
		// PlayMusicEx
		PlayMusicBJ="播放背景音乐"
			PlayMusicBJ="播放 ",~背景音乐
			PlayMusicBJHint=
		PlayMusicExBJ="跳播背景音乐"
			PlayMusicExBJ="播放 ",~背景音乐," ,跳过开始 ",~Offset," 秒,淡入时间: ",~Fade Time," 秒"
			PlayMusicExBJHint=
		StopMusicBJ="停止背景音乐"
			StopMusicBJ="停止背景音乐 ",~After Fading/Immediately
			StopMusicBJHint=
		ResumeMusicBJ="恢复背景音乐"
			ResumeMusicBJ="恢复背景音乐"
			ResumeMusicBJHint=
		SetMusicVolume="设置背景音乐音量 [C]"
			SetMusicVolume="设置背景音乐音量为 ",~Volume
			SetMusicVolumeHint="音量取值范围为0-127."
		SetMusicVolumeBJ="设置背景音乐音量"
			SetMusicVolumeBJ="设置背景音乐音量为 ",~Volume,"%"
			SetMusicVolumeBJHint=
		SetMusicPlayPosition="设置背景音乐播放时间点 [C]"
			SetMusicPlayPosition="设置当前背景音乐的播放时间点为 ",~Offset," 毫秒"
			SetMusicPlayPositiontHint=
		SetMusicOffsetBJ="设置背景音乐播放时间点"
			SetMusicOffsetBJ="设置当前背景音乐的播放时间点为 ",~Offset," 秒"
			SetMusicOffsetBJHint=
		PlayThematicMusic="播放主题音乐 [C]"
			PlayThematicMusic="播放 ",~Music Theme," 主题音乐"
			PlayThematicMusicHint="播放主题音乐一次,然后恢复原来的音乐."
		PlayThematicMusicBJ="播放主题音乐"
			PlayThematicMusicBJ="播放 ",~Music Theme," 主题音乐"
			PlayThematicMusicBJHint="播放主题音乐一次,然后恢复原来的音乐."
		PlayThematicMusicEx="跳播主题音乐 [C]"
			PlayThematicMusicEx="播放 ",~Music Theme," 主题音乐,跳过开始 ",~Offset," 毫秒"
			PlayThematicMusicExBJHint="播放主题音乐一次,然后恢复原来的音乐."
		PlayThematicMusicExBJ="跳播主题音乐"
			PlayThematicMusicExBJ="播放 ",~Music Theme," 主题音乐,跳过开始 ",~Offset," 秒"
			PlayThematicMusicExBJHint="播放主题音乐一次,然后恢复原来的音乐."
		EndThematicMusic="停止主题音乐 [C]"
			EndThematicMusic="停止正在播放的主题音乐"
			EndThematicMusicHint=
		EndThematicMusicBJ="停止主题音乐"
			EndThematicMusicBJ="停止正在播放的主题音乐"
			EndThematicMusicBJHint=
		SetThematicMusicPlayPosition="设置主题音乐播放时间点 [C]"
			SetThematicMusicPlayPosition="设置当前主题音乐播放时间点为 ",~Offset," 毫秒"
			SetThematicMusicPlayPositionHint=
		SetThematicMusicOffsetBJ="设置主题音乐播放时间点"
			SetThematicMusicOffsetBJ="设置当前主题音乐播放时间点为 ",~Offset," 秒"
			SetThematicMusicOffsetBJHint=
		VolumeGroupSetVolume="设置多通道音量 [C]"
			VolumeGroupSetVolume="设置 ",~Volume Channel," 的音量为 ",~Volume
			VolumeGroupSetVolumeHint="音量取值范围0-1."
		VolumeGroupSetVolumeBJ="设置多通道音量"
			VolumeGroupSetVolumeBJ="设置 ",~Volume Channel," 的音量为 ",~Volume,"%"
			VolumeGroupSetVolumeBJHint=
		SetCineModeVolumeGroupsBJ="设置电影多通道音量环境"
			SetCineModeVolumeGroupsBJ="设置多通道音量为电影模式"
			SetCineModeVolumeGroupsBJHint=
		SetSpeechVolumeGroupsBJ="设置语音多通道音量环境"
			SetSpeechVolumeGroupsBJ="设置多通道音量为语音模式"
			SetSpeechVolumeGroupsBJHint="语音模式即电影的播送单位消息功能."
		VolumeGroupResetBJ="重置多通道音量"
		VolumeGroupResetBJ="重置所有通道音量为预设值."
	// Special Effect actions
		AddSpecialEffectLocBJ="创建特效(指定点)"
			AddSpecialEffectLocBJ="在 ",~指定点," 创建特效: ",~Model File
			AddSpecialEffectLocBJHint=
		AddSpecialEffectLocBJEx="创建特效(指定伪点) [W]"
			AddSpecialEffectLocBJEx="在 ",~指定伪点," 创建特效: ",~Model File
			AddSpecialEffectLocBJExHint="特效播放后自动消失，采用伪点系统，点自动清除。"
		AddSpecialEffectTargetUnitBJ="创建特效(绑定单位)"
			AddSpecialEffectTargetUnitBJ="创建并绑定特效到 ",~Attachment Point," 对 ",~单位," ,使用模型: ",~Model File
			AddSpecialEffectTargetUnitBJHint=
		AddSpecialEffectForPlayer="创建特效(指定坐标|仅指定玩家可见) [W]"
			AddSpecialEffectForPlayer="创建并显示给",~玩家,",",~特效,"在("~x,",",~y,")"
			AddSpecialEffectForPlayerHint="特效自动消失，无需排泄"
		WMCreateEffects="创建特效(范围内随机|指定坐标) [W]"
			WMCreateEffects="在(",~x,",",~y,"),范围为:",~r,"创建",~n,"个",~m
			WMCreateEffectsHint="无需排泄特效"
		DestroyEffectBJ="删除特效"
			DestroyEffectBJ="删除 ",~Special Effect
			DestroyEffectBJHint=
		YDWETimerDestroyEffect="删除特效(计时器系统) [Y]"
			YDWETimerDestroyEffect="在 ",~时间," 秒后删除 ",~特效
			YDWETimerDestroyEffectHint="启动中心计时器，在指定时间之后删除特效。"
		YDWECreateEwsp="环绕单位 [Y]"
			YDWECreateEwsp="围绕 ",~单位," 创建 ",~单位类型," 共 ",~n,"个 ，旋转半径 ",~R,"，持续 ",~T," 秒，刷新周期 ",~I,"，旋转角速度每个周期 ",~S,"。"
			YDWECreateEwspHint="<wataloo添加> 刷新周期越小动画越连续，但也越耗资源"
		YDWECreateLine="为单位生成丝带 [Y]"
			YDWECreateLine="在 ",~单位," 身上生成丝带，特效单位类型为 ",~单位类型,"，数目为 ",~整数,"，角度偏移 ",~实数,"，间距为 ",~实数,"，持续时间为 ",~实数,"，刷新周期为 ",~实数,"，初始高度为 ",~实数,"，高度等差为 ",~实数,"，模型尺寸初始为 ",~实数,"，尺寸等差为 ",~实数,"。"
			YDWECreateLineHint="<thody制作> 好看的丝带~"
	// Image actions
		CreateImageBJ="创建"
			CreateImageBJ="使用图像: ",~Image," 大小: ",~Size," 创建点: ",~指定点," Z轴偏移: ",~Z," 图像类型: ",~Type
			CreateImageBJHint="使用'图像 - 设置永久渲染状态'才能显示图像. 创建点作为图像的左下角位置. 该功能存在Bug,会在图像上和右面多出256象素. 所以需要支持Alpha通道的图像且上和右面最后一行像素为透明才能完美显示."
		DestroyImage="删除"
			DestroyImage="删除 ",~图像
			DestroyImageHint=
		ShowImage="设置图像可见性 [C]"
			ShowImage="设置 ",~Image," ",~Show/Hide
			ShowImageHint=
		ShowImageBJ="设置图像可见性"
			ShowImageBJ=~Show/Hide," ",~Image
			ShowImageBJHint=
		SetImageConstantHeight="设置图像高度"
			SetImageConstantHeight="设置 ",~Image," ",~Enable/Disable," Z轴显示,并设置高度为 ",~Height
			SetImageConstantHeightHint="实际显示高度为图像高度+Z轴偏移. 只有允许Z轴显示时才有效."
		SetImagePosition="改变图像位置(指定坐标) [C]"
			SetImagePosition="改变 ",~Image," 的位置为(",~X,",",~Y,"),Z轴偏移为 ",~Z
			SetImagePositionHint="指图像的左下角位置."
		SetImagePositionBJ="改变图像位置(指定点)"
			SetImagePositionBJ="改变 ",~Image," 的位置为 ",~Position," ,Z轴偏移为 ",~Z
			SetImagePositionBJHint="指图像的左下角位置."
		SetImageColor="改变图像颜色 [C]"
			SetImageColor="设置 ",~Image," 的颜色值为(",~Red,",",~Green,",",~Blue,") Alpha值为 ",~Alpha
			SetImageColorHint="颜色格式为(红,绿,蓝). Alpha值为0是不可见的. 颜色值和Alpha值取值范围0-255."
		SetImageColorBJ="改变图像颜色"
			SetImageColorBJ="设置 ",~Image," 的颜色值为(",~Red,"%, ",~Green,"%, ",~Blue,"%) 透明度为 ",~Transparency,"%"
			SetImageColorBJHint="颜色格式为(红,绿,蓝). 透明度100%是不可见的."
		SetImageRender="设置图像渲染状态"
			SetImageRender="设置 ",~Image," : ",~Enable/Disable," 显示状态"
			SetImageRenderHint="未发现有任何作用."
		SetImageRenderAlways="设置图像永久渲染状态"
			SetImageRenderAlways="设置 ",~Image," : ",~Enable/Disable," 永久显示状态"
			SetImageRenderAlwaysHint="要显示图像则必须开启该项."
		SetImageAboveWater="设置图像水面显示状态"
			SetImageAboveWater="设置 ",~Image," : ",~Enable/Disable," 水面显示, ",~Enable/Disable," 水的Alpha通道"
			SetImageAboveWaterHint="前者设置图像在水面或是水底显示. 后者设置图像是否受水的Alpha通道影响. "
		SetImageType="设置图像类型"
			SetImageType="设置 ",~Image," 类型为 ",~Type
			SetImageTypeHint=
	// Player actions
		SetPlayerState="设置属性"
			SetPlayerState="设置 ",~Player," 的 ",~Property," 为 ",~Value
			SetPlayerStateHint=
		AdjustPlayerStateBJ="增加属性"
			AdjustPlayerStateBJ="增加 ",~Value," ",~Player," 的 ",~Property
			AdjustPlayerStateBJHint="使用负数来减少."
		SetPlayerFlag="设置玩家参数 [C]"
			SetPlayerFlag="设置 ",~Player," 的属性 ",~Player Flag," 为 ",~On/Off
			SetPlayerFlagHint="开启玩家12的'给与奖励'表示杀死玩家12单位会获得金钱奖励."
		SetPlayerFlagBJ="开启/关闭 玩家参数"
			SetPlayerFlagBJ="设置 ",~Player Flag," ",~On/Off," 对 ",~Player
			SetPlayerFlagBJHint="开启玩家12的'给与奖励'表示杀死玩家12单位会获得金钱奖励."
		SetPlayerTaxRate="设置税率 [C]"
			SetPlayerTaxRate="设置 ",~Player," 交纳给 ",~Player," 的 ",~Resource," 所得税为 ",~Rate," %"
			SetPlayerTaxRateHint="缴纳所得税所损失的资源可以通过'玩家得分'的'税务损失的黄金/木材'来获取. 所得税最高为100%. 且玩家1对玩家2和玩家3都交纳80%所得税.则玩家1采集黄金时将给玩家2 8黄金,玩家3 2黄金."
		SetPlayerTaxRateBJ="设置税率"
			SetPlayerTaxRateBJ="设置 ",~Rate," %的 ",~Resource," 所得税, ",~Player," 交纳给 ",~Player
			SetPlayerTaxRateBJHint="缴纳所得税所损失的资源可以通过'玩家得分'的'税务损失的黄金/木材'来获取. 所得税最高为100%. 且玩家1对玩家2和玩家3都交纳80%所得税.则玩家1采集黄金时将给玩家2 8黄金,玩家3 2黄金."
		SetPlayerTeam="设置玩家队伍"
			SetPlayerTeam="设置 ",~Player," 的队伍为 ",~队伍ID
			SetPlayerTeamHint=
		EnableCreepSleepBJ="设置中立生物睡眠状态"
			EnableCreepSleepBJ=~Enable/Disable," 中立生物睡眠"
			EnableCreepSleepBJHint="只影响夜晚的睡眠. 不影响催眠魔法"
		SetPlayerAllianceStateBJ="设置联盟状态"
			SetPlayerAllianceStateBJ="命令 ",~Player," 设置对 ",~Player," 的联盟状态为 ",~Alliance Setting
			SetPlayerAllianceStateBJHint=
		SetPlayerAlliance="设置联盟状态(指定项目) [C]"
			SetPlayerAlliance="命令 ",~Player," 对 ",~Player," 设置 ",~Alliance Type," ",~On/Off
			SetPlayerAllianceHint="注意:可以对玩家自己设置联盟状态. 可用来实现一些特殊效果."
		SetPlayerAllianceBJ="设置联盟状态(指定项目)"
			SetPlayerAllianceBJ="命令 ",~Player," 设置 ",~Alliance Type," ",~On/Off," 对 ",~Player
			SetPlayerAllianceBJHint=
		SetPlayerAbilityAvailable="设置技能可用性 [C]"
			SetPlayerAbilityAvailable="设置 ",~Player," 的 ",~技能," 为 ",~Enable/Disable
			SetPlayerAbilityAvailableHint="设置玩家能否使用该技能."
		SetPlayerAbilityAvailableBJ="允许/禁用 技能"
			SetPlayerAbilityAvailableBJ=~Enable/Disable," ",~技能," 对 ",~Player
			SetPlayerAbilityAvailableBJHint="设置玩家能否使用该技能."
		SetPlayerUnitAvailableBJ="设置单位可用性"
			SetPlayerUnitAvailableBJ="设置 ",~单位类型," ",~Available/Unavailable," 对 ",~Player
			SetPlayerUnitAvailableBJHint="设置玩家能否建造该单位."
		SetPlayerUnitMaxAllowed="限制单位可建造数量"
			SetPlayerUnitMaxAllowed="限制 ",~单位类型," 的可建造数量为 ",~Limit," 对 ",~Player
			SetPlayerUnitMaxAllowedHint="-1为无限制,0为不能生产."
		SetPlayerMaxHeroesAllowed="限制英雄数量"
			SetPlayerMaxHeroesAllowed="限制英雄数量为 ",~Limit," 对 ",~Player
			SetPlayerMaxHeroesAllowedHint="-1为无限制,0为不能生产."
		SetPlayerTechResearchedSwap="设置科技等级"
			SetPlayerTechResearchedSwap="设置 ",~科技," 的等级为 ",~Level," 对 ",~Player
			SetPlayerTechResearchedSwapHint="科技等级不能倒退."
		SetPlayerTechMaxAllowedSwap="设置最大科技等级"
			SetPlayerTechMaxAllowedSwap="设置 ",~科技," 的等级为 ",~Level," 对 ",~Player
			SetPlayerTechMaxAllowedSwapHint="科技等级不能倒退."
		AddPlayerTechResearched="增加科技等级"
			AddPlayerTechResearched="增加 ",~玩家," 的 ",~科技," 科技 ",~整数 ," 级"
			AddPlayerTechResearchedHint="科技等级不能倒退。"
		SetPlayerColorBJ="改变玩家颜色"
			SetPlayerColorBJ="将 ",~Player," 的玩家颜色改为 ",~Color," ,并 ",~Changing/Retaining color," 玩家单位颜色"
			SetPlayerColorBJHint=
		SetPlayerColor="改变玩家颜色 [C]"
			SetPlayerColor="将 ",~Player," 的玩家颜色改为 ",~Color
			SetPlayerColorHint="不改变现有单位的颜色."
		SetPlayerHandicap="设置生命上限 [C]"
			SetPlayerHandicap="设置 ",~Player," 的生命障碍为正常的 ",~Percent,"倍"
			SetPlayerHandicapHint="生命上限影响玩家拥有单位的生命最大值. 生命之书并不受生命上限限制,所以对英雄血量可能会有偏差."
		SetPlayerHandicapBJ="设置生命上限"
			SetPlayerHandicapBJ="设置 ",~Player," 的生命障碍为正常的 ",~Percent,"%"
			SetPlayerHandicapBJHint="生命上限影响玩家拥有单位的生命最大值. 生命之书并不受生命上限限制,所以对英雄血量可能会有偏差."
		SetPlayerOnScoreScreen="设置玩家在计分屏的可见性 [C]"
			SetPlayerOnScoreScreen="设置 ",~Player," ",~Show/Hide," 在计分屏的显示"
			SetPlayerOnScoreScreenHint=
		SetPlayerOnScoreScreenBJ="显示/隐藏计分屏显示"
			SetPlayerOnScoreScreenBJ=~Show/Hide," ",~Player," 在计分屏的显示."
			SetPlayerOnScoreScreenBJHint=
		SetPlayerName="更改名字"
			SetPlayerName="更改 ",~Player," 的名字为 ",~文字
			SetPlayerNameHint=
		RemovePlayer="踢除玩家"
			RemovePlayer="踢除 ",~Player," ，玩家的游戏结果为 ",~文字
			RemovePlayerHint=
	// Player Group actions
		ForForceMultiple="选取玩家组内玩家做动作(多个动作)"
			ForForceMultiple="选取 ",~玩家组," 内所有玩家做动作"
			ForForceMultipleHint="玩家组动作中可使用'选取玩家'来获取对应的玩家. 等待不能在组动作中运行."
		ForForce="选取玩家组内玩家做动作"
			ForForce="选取 ",~玩家组," 内所有玩家 ",~做动作
			ForForceHint="玩家组动作中可使用'选取玩家'来获取对应的玩家. 等待不能在组动作中运行."
		ForceAddPlayer="添加玩家 [C]"
			ForceAddPlayer="为",~玩家组," 添加 ",~玩家
			ForceAddPlayerHint="并不影响玩家本身."
		ForceAddPlayerSimple="添加玩家"
			ForceAddPlayerSimple="添加 ",~Player," 到 ",~玩家组
			ForceAddPlayerSimpleHint="并不影响玩家本身."
		ForceRemovePlayer="移除玩家 [C]"
			ForceRemovePlayer="从 ",~玩家组," 中移除 ",~玩家
			ForceRemovePlayerHint="并不影响玩家本身."
		ForceRemovePlayerSimple="移除玩家"
			ForceRemovePlayerSimple="将 ",~Player," 从 ",~玩家组," 移除"
			ForceRemovePlayerSimpleHint="并不影响玩家本身."
		ForceClear="清空玩家组"
			ForceClear="清空 ",~玩家组," 内所有玩家"
			ForceClearHint="并不影响玩家本身."
		DestroyForce="删除玩家组 [C]"
			DestroyForce="删除 ",~玩家组
			DestroyForceHint="注意: 不要删除系统预置的玩家组."
		SetForceAllianceStateBJ="设置结盟状态"
			SetForceAllianceStateBJ="命令 ",~Player," 设置对 ",~Player," 的结盟状态为 ",~Alliance Setting
			SetForceAllianceStateBJHint=
	// Item actions
		CreateItemLocEx="创建(指定伪点) [W]"
			CreateItemLocEx="创建 ",~物品," 在 ",~指定伪点
			CreateItemLocExHint="采用伪点系统,该函数自动清除伪点.无需排泄"
		CreateItemLoc="创建(指定点)"
			CreateItemLoc="创建 ",~物品," 在 ",~指定点
			CreateItemLocHint=
		CreateItem="创建(指定坐标) [C]"
			CreateItem="新建 ",~物品," 在(",~X,",",~Y,")"
			CreateItemHint=
		RemoveItem="删除"
			RemoveItem="删除 ",~物品
			RemoveItemHint=
		YDWETimerRemoveItem="删除(计时器系统) [Y]"
			YDWETimerRemoveItem="在 ",~时间," 秒后删除 ",~物品
			YDWETimerRemoveItemHint="启动中心计时器，在指定时间之后删除物品。"
		YDWEItemAbilityStorage="为物品添加技能(物品属性系统) [Y]"
			YDWEItemAbilityStorage="为 ",~物品类型," 添加 ",~技能
			YDWEItemAbilityStorageHint="将技能添加给物品，英雄获得物品后，会获得额外的技能；这些技能会出现在单位身上，因此尽量不要添加带有图标的技能。"
		SetItemVisible="显示/隐藏 [C]"
			SetItemVisible="设置 ",~物品," 的状态为: ",~Show/Hide
			SetItemVisibleHint="只对在地面的物品有效,不会影响在物品栏中的物品. 单位通过触发得到一个隐藏物品时,会自动显示该物品."
		SetItemVisibleBJ="显示/隐藏"
			SetItemVisibleBJ=~Show/Hide," ",~物品
			SetItemVisibleBJHint="只对在地面的物品有效,不会影响在物品栏中的物品. 单位通过触发得到一个隐藏物品时,会自动显示该物品."
		SetItemPosition="设置物品位置(坐标) [C]"
			SetItemPosition="移动 ",~物品," 到(",~X,",",~Y,")"
			SetItemPositionHint=
		SetItemPositionLocEx="设置物品位置(伪点) [W]"
			SetItemPositionLocEx="移动 ",~物品," 到 ",~指定伪点
			SetItemPositionLocExHint="采用伪点系统,该函数自动清除伪点.无需排泄"
		SetItemPositionLoc="设置物品位置(点)"
			SetItemPositionLoc="移动 ",~物品," 到 ",~指定点
			SetItemPositionLocHint=
		SetItemLifeBJ="设置物品生命值"
			SetItemLifeBJ="设置 ",~物品," 的生命值为 ",~Value
			SetItemLifeBJHint=
		SetItemCharges="设置物品使用次数"
			SetItemCharges="设置 ",~物品," 的使用次数为 ",~Charges
			SetItemChargesHint="设置为0可以使物品能无限次使用."
		SetItemInvulnerableBJ="设置物品无敌/可攻击"
			SetItemInvulnerableBJ="设置 ",~物品," ",~Invulnerable/Vulnerable
			SetItemInvulnerableBJHint=
		SetItemPawnable="设置物品可否抵押"
			SetItemPawnable="设置 ",~物品," ",~Pawnable/Unpawnable
			SetItemPawnableHint="不可抵押物品不能被卖到商店."
		SetItemDroppableBJ="设置物品可否丢弃"
			SetItemDroppableBJ="设置",~物品," ",~Droppable/Undroppable
			SetItemDroppableBJHint="不可掉落物品在被捡起之后就不能移动和丢弃.(但可通过触发实现)"
		SetItemDropOnDeathBJ="设置物品死亡是否掉落"
			SetItemDropOnDeathBJ="设置 ",~物品," ",~Drop from/Stay with," 在持有者死亡时"
			SetItemDropOnDeathBJHint=
		SetItemDropID="设置重生神符的产生单位类型"
			SetItemDropID="设置 ",~物品," 产生 ",~单位类型
			SetItemDropIDHint="设置重生神符对应的单位类型后，当英雄吃了重生神符，则会产生指定类型的单位。"
		SetItemPlayerBJ="改变物品所属玩家"
			SetItemPlayerBJ="改变 ",~物品," 的所属玩家为: ",~Player," 并 ",~Change/Retain Color
			SetItemPlayerBJHint="不是所有物品都能改变颜色. 所属玩家与持有者无关,默认为中立被动玩家."
		SetItemUserData="设置物品自定义值"
			SetItemUserData="设置 ",~物品," 的自定义值为 ",~Index
			SetItemUserDataHint="物品自定义值只用于触发器. 可以用来为物品绑定一个整型数据."
		EnumItemsInRectBJMultiple="选取矩形区域内物品做动作(多个动作)"
			EnumItemsInRectBJMultiple="选取 ",~矩形区域," 内所有物品做动作"
			EnumItemsInRectBJMultipleHint="组动作中可使用'选取物品'来获取对应的物品. 区域内每个物品都会运行一次动作(包括隐藏物品,不包括物品栏中的物品). 等待不能在组动作中运行."
		EnumItemsInRectBJ="选取矩形区域内物品做动作"
			EnumItemsInRectBJ="选取 ",~矩形区域," 内所有物品 ",~做动作
			EnumItemsInRectBJHint="组动作中可使用'选取物品'来获取对应的物品. 区域内每个物品都会运行一次动作(包括隐藏物品,不包括单位身上的物品). 等待不能在组动作中运行."
	// Itempool actions
		YDWECreateItemPool="创建物品池 [Y]"
			YDWECreateItemPool="新建一个物品池"
			YDWECreateItemPoolHint="新建一个物品池，该物品池可以被<最后创建的物品池>获得。"
		ItemPoolAddItemType="添加物品类型 [C]"
			ItemPoolAddItemType="在 ",~物品池," 中添加一个 ",~物品," 比重为 ",~数值
			ItemPoolAddItemTypeHint="比重越高被选择的机率越大."
		ItemPoolRemoveItemType="删除物品类型 [C]"
			ItemPoolRemoveItemType="从 ",~物品池," 中删除 ",~物品
			ItemPoolRemoveItemTypeHint=
		YDWEPlaceRandomItem="提取物品 [Y]"
			YDWEPlaceRandomItem="根据 ",~物品池," 的权重提取其中任意一个物品到(",~X,", ",~Y,")"
			YDWEPlaceRandomItemHint="该物品可以被<最后从物品池中取出的物品>获取。"
		DestroyItemPool="删除物品池 [C]"
			DestroyItemPool="删除 ",~物品池
			DestroyItemPoolHint=
		PlaceRandomItem="选择放置物品 [C]"
			PlaceRandomItem="根据 ",~物品池," 的权重提取其中任意一个物品到(",~X,", ",~Y,")"
			PlaceRandomItemHint=
	// Selection actions
		ClearSelectionForPlayer="清空选择(指定玩家)"
			ClearSelectionForPlayer="清空 ",~Player," 的选择"
			ClearSelectionForPlayerHint="使玩家取消选择所有已选单位."
		SelectGroupForPlayerBJ="选择单位组(指定玩家)"
			SelectGroupForPlayerBJ="选择 ",~单位组," 对 ",~Player
			SelectGroupForPlayerBJHint="使玩家取消选择所有单位,并选择单位组中最多12个单位."
		SelectUnitForPlayerSingle="选择单位(指定玩家)"
			SelectUnitForPlayerSingle="选择 ",~单位," 对 ",~Player
			SelectUnitForPlayerSingleHint="使玩家取消选择所有单位,并选择该单位."
		SelectUnitAddForPlayer="添加选择单位(指定玩家)"
			SelectUnitAddForPlayer="添加选择 ",~单位," 对 ",~Player
			SelectUnitAddForPlayerHint="使玩家添加选择该单位."
		SelectUnitRemoveForPlayer="取消选择单位(指定玩家)"
			SelectUnitRemoveForPlayer="取消选择 ",~单位," 对 ",~Player
			SelectUnitRemoveForPlayerHint="使玩家取消选择该单位."
		ClearSelection="清空选择(所有玩家)"
			ClearSelection="清空所有玩家的选择"
			ClearSelectionHint="使玩家取消选择所有已选单位."
		SelectGroupBJ="选择单位组(所有玩家)"
			SelectGroupBJ="命令所有玩家选择 ",~单位组
			SelectGroupBJHint="使所有玩家取消选择所有单位,并选择单位组中最多12个单位."
		SelectUnitSingle="选择单位(所有玩家)"
			SelectUnitSingle="命令所有玩家选择 ",~单位
			SelectUnitSingleHint="使玩家取消选择所有已选单位,并选择该单位."
		
		// SelectUnit
		SelectUnitAdd="添加选择单位(所有玩家)"
			SelectUnitAdd="命令所有玩家添加选择 ",~单位
			SelectUnitAddHint=
		SelectUnitRemove="取消选择单位(所有玩家)"
			SelectUnitRemove="命令所有玩家取消选择 ",~单位
			SelectUnitRemoveHint=
	// Hashtable actions
		InitHashtableBJ="新建哈希表"
			InitHashtableBJ="创建一个新的哈希表"
			InitHashtableBJHint="您可以使用哈希表来储存临时数据"
		InitHashtable="新建哈希表 [C]"
			InitHashtable="创建一个新的哈希表"
			InitHashtableHint="您可以使用哈希表来储存临时数据"
		SaveRealBJ="保存实数"
			SaveRealBJ="保存实数 ",~Value," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable," 之内"
			SaveRealBJHint="使用 '哈希表 - 从哈希表提取实数' 可以取出保存的值"
		SaveReal="保存实数 [C]"
			SaveReal="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存实数 ",~Value
			SaveRealHint="使用 '哈希表 - 从哈希表提取实数' 可以取出保存的值"
		SaveIntegerBJ="保存整数"
			SaveIntegerBJ="保存整数 ",~Value," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable," 之内"
			SaveIntegerBJHint="使用 '哈希表 - 从哈希表提取整数' 可以取出保存的值"
		SaveInteger="保存整数 [C]"
			SaveInteger="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存整数 ",~Value
			SaveIntegerHint="使用 '哈希表 - 从哈希表提取整数' 可以取出保存的值"
		SaveBooleanBJ="保存布尔"
			SaveBooleanBJ="保存布尔 ",~Value," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable," 之内"
			SaveBooleanBJHint="使用 '哈希表 - 从哈希表提取布尔' 可以取出保存的值"
		SaveBoolean="保存布尔 [C]"
			SaveBoolean="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存布尔 ",~Value
			SaveBooleanHint="使用 '哈希表 - 从哈希表提取布尔' 可以取出保存的值"
		SaveStringBJ="保存字符串"
			SaveStringBJ="保存字符串 ",~Value," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveStringBJHint="使用 '哈希表 - 从哈希表提取字符串' 可以取出保存的值"
		SaveStr="保存字符串 [C]"
			SaveStr="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存字符串 ",~Value
			SaveStrHint="使用 '哈希表 - 从哈希表提取字符串' 可以取出保存的值"
		SaveAgentHandle="保存实体对象 [C]"
			SaveAgentHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存对象 ",~Value
			SaveAgentHandleHint="实体对象即一切需要计算变量连接数的对象"
		SavePlayerHandleBJ="保存玩家"
			SavePlayerHandleBJ="保存玩家 ",~Player," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SavePlayerHandleBJHint="使用 '哈希表 - 从哈希表提取玩家' 可以取出保存的值"
		SavePlayerHandle="保存玩家 [C]"
			SavePlayerHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存玩家 ",~Value
			SavePlayerHandleHint="使用 '哈希表 - 从哈希表提取玩家' 可以取出保存的值"
		SaveWidgetHandleBJ="保存物体"
			SaveWidgetHandleBJ="保存物体 ",~Widget," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveWidgetHandleBJHint="使用 '哈希表 - 从哈希表提取物体' 可以取出保存的值"
		SaveWidgetHandle="保存物体 [C]"
			SaveWidgetHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存物体 ",~Value
			SaveWidgetHandleHint="使用 '哈希表 - 从哈希表提取物体' 可以取出保存的值"
		SaveDestructableHandleBJ="保存可破坏物"
			SaveDestructableHandleBJ="保存可破坏物 ",~Destructable," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveDestructableHandleBJHint="使用 '哈希表 - 从哈希表提取可破坏物' 可以取出保存的值"
		SaveDestructableHandle="保存可破坏物 [C]"
			SaveDestructableHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存可破坏物 ",~Value
			SaveDestructableHandleHint="使用 '哈希表 - 从哈希表提取可破坏物' 可以取出保存的值"
		SaveItemHandleBJ="保存物品"
			SaveItemHandleBJ="保存物品 ",~Item," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveItemHandleBJHint="使用 '哈希表 - 从哈希表提取物品' 可以取出保存的值"
		SaveItemHandle="保存物品 [C]"
			SaveItemHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存物品 ",~Value
			SaveItemHandleHint="使用 '哈希表 - 从哈希表提取物品' 可以取出保存的值"
		SaveUnitHandleBJ="保存单位"
			SaveUnitHandleBJ="保存单位 ",~Unit," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveUnitHandleBJHint="使用 '哈希表 - 从哈希表提取单位' 可以取出保存的值"
		SaveUnitHandle="保存单位 [C]"
			SaveUnitHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存单位 ",~Value
			SaveUnitHandleHint="使用 '哈希表 - 从哈希表提取单位' 可以取出保存的值"
		SaveAbilityHandleBJ="保存技能"
			SaveAbilityHandleBJ="保存技能 ",~Ability," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveAbilityHandleBJHint="使用 '哈希表 - 从哈希表提取技能' 可以取出保存的值"
		SaveAbilityHandle="保存技能 [C]"
			SaveAbilityHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存技能 ",~Value
			SaveAbilityHandleHint="使用 '哈希表 - 从哈希表提取技能' 可以取出保存的值"
		YDWESaveAbilityHandleBJ="保存技能"
			YDWESaveAbilityHandleBJ="保存技能 ",~Ability," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			YDWESaveAbilityHandleBJHint="使用 '哈希表 - 从哈希表提取技能' 可以取出保存的值"
		YDWESaveAbilityHandle="保存技能 [C]"
			YDWESaveAbilityHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存技能 ",~Value
			YDWESaveAbilityHandleHint="使用 '哈希表 - 从哈希表提取技能' 可以取出保存的值"
		SaveTimerHandleBJ="保存计时器"
			SaveTimerHandleBJ="保存计时器 ",~Timer," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTimerHandleBJHint="使用 '哈希表 - 从哈希表提取计时器' 可以取出保存的值"
		SaveTimerHandle="保存计时器 [C]"
			SaveTimerHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存计时器 ",~Value
			SaveTimerHandleHint="使用 '哈希表 - 从哈希表提取计时器' 可以取出保存的值"
		SaveTriggerHandleBJ="保存触发器"
			SaveTriggerHandleBJ="保存触发器 ",~Trigger," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTriggerHandleBJHint="使用 '哈希表 - 从哈希表提取触发器' 可以取出保存的值"
		SaveTriggerHandle="保存触发器 [C]"
			SaveTriggerHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存触发器 ",~Value
			SaveTriggerHandleHint="使用 '哈希表 - 从哈希表提取触发器' 可以取出保存的值"
		SaveTriggerConditionHandleBJ="保存触发条件"
			SaveTriggerConditionHandleBJ="保存触发条件 ",~Triggercondition," 在子索引 ",~Value," of ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTriggerConditionHandleBJHint="使用 '哈希表 - 从哈希表提取触发条件' 可以取出保存的值"
		SaveTriggerConditionHandle="保存触发条件 [C]"
			SaveTriggerConditionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存触发条件 ",~Value
			SaveTriggerConditionHandleHint="使用 '哈希表 - 从哈希表提取触发条件' 可以取出保存的值"
		SaveTriggerActionHandleBJ="保存触发动作"
			SaveTriggerActionHandleBJ="保存触发动作 ",~Triggeraction," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTriggerActionHandleBJHint="使用 '哈希表 - 从哈希表提取触发动作' 可以取出保存的值"
		SaveTriggerActionHandle="保存触发动作 [C]"
			SaveTriggerActionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存触发动作 ",~Value
			SaveTriggerActionHandleHint="使用 '哈希表 - 从哈希表提取触发动作' 可以取出保存的值"
		SaveTriggerEventHandleBJ="保存触发事件"
			SaveTriggerEventHandleBJ="保存触发事件 ",~Event," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTriggerEventHandleBJHint="使用 '哈希表 - 从哈希表提取触发事件' 可以取出保存的值"
		SaveTriggerEventHandle="保存触发事件 [C]"
			SaveTriggerEventHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存触发事件 ",~Value
			SaveTriggerEventHandleHint="使用 '哈希表 - 从哈希表提取触发事件' 可以取出保存的值"
		SaveForceHandleBJ="保存玩家组"
			SaveForceHandleBJ="保存玩家组 ",~Force," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveForceHandleBJHint="使用 '哈希表 - 从哈希表提取玩家组' 可以取出保存的值"
		SaveForceHandle="保存玩家组 [C]"
			SaveForceHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存玩家组 ",~Value
			SaveForceHandleHint="使用 '哈希表 - 从哈希表提取玩家组' 可以取出保存的值"
		SaveGroupHandleBJ="保存单位组"
			SaveGroupHandleBJ="保存单位组",~Group," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveGroupHandleBJHint="使用 '哈希表 - 从哈希表提取单位组' 可以取出保存的值"
		SaveGroupHandle="保存单位组 [C]"
			SaveGroupHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存单位组 ",~Value
			SaveGroupHandleHint="使用 '哈希表 - 从哈希表提取单位组' 可以取出保存的值"
		SaveLocationHandleBJ="保存点"
			SaveLocationHandleBJ="保存点 ",~Location," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveLocationHandleBJHint="使用 '哈希表 - 从哈希表提取点' 可以取出保存的值"
		SaveLocationHandle="保存点 [C]"
			SaveLocationHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存点 ",~Value
			SaveLocationHandleHint="使用 '哈希表 - 从哈希表提取点' 可以取出保存的值"
		SaveRegionHandleBJ="保存区域(不规则)"
			SaveRegionHandleBJ="保存区域(不规则) ",~Region," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveRegionHandleBJHint="使用 '哈希表 - 从哈希表提取区域(不规则)' 可以取出保存的值"
		SaveRegionHandle="保存区域(不规则) [C]"
			SaveRegionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存区域(不规则) ",~Value
			SaveRegionHandleHint="使用 '哈希表 - 从哈希表提取区域(不规则)' 可以取出保存的值"
		SaveRectHandleBJ="保存区域(矩型)"
			SaveRectHandleBJ="保存区域(矩型) ",~Rect," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveRectHandleBJHint="使用 '哈希表 - 从哈希表提取区域(矩型)' 可以取出保存的值"
		SaveRectHandle="保存区域(矩型) [C]"
			SaveRectHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存区域(矩型) ",~Value
			SaveRectHandleHint="使用 '哈希表 - 从哈希表提取区域(矩型)' 可以取出保存的值"
		SaveBooleanExprHandleBJ="保存布尔表达式"
			SaveBooleanExprHandleBJ="保存布尔表达式 ",~Boolexpr," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveBooleanExprHandleBJHint="使用 '哈希表 - 从哈希表提取布尔表达式' 可以取出保存的值"
		SaveBooleanExprHandle="保存布尔表达式 [C]"
			SaveBooleanExprHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存布尔表达式 ",~Value
			SaveBooleanExprHandleHint="使用 '哈希表 - 从哈希表提取布尔表达式' 可以取出保存的值"
		SaveSoundHandleBJ="保存音效"
			SaveSoundHandleBJ="保存音效 ",~Sound," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveSoundHandleBJHint="使用 '哈希表 - 从哈希表提取音效' 可以取出保存的值"
		SaveSoundHandle="保存音效 [C]"
			SaveSoundHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存音效 ",~Value
			SaveSoundHandleHint="使用 '哈希表 - 从哈希表提取音效' 可以取出保存的值"
		SaveEffectHandleBJ="保存特效"
			SaveEffectHandleBJ="保存特效",~Effect," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveEffectHandleBJHint="使用 '哈希表 - 从哈希表提取特效' 可以取出保存的值"
		SaveEffectHandle="保存特效 [C]"
			SaveEffectHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存特效 ",~Value
			SaveEffectHandleHint="使用 '哈希表 - 从哈希表提取特效' 可以取出保存的值"
		SaveUnitPoolHandleBJ="保存单位池"
			SaveUnitPoolHandleBJ="保存单位池 ",~Unitpool," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveUnitPoolHandleBJHint="使用 '哈希表 - 从哈希表提取单位池' 可以取出保存的值"
		SaveUnitPoolHandle="保存单位池 [C]"
			SaveUnitPoolHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存单位池 ",~Value
			SaveUnitPoolHandleHint="使用 '哈希表 - 从哈希表提取单位池' 可以取出保存的值"
		SaveItemPoolHandleBJ="保存物品池"
			SaveItemPoolHandleBJ="保存物品池 ",~Itempool," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveItemPoolHandleBJHint="使用 '哈希表 - 从哈希表提取物品池' 可以取出保存的值"
		SaveItemPoolHandle="保存物品池 [C]"
			SaveItemPoolHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存物品池 ",~Value
			SaveItemPoolHandleHint="使用 '哈希表 - 从哈希表提取物品池' 可以取出保存的值"
		SaveQuestHandleBJ="保存任务"
			SaveQuestHandleBJ="保存任务 ",~Quest," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveQuestHandleBJHint="使用 '哈希表 - 从哈希表提取任务' 可以取出保存的值"
		SaveQuestHandle="保存任务 [C]"
			SaveQuestHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存任务 ",~Value
			SaveQuestHandleHint="使用 '哈希表 - 从哈希表提取任务' 可以取出保存的值"
		SaveQuestItemHandleBJ="保存任务要求"
			SaveQuestItemHandleBJ="保存任务要求 ",~Questitem," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveQuestItemHandleBJHint="使用 '哈希表 - 从哈希表提取任务要求' 可以取出保存的值"
		SaveQuestItemHandle="保存任务要求 [C]"
			SaveQuestItemHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存任务要求 ",~Value
			SaveQuestItemHandleHint="使用 '哈希表 - 从哈希表提取任务要求' 可以取出保存的值"
		SaveDefeatConditionHandleBJ="保存失败条件"
			SaveDefeatConditionHandleBJ="保存失败条件 ",~Defeatcondition," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveDefeatConditionHandleBJHint="使用 '哈希表 - 从哈希表提取失败条件' 可以取出保存的值"
		SaveDefeatConditionHandle="保存失败条件 [C]"
			SaveDefeatConditionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存失败条件 ",~Value
			SaveDefeatConditionHandleHint="使用 '哈希表 - 从哈希表提取失败条件' 可以取出保存的值"
		SaveTimerDialogHandleBJ="保存计时器窗口"
			SaveTimerDialogHandleBJ="保存计时器窗口 ",~Timerdialog," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTimerDialogHandleBJHint="使用 '哈希表 - 从哈希表提取计时器窗口' 可以取出保存的值"
		SaveTimerDialogHandle="保存计时器窗口 [C]"
			SaveTimerDialogHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存计时器窗口 ",~Value
			SaveTimerDialogHandleHint="使用 '哈希表 - 从哈希表提取计时器窗口' 可以取出保存的值"
		SaveLeaderboardHandleBJ="保存排行榜"
			SaveLeaderboardHandleBJ="保存排行榜 ",~Leaderboard," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveLeaderboardHandleBJHint="使用 '哈希表 - 从哈希表提取排行榜' 可以取出保存的值"
		SaveLeaderboardHandle="保存排行榜 [C]"
			SaveLeaderboardHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存排行榜 ",~Value
			SaveLeaderboardHandleHint="使用 '哈希表 - 从哈希表提取排行榜' 可以取出保存的值"
		SaveMultiboardHandleBJ="保存多面板"
			SaveMultiboardHandleBJ="保存多面板 ",~Multiboard," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveMultiboardHandleBJHint="使用 '哈希表 - 从哈希表提取多面板' 可以取出保存的值"
		SaveMultiboardHandle="保存多面板 [C]"
			SaveMultiboardHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存多面板 ",~Value
			SaveMultiboardHandleHint="使用 '哈希表 - 从哈希表提取多面板' 可以取出保存的值"
		SaveMultiboardItemHandleBJ="保存多面板项目"
			SaveMultiboardItemHandleBJ="保存多面板项目 ",~Multiboarditem," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveMultiboardItemHandleBJHint="使用 '哈希表 - 从哈希表提取多面板项目' 可以取出保存的值"
		SaveMultiboardItemHandle="保存多面板项目 [C]"
			SaveMultiboardItemHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存多面板项目 ",~Value
			SaveMultiboardItemHandleHint="使用 '哈希表 - 从哈希表提取多面板项目' 可以取出保存的值"
		SaveTrackableHandleBJ="保存可追踪物"
			SaveTrackableHandleBJ="保存可追踪物 ",~Trackable," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTrackableHandleBJHint="使用 '哈希表 - 从哈希表提取可追踪物' 可以取出保存的值"
		SaveTrackableHandle="保存可追踪物 [C]"
			SaveTrackableHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存可追踪物 ",~Value
			SaveTrackableHandleHint="使用 '哈希表 - 从哈希表提取可追踪物' 可以取出保存的值"
		SaveGameCacheHandleBJ="保存游戏缓存"
			SaveGameCacheHandleBJ="保存游戏缓存 ",~Gamecache," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveGameCacheHandleBJHint="使用 '哈希表 - 从哈希表提取游戏缓存' 可以取出保存的值"
		SaveGameCacheHandle="保存游戏缓存 [C]"
			SaveGameCacheHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存游戏缓存 ",~Value
			SaveGameCacheHandleHint="使用 '哈希表 - 从哈希表提取游戏缓存' 可以取出保存的值"
		SaveDialogHandleBJ="保存对话框"
			SaveDialogHandleBJ="保存对话框 ",~Dialog," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveDialogHandleBJHint="使用 '哈希表 - 从哈希表提取对话框' 可以取出保存的值"
		SaveDialogHandle="保存对话框 [C]"
			SaveDialogHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存对话框 ",~Value
			SaveDialogHandleHint="使用 '哈希表 - 从哈希表提取对话框' 可以取出保存的值"
		SaveButtonHandleBJ="保存对话框按钮"
			SaveButtonHandleBJ="保存对话框按钮 ",~Button," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveButtonHandleBJHint="使用 '哈希表 - 从哈希表提取对话框按钮' 可以取出保存的值"
		SaveButtonHandle="保存对话框按钮 [C]"
			SaveButtonHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存对话框按钮 ",~Value
			SaveButtonHandleHint="使用 '哈希表 - 从哈希表提取对话框按钮' 可以取出保存的值"
		SaveTextTagHandleBJ="保存漂浮文字"
			SaveTextTagHandleBJ="保存漂浮文字 ",~Texttag," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveTextTagHandleBJHint="使用 '哈希表 - 从哈希表提取漂浮文字' 可以取出保存的值"
		SaveTextTagHandle="保存漂浮文字 [C]"
			SaveTextTagHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存漂浮文字 ",~Value
			SaveTextTagHandleHint="使用 '哈希表 - 从哈希表提取漂浮文字' 可以取出保存的值"
		SaveLightningHandleBJ="保存闪电效果"
			SaveLightningHandleBJ="保存闪电效果 ",~Lightning," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveLightningHandleBJHint="使用 '哈希表 - 从哈希表提取闪电效果' 可以取出保存的值"
		SaveLightningHandle="保存闪电效果 [C]"
			SaveLightningHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存闪电效果 ",~Value
			SaveLightningHandleHint="使用 '哈希表 - 从哈希表提取闪电效果' 可以取出保存的值"
		SaveImageHandleBJ="保存图像"
			SaveImageHandleBJ="保存图像 ",~Image," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveImageHandleBJHint="使用 '哈希表 - 从哈希表提取图像' 可以取出保存的值"
		SaveImageHandle="保存图像 [C]"
			SaveImageHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存图像 ",~Value
			SaveImageHandleHint="使用 '哈希表 - 从哈希表提取图像' 可以取出保存的值"
		SaveUbersplatHandleBJ="保存地面纹理变化"
			SaveUbersplatHandleBJ="保存地面纹理变化 ",~Ubersplat," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveUbersplatHandleBJHint="使用 '哈希表 - 从哈希表提取地面纹理变化' 可以取出保存的值"
		SaveUbersplatHandle="保存地面纹理变化 [C]"
			SaveUbersplatHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存地面纹理变化 ",~Value
			SaveUbersplatHandleHint="使用 '哈希表 - 从哈希表提取地面纹理变化' 可以取出保存的值"
		SaveFogStateHandleBJ="保存迷雾状态"
			SaveFogStateHandleBJ="保存迷雾状态 ",~Fogstate," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveFogStateHandleBJHint="使用 '哈希表 - 从哈希表提取迷雾状态' 可以取出保存的值"
		SaveFogStateHandle="保存迷雾状态 [C]"
			SaveFogStateHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存迷雾状态 ",~Value
			SaveFogStateHandleHint="使用 '哈希表 - 从哈希表提取迷雾状态' 可以取出保存的值"
		SaveFogModifierHandleBJ="保存可见度修正器"
			SaveFogModifierHandleBJ="保存可见度修正器 ",~Fogmodifier," 在子索引 ",~Value," 主索引 ",~Value," 位于 ",~Hashtable,"  之内"
			SaveFogModifierHandleBJHint="使用 '哈希表 - 从哈希表提取可见度修正器' 可以取出保存的值"
		SaveFogModifierHandle="保存可见度修正器 [C]"
			SaveFogModifierHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存可见度修正器 ",~Value
			SaveFogModifierHandleHint="使用 '哈希表 - 从哈希表提取可见度修正器' 可以取出保存的值"
		SaveHashtableHandle="保存哈希表 [C]"
			SaveHashtableHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 中保存哈希表 ",~Value
			SaveHashtableHandleHint="使用 '哈希表 - 从哈希表提取哈希表' 可以取出保存的值"
		RemoveSavedInteger="清除整数 [C]"
			RemoveSavedInteger="清除位于哈希表 ",~hashtable," 主索引 ",~Value," 子索引 ",~Value," 中保存的整数"
			RemoveSavedIntegerHint="可以清除单项数据"
		RemoveSavedReal="清除实数 [C]"
			RemoveSavedReal="清除位于哈希表 ",~hashtable," 主索引 ",~Value," 子索引 ",~Value," 中保存的实数"
			RemoveSavedRealHint="可以清除单项数据"
		RemoveSavedString="清除字符串 [C]"
			RemoveSavedString="清除位于哈希表 ",~hashtable," 主索引 ",~Value," 子索引 ",~Value," 中保存的字符串"
			RemoveSavedStringHint="可以清除单项数据"
		RemoveSavedBoolean="清除布尔 [C]"
			RemoveSavedBoolean="清除位于哈希表 ",~hashtable," 主索引 ",~Value," 子索引 ",~Value," 中保存的布尔"
			RemoveSavedBooleanHint="可以清除单项数据"
		RemoveSavedHandle="清除Handle [C]"
			RemoveSavedHandle="清除位于哈希表 ",~hashtable," 主索引 ",~Value," 子索引 ",~Value," 中保存的Handle"
			RemoveSavedHandleHint="可以清除单项数据"
		FlushParentHashtableBJ="清空哈希表"
			FlushParentHashtableBJ="清空 ",~Hashtable
			FlushParentHashtableBJHint="清空哈希表所有数据"
		FlushParentHashtable="清空哈希表 [C]"
			FlushParentHashtable="清空 ",~Hashtable
			FlushParentHashtableHint="清空哈希表所有数据"
		FlushChildHashtableBJ="清空哈希表主索引"
			FlushChildHashtableBJ="清空 ",~Value," 位于 ",~Hashtable,"  之内"
			FlushChildHashtableBJHint="清空哈希表主索引下的所有数据"
		FlushChildHashtable="清空哈希表主索引 [C]"
			FlushChildHashtable="清空 ",~Hashtable," 中位于主索引 ",~Value,"  之内的所有数据"
			FlushChildHashtableHint="清空哈希表主索引下的所有数据"
	// Hero actions
		SelectHeroSkill="学习技能"
			SelectHeroSkill="命令 ",~Hero," 学习技能 ",~Skill
			SelectHeroSkillHint="只有当英雄有剩余技能点时有效."
		SetHeroLevelNT="提升等级 [C]"
			SetHeroLevelNT="提升 ",~Hero," 的英雄等级到 ",~Level," , ",~Show/Hide," 升级动画"
			SetHeroLevelNTHint="只能提升等级. 英雄经验将重置为该等级的初始值."
		UnitStripHeroLevel="降低等级 [C]"
			UnitStripHeroLevel="降低 ",~Hero," ",~Level," 个等级"
			UnitStripHeroLevelHint="只能降低等级. 英雄经验将重置为该等级的初始值."
		SetHeroLevel="设置等级"
			SetHeroLevel="设置 ",~Hero," 的英雄等级为 ",~Level," , ",~Show/Hide," 升级动画"
			SetHeroLevelHint="如果等级有变动,英雄经验将重置为该等级的初始值."
		SetHeroXP="设置经验值"
			SetHeroXP="设置 ",~Hero," 的经验值为 ",~Quantity," , ",~Show/Hide," 升级动画"
			SetHeroXPHint="经验值不能倒退."
		AddHeroXP="增加经验值 [C]"
			AddHeroXP="增加 ",~Hero," ",~Quantity," 点经验值, ",~Show/Hide," 升级动画"
			AddHeroXPHint="经验值不能倒退."
		AddHeroXPSwapped="增加经验值"
			AddHeroXPSwapped="增加 ",~Quantity," 经验值给 ",~Hero," , ",~Show/Hide," 升级动画"
			AddHeroXPSwappedHint="经验值不能倒退."
		SuspendHeroXP="允许/禁止经验获取 [C]"
			SuspendHeroXP=~Enable/Disable," ",~Hero," 的经验获取"
			SuspendHeroXPHint=
		SuspendHeroXPBJ="允许/禁止经验获取"
			SuspendHeroXPBJ=~Enable/Disable," ",~Hero," 的经验获取"
			SuspendHeroXPBJHint=
		SetPlayerHandicapXP="设置经验获得率 [C]"
			SetPlayerHandicapXP="设置 ",~Player," 的经验获得率为正常的 ",~Value," 倍"
			SetPlayerHandicapXPHint=
		SetPlayerHandicapXPBJ="设置经验获得率"
			SetPlayerHandicapXPBJ="设置 ",~Player," 的经验获得率为 ",~Percent,"%"
			SetPlayerHandicapXPBJHint=
		ReviveHero="立即复活(指定坐标) [C]"
			ReviveHero="立即复活 ",~英雄," 在(",~X,",",~Y,"), ",~Show/Hide," 复活动画"
			ReviveHeroHint="如果英雄正在祭坛复活,则会退回部分花费(默认为100%)."
		ReviveHeroLocEx="立即复活(指定伪点) [W]"
			ReviveHeroLocEx="立即复活 ",~英雄," 在 ",~指定伪点," , ",~Show/Hide," 复活动画"
			ReviveHeroLocExHint="如果英雄正在祭坛复活,则会退回部分花费(默认为100%).采用伪点系统,该函数自动清除伪点.无需排泄"
		ReviveHeroLoc="立即复活(指定点)"
			ReviveHeroLoc="立即复活 ",~英雄," 在 ",~指定点," , ",~Show/Hide," 复活动画"
			ReviveHeroLocHint="如果英雄正在祭坛复活,则会退回部分花费(默认为100%)."
		SetHeroStr="设置英雄力量 [C]"
			SetHeroStr="设置 ",~英雄," 的力量为 ",~Value," ,(",~Permanent,"永久奖励)"
			SetHeroStrHint="永久奖励貌似无效项,不需要理会."
		SetHeroAgi="设置英雄敏捷 [C]"
			SetHeroAgi="设置 ",~英雄," 的敏捷为 ",~Value," ,(",~Permanent,"永久奖励)"
			SetHeroAgiHint="永久奖励貌似无效项,不需要理会."
		SetHeroInt="设置英雄智力 [C]"
			SetHeroInt="设置 ",~英雄," 的智力为 ",~Value," ,(",~Permanent,"永久奖励)"
			SetHeroIntHint="永久奖励貌似无效项,不需要理会."
		ModifyHeroStat="修改英雄属性"
			ModifyHeroStat="修改 ",~Attribute," 对 ",~英雄," : ",~Modify," ",~Value," 点"
			ModifyHeroStatHint=
		UnitModifySkillPoints="添加剩余技能点 [C]"
			UnitModifySkillPoints="增加 ",~英雄," ",~Value," 点剩余技能点"
			UnitModifySkillPointsHint=
		ModifyHeroSkillPoints="修改剩余技能点"
			ModifyHeroSkillPoints="修改 ",~英雄," 的剩余技能点: ",~Modify," ",~Value," 点"
			ModifyHeroSkillPointsHint=
		SetReservedLocalHeroButtons="保留英雄图标"
			SetReservedLocalHeroButtons="为玩家保留 ",~Number," 个左上角英雄图标."
			SetReservedLocalHeroButtonsHint="因为共享单位而被控制的其他玩家英雄的图标将在保留位置之后开始显示."
		UnitAddItem="给予物品 [C]"
			UnitAddItem="给予 ",~单位," ",~物品
			UnitAddItemHint=
		UnitAddItemSwapped="给予物品"
			UnitAddItemSwapped="把 ",~物品," 给 ",~单位
			UnitAddItemSwappedHint=
		UnitAddItemByIdSwapped="创建物品给英雄"
			UnitAddItemByIdSwapped="创建 ",~物品类型," 给 ",~单位
			UnitAddItemByIdSwappedHint=
		UnitAddItemToSlotById="给予物品(指定物品栏) [C]"
			UnitAddItemToSlotById="给予 ",~单位," ",~物品类型," 并放在物品栏# ",~数值
			UnitAddItemToSlotByIdHint="注意: 物品栏编号从0-5,而不是1-6. 该动作创建的物品不被'最后创建的物品'所记录."
		UnitRemoveItemSwapped="丢弃物品(指定物品)"
			UnitRemoveItemSwapped="丢弃 ",~物品," ,从 ",~单位," 身上"
			UnitRemoveItemSwappedHint="物品将被丢弃在英雄脚下."
		UnitRemoveItemFromSlotSwapped="丢弃物品(指定物品栏)"
			UnitRemoveItemFromSlotSwapped="丢弃物品栏中第 ",~Index," 格的物品,从 ",~单位," 身上"
			UnitRemoveItemFromSlotSwappedHint="如果物品存在则会被丢弃在英雄脚下."
		UnitUseItem="使用物品(无目标)"
			UnitUseItem="命令 ",~单位," 使用 ",~物品
			UnitUseItemHint=
		UnitUseItemPoint="使用物品(指定坐标)"
			UnitUseItemPoint="命令 ",~单位," 使用 ",~物品," ,目标坐标:(",~X,",",~Y,")"
			UnitUseItemPointHint=
		UnitUseItemPointLoc="使用物品(指定点)"
			UnitUseItemPointLoc="命令 ",~单位," 使用 ",~物品," ,目标点: ",~指定点
			UnitUseItemPointLocHint=
		UnitUseItemTarget="使用物品(对单位)"
			UnitUseItemTarget="命令 ",~单位," 使用 ",~物品," ,目标: ",~单位
			UnitUseItemTargetHint=
		UnitUseItemDestructable="使用物品(对可破坏物)"
			UnitUseItemDestructable="命令 ",~单位," 使用 ",~物品," ,目标: ",~可破坏物
			UnitUseItemDestructableHint=
	// AntiCheat actions
		AntiCheatPShan="反作弊 - 检测P闪 [W]"
			AntiCheatPShan="反作弊 - 开始检测",~u
			AntiCheatPShanHint="检测出则立即重置单位位置，因检测机理，所以在单位非正常移动0.05秒内按出巡逻则会检测错误。(概率很小)。建议动态添加一部分英雄避免游戏卡。"
		AntiCheatC2I="反作弊 - 检测j文件是否被修改 [W]"
			AntiCheatC2I="反作弊 - 差值为",~整数
			AntiCheatC2IHint="(新手勿用) 1.20版本可用。差值在地图调试模式(YDWE配置)会看见，其他模式在填入错误差值或单单修改j文件会导致魔兽崩溃。每次修改地图都要更改此值。"
		AntiCheatHke="反作弊 - 反hke注入 [W]"
			AntiCheatHke="反作弊 - 注入一些无用脚本，防止hke再次注入"
			AntiCheatHkeHint="优化器优化脚本可能会导致无效。"
	// Phrevski actions
		SetDayNightModels="文明 - 设置光照模型 [W]"
			SetDayNightModels="文明 - 设置环境光照模型为",~路径,"，单位光照模型为",~路径
			SetDayNightModelsHint="模型为空时则黑"
		F2DanMu="文明 - 弹幕系统 [W]"
			F2DanMu="文明 - 弹幕马甲",~unit," 伤害来源",~u,"初末速度(",~v1,",",~v2,") 判定范围",~r,"伤害：",~d,"持续时间",~t," 物理伤害:",~b," 撞墙后消失:",~b," 撞人后消失:",~b," 无视地形:",~b," 伤害可破坏物并消失:",~b," 不分敌我",~b," 碰撞后运行触发:",~触发
			F2DanMuHint="系统 by 飞俩"
		DoubleClick="文明 - 双击选择英雄 [W]"
			DoubleClick="文明 - 英雄区域为 ",~rct,"双击后移动到(",~x,",",~y,")坐标。"
			DoubleClickHint="将中立被动的英雄放入指定区域即可。"
		InitSlkAbilitysData="文明 - 导入自定义物编技能 [W]"
			InitSlkAbilitysData="文明 - 将slk文件注入地图"
			InitSlkAbilitysDataHint="必须在物编中设置 '冲锋(技能ID: WMRu)' 的 '显示-效果-特殊' 的值，否则会在保存地图时报错。"
		WMRush="文明 - 冲锋函数 [W]"
			WMRush="文明 - 令",~单位,"向"~角度,"方向冲锋，距离为",~实数,"速度为",~实数,"伤害范围",~实数,"伤害为"~实数,"(",~d,"攻击伤害,",~d,"远程攻击).攻击类型 ",~t,"伤害类型 ",~t,"，造成伤害的单位为",~单位,"路径特效",~模型
			WMRushHint=
		CKRefresh="文明 - 万能刷野系统 [W]"
			CKRefresh="文明 - 开启",~方式,"刷野.刷怪开始时间:",~r,",刷怪周期:",~r,"野区半径",~r,",不主动攻击技能",~技能
			CKRefreshHint="原系统是CK写的。开始把中立敌对单位放在地图上，事件为初始化即可。不主动攻击技能让野怪不主动攻击，一般是-1秒的永久隐身.魔兽版本1.24"
		PlayMidi="文明 - 初始化midi音乐环境 [W]"
			PlayMidi="文明 - 加载",~库,"音色库
			PlayMidiHint="加载音色库后才能正常播放，不需要重复加载。如果你C图播放过MIDI则需要关闭白天夜晚音效."
		GetItemCostInit="文明 - 获取物品价格初始化设置 [W]"
			GetItemCostInit="文明 - 马甲商店类型",~s
			GetItemCostInitHint="马甲设置请参考演示地图.原作者:麦德三世(Renee)"
		AutoRemovePowerupItem="文明 - 开启自动排除书类泄露 [W]"
			AutoRemovePowerupItem="文明 - 排除书、神符等物品泄露"
		WMAroundSystem="文明 - 环绕单位系统 [W]"
			WMAroundSystem="文明 - 中心单位",~u,"环绕单位类型(马甲)",~m,"长轴",~a,"短轴",~b,"Z轴偏移高度",~z,"长轴与X轴夹角",~d1,"长轴与水平面夹角",~d2,"短轴与水平面夹角",~d3,".环绕周期",~T,"环绕持续时间",~t
			WMAroundSystemHint="原系统:永恒的灌水帝.若长轴=短轴,即为半径为长轴的圆.Z轴偏移,如此值为200,则环绕中心为中心单位头顶200处.长轴与X轴夹角,若此值填-1，则始终为中心单位面向角度.环绕持续时间0,则永久环绕."
		SetJassLocalVariables="设置真局部变量 [W]"
			SetJassLocalVariables="设置 {",~类型,"}",~变量名," = ",~值
			SetJassLocalVariablesHint="(不推荐新手使用)与YD逆天的模拟局部变量不同，这是封装的原版Jass局部变量，因此不与逆天局部变量互通。使用完成后会自动set null，但具体的排泄和传参需要自己完成。用法与JASS中的局部变量完全相同。"
	// Game actions
		BJDebugMsg="调试信息"
			BJDebugMsg="输出调试信息: ",~文字
			BJDebugMsgHint="对玩家发送持续60秒的信息. 一般用于地图调试. (WMUI:亲测单机局域网都会被记录在录像中.)"
		SetBackGroundMusic="设置房间背景音乐 [W]"
			SetBackGroundMusic="设置房间背景音乐为: ",~音乐路径
			SetBackGroundMusicHint="该动作能放在任意触发器内，建议在一个没有事件的触发器中执行"
		DisplayTextToPlayer="对玩家显示文本消息(自动限时) [C]"
			DisplayTextToPlayer="对 ",~玩家," 在屏幕位移(",~X,",",~Y,")处显示文本: ",~文字
			DisplayTextToPlayerHint="显示时间取决于文字长度. 位移的取值在0-1之间. 可使用'本地玩家'实现对所有玩家发送消息."
		DisplayTimedTextToPlayer="对玩家显示文本消息(指定时间) [C]"
			DisplayTimedTextToPlayer="对 ",~玩家," 在屏幕位移(",~X,",",~Y,")处显示 ",~时间," 秒的文本信息: ",~文字
			DisplayTimedTextToPlayerHint="位移的取值在0-1之间. 可使用'本地玩家 [C]'实现对所有玩家发送消息."
		DisplayTextToForce="对玩家组显示文本消息(自动限时)"
			DisplayTextToForce="对 ",~玩家组," 发送文本信息: ",~文字
			DisplayTextToForceHint="显示时间取决于文字长度."
		DisplayTimedTextToForce="对玩家组显示文本消息(指定时间)"
			DisplayTimedTextToForce="对 ",~玩家组," 发送显示 ",~Time," 秒的文本信息: ",~文字
			DisplayTimedTextToForceHint=
		ClearTextMessages="清空文本信息(所有玩家) [C]"
			ClearTextMessages="清空所有玩家屏幕上的文本信息"
			ClearTextMessagesHint=
		ClearTextMessagesBJ="清空文本信息(指定玩家组)"
			ClearTextMessagesBJ="清空 ",~玩家组," 屏幕上的文本信息"
			ClearTextMessagesBJHint=
		PauseGame="暂停/恢复游戏 [C]"
			PauseGame=~暂停/恢复," 游戏"
			PauseGameHint=
		PauseGameOn="暂停游戏"
			PauseGameOn="暂停游戏"
			PauseGameOnHint=
		PauseGameOff="恢复游戏"
			PauseGameOff="恢复游戏"
			PauseGameOffHint=
		SetGameSpeed="设定游戏速度"
			SetGameSpeed="设定游戏速度为 ",~Speed
			SetGameSpeedHint="你可以通过'游戏 - 锁定游戏速度'动作来锁定游戏速度."
		LockGameSpeedBJ="锁定游戏速度"
			LockGameSpeedBJ="锁定游戏速度"
			LockGameSpeedBJHint="使用该动作后无法改变游戏速度."
		UnlockGameSpeedBJ="解除锁定游戏速度"
			UnlockGameSpeedBJ="解除锁定游戏速度"
			UnlockGameSpeedBJHint="解除'游戏 - 锁定游戏速度'对游戏速度的锁定."
		SetMapFlag="设置地图参数"
			SetMapFlag="设置 ",~Map Flag," 为 ",~On/Off
			SetMapFlagHint=
		SetGameDifficulty="设置游戏难度 [C]"
			SetGameDifficulty="设置当前游戏难度为 ",~GameDifficulty
			SetGameDifficultyHint="游戏难度只是作为运行AI的一个参考值,没有AI的地图该功能无用."
		SetTimeOfDay="设置游戏时间"
			SetTimeOfDay="设置游戏时间为 ",~Time
			SetTimeOfDayHint="游戏时间采用24小时制."
		SetTimeOfDayScale="设置昼夜时间流逝速度 [C]"
			SetTimeOfDayScale="设置昼夜时间流逝速度为默认值的 ",~Value,"倍"
			SetTimeOfDayScaleHint="设置100%来恢复正常值. 该值并不影响游戏速度."
		SetTimeOfDayScalePercentBJ="设置昼夜时间流逝速度"
			SetTimeOfDayScalePercentBJ="设置昼夜时间流逝速度为默认值的 ",~Percent,"%"
			SetTimeOfDayScalePercentBJHint="设置100%来恢复正常值. 该值并不影响游戏速度."
		UseTimeOfDayBJ="开启/关闭 昼夜交替"
			UseTimeOfDayBJ=~On/Off," 昼夜交替"
			UseTimeOfDayBJHint=
		DoNotSaveReplay="关闭游戏录像功能 [C]"
			DoNotSaveReplay="关闭游戏录像功能"
			DoNotSaveReplayHint="游戏结束时不保存游戏录像."
		Cheat="输入作弊码 [C]"
			Cheat="输入作弊码: ",~String
			CheatHint="作弊码只在单机有效."
		ShareEverythingWithTeam="共享视野和完全控制权"
			ShareEverythingWithTeam="设置 ",~Player," 对盟友共享视野和完全控制权"
			ShareEverythingWithTeamHint="当玩家互相为盟友时才有效. 同时玩家也会获得其盟友的单位控制权."
		MakeUnitsPassiveForPlayer="设置玩家单位为中立受害单位"
			MakeUnitsPassiveForPlayer="改变 ",~Player," 所有单位为中立受害单位"
			MakeUnitsPassiveForPlayerHint="默认状态中立受害受所有玩家欺凌而不抵抗."
		CustomVictoryBJ="游戏胜利"
			CustomVictoryBJ="设置 ",~Player," 胜利(",~Show/Skip," 胜利对话框, ",~Show/Skip," 计分屏)"
			CustomVictoryBJHint="WMUI: 游戏失败和胜利不能在初始化运行"
		CustomDefeatBJ="游戏失败"
			CustomDefeatBJ="设置 ",~Player," 失败并显示失败信息: ",~文字
			CustomDefeatBJHint="WMUI: 游戏失败和胜利不能在初始化运行"
		CustomDefeatEx="游戏失败 [W]"
			CustomDefeatEx="设置 ",~Player," 失败并显示失败信息: ",~文字
			CustomDefeatExHint="游戏失败和胜利不能在初始化运行,如果你觉得原版失败太卡可以用这个。"
		SetNextLevelBJ="设置下一关卡"
			SetNextLevelBJ="设置下一关卡为 ",~Level
			SetNextLevelBJHint="设置游戏结束后的下一关卡."
		ChangeLevel="切换关卡 [C]"
			ChangeLevel="切换到关卡: ",~Filename," (",~Show/Skip," 计分屏)"
			ChangeLevelHint=
		SaveGame="保存进度 [C]"
			SaveGame="保存游戏进度为: ",~Filename
			SaveGameHint=
		LoadGameBJ="读取进度"
			LoadGameBJ="读取游戏进度 ",~Filename," (",~Show/Skip," 计分屏)"
			LoadGameBJHint=
		SaveAndLoadGameBJ="保存并读取进度"
			SaveAndLoadGameBJ="保存游戏进度为: ",~Filename," 并读取进度: ",~Filename," (",~Show/Skip," 计分屏)"
			SaveAndLoadGameBJHint=
		SaveAndChangeLevelBJ="保存并切换关卡"
			SaveAndChangeLevelBJ="保存游戏进度为: ",~Filename," 并切换到关卡: ",~Filename," (",~Show/Skip," 计分屏)"
			SaveAndChangeLevelBJHint=
		RenameSaveDirectoryBJ="重命名存档文件夹"
			RenameSaveDirectoryBJ="更改 ",~源文件夹," 的名字为 ",~目标文件夹
			RenameSaveDirectoryBJHint=
		RemoveSaveDirectoryBJ="删除存档文件夹"
			RemoveSaveDirectoryBJ="删除 ",~文件夹
			RemoveSaveDirectoryBJHint="文件夹内的内容都会被删除."
		CopySaveGameBJ="复制存档文件"
			CopySaveGameBJ="复制 ",~源文件," 并保存为 ",~目标文件
			CopySaveGameBJHint="该动作只在响应'保存/读取进度'时有效,每个事件中最多能用16次."
		SetCampaignMenuRaceBJ="设置战役背景"
			SetCampaignMenuRaceBJ="设置战役背景为 ",~Campaign
			SetCampaignMenuRaceBJHint=
		SetMissionAvailableBJ="允许/禁止 关卡"
			SetMissionAvailableBJ=~Enable/Disable," ",~Mission
			SetMissionAvailableBJHint=
		SetCampaignAvailableBJ="允许/禁止 战役"
			SetCampaignAvailableBJ=~Enable/Disable,"  ",~Campaign
			SetCampaignAvailableBJHint=
		SetCinematicAvailableBJ="允许/禁止 开场电影"
			SetCinematicAvailableBJ=~Enable/Disable," ",~Cinematic
			SetCinematicAvailableBJHint=
		ShowCustomCampaignButton="显示/隐藏 自定义战役按钮"
			ShowCustomCampaignButton=~Show/Hide," 自定义战役按钮 #",~Number
			ShowCustomCampaignButtonHint=
		DisableRestartMission="禁用 重新开始任务按钮"
			DisableRestartMission="设置 重新开始任务按钮可以点击为 ",~
			DisableRestartMissionHint="当单人游戏时，可以设置重新开始任务按钮能否允许点击。"
		SetAllyColorFilterState="设置联盟颜色显示"
			SetAllyColorFilterState="设置联盟颜色显示状态为 ",~State
			SetAllyColorFilterStateHint="0为不开启. 1为小地图显示. 2为小地图和游戏都显示. 相当于游戏中Alt+A功能."
		SetCreepCampFilterState="设置小地图中立生物显示"
			SetCreepCampFilterState="小地图 "~Show/Hide," 中立生物"
			SetCreepCampFilterStateHint="相当于游戏中Alt+R功能."
		EnableMinimapFilterButtons="允许/禁用小地图按钮"
			EnableMinimapFilterButtons=~Enable/Disable," 联盟颜色显示按钮, ",~Enable/Disable," 中立生物显示按钮"
			EnableMinimapFilterButtonsHint=
		EnableSelect="允许/禁用选择"
			EnableSelect=~Enable/Disable," 选择和取消选择功能 (",~Enable/Disable," 显示选择圈)"
			EnableSelectHint="禁用选择后仍可以通过触发来选择物体. 只有允许选择功能时才会显示选择圈."
		EnableDragSelect="允许/禁用框选"
			EnableDragSelect=~Enable/Disable," 框选功能 (",~Enable/Disable," 显示选择框)"
			EnableDragSelectHint=
		EnablePreSelect="允许/禁用预选"
			EnablePreSelect=~Enable/Disable," 预选功能 (",~Enable/Disable," 显示预选圈,生命槽,物体信息)"
			EnablePreSelectHint=
		ForceUIKeyBJ="强制按键"
			ForceUIKeyBJ="命令 ",~Player," 按下 ",~Key," 键"
			ForceUIKeyBJHint=
		ForceUICancelBJ="强制按Esc键"
			ForceUICancelBJ="命令 ",~Player," 按下Esc键"
			ForceUICancelBJHint=
	// Game Cache actions
		InitGameCacheBJ="创建游戏缓存"
			InitGameCacheBJ="创建游戏缓存,使用文件名: ",~Filename
			InitGameCacheBJHint=
		SaveGameCacheBJ="本地保存游戏缓存"
			SaveGameCacheBJ="保存 ",~Game Cache," 到本地硬盘"
			SaveGameCacheBJHint="只对单机游戏有效,保存缓存数据到本地硬盘,主要用来实现战役关卡间的数据传递."
		StoreUnitBJ="记录单位"
			StoreUnitBJ="记录 ",~单位," ,使用名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache
			StoreUnitBJHint="使用'游戏缓存 - 读取单位'来读取该数值. 名称和类别名不能包含空格."
		StoreReal="记录实数"
			StoreReal="缓存: ",~Game Cache,"  类别名: ",~Category," 使用名称: ",~文字," 记录: ",~实数
			StoreRealHint="使用'游戏缓存 - 读取实数'来读取该数值. 名称和类别名不能包含空格."
		StoreInteger="记录整数"
			StoreInteger="缓存: ",~Game Cache,"  类别名: ",~Category," 使用名称: ",~文字," 记录: ",~整数
			StoreIntegerHint="使用'游戏缓存 - 读取整数'来读取该数值. 名称和类别名不能包含空格."
		StoreBoolean="记录布尔值"
			StoreBoolean="缓存: ",~Game Cache,"  类别名: ",~Category," 使用名称: ",~文字," 记录: ",~布尔值
			StoreBooleanHint="使用'游戏缓存 - 读取布尔值'来读取该值. 名称和类别名不能包含空格."
		StoreString="记录字符串"
			StoreString="缓存: ",~Game Cache,"  类别名: ",~Category," 使用名称: ",~文字," 记录: ",~字符串
			StoreStringHint="使用'游戏缓存 - 读取字符串'来读取该值. 名称和类别名不能包含空格."
		RestoreUnitLocFacingAngleBJ="读取单位(面向角度)"
			RestoreUnitLocFacingAngleBJ="从缓存读取单位, 名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache," ,所属玩家: ",~Player," 创建点: ",~点," 面向角度: ",~Angle
			RestoreUnitLocFacingAngleBJHint="使用'最后读取的单位'来获取该单位. 如果不存在该缓存数据,则'最后读取的单位'将被设为null."
		RestoreUnitLocFacingPointBJ="读取单位(面向点)"
			RestoreUnitLocFacingPointBJ="从缓存读取单位, 名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache," ,所属玩家: ",~Player," 创建点: ",~点," 面向: ",~指定点
			RestoreUnitLocFacingPointBJHint="使用'最后读取的单位'来获取该单位. 如果不存在该缓存数据,则'最后读取的单位'将被设为null."
		ReloadGameCachesFromDisk="读取本地缓存数据"
			ReloadGameCachesFromDisk="从本地硬盘读取缓存数据"
			ReloadGameCachesFromDiskHint="只对单机游戏有效,从本地硬盘读取缓存数据,主要用来实现战役关卡间的数据传递."
		FlushGameCacheBJ="删除缓存"
			FlushGameCacheBJ="删除 ",~GameCache
			FlushGameCacheBJHint="删除并清空该缓存的所有数据."
		FlushStoredMission="删除类别"
			FlushStoredMission="删除缓存 ",~GameCache," 中 ",~Category," 类别"
			FlushStoredMissionHint="清空该类别下的所有缓存数据."
	// Melee Game actions
		MeleeStartingVisibility="使用对战昼夜设置"
			MeleeStartingVisibility="使用对战昼夜设置"
			MeleeStartingVisibilityHint=
		MeleeStartingHeroLimit="使用对战英雄限制"
			MeleeStartingHeroLimit="使用对战英雄限制"
			MeleeStartingHeroLimitHint="每个对战英雄只能建造1个. 最大英雄数量为3."
		MeleeGrantHeroItems="英雄初始物品"
			MeleeGrantHeroItems="给首发英雄一个回城卷轴"
			MeleeGrantHeroItemsHint=
		MeleeStartingResources="设置初始资源"
			MeleeStartingResources="设置初始资源"
			MeleeStartingResourcesHint=
		MeleeClearExcessUnits="删除多余单位"
			MeleeClearExcessUnits="删除已使用开始点附近的中立生物"
			MeleeClearExcessUnitsHint=
		MeleeStartingUnits="创建初始单位"
			MeleeStartingUnits="创建对战初始单位"
			MeleeStartingUnitsHint=
		MeleeStartingAI="运行AI"
			MeleeStartingAI="对电脑玩家运行对战AI脚本"
			MeleeStartingAIHint="动作运行之前玩家要有初始单位和资源."
		MeleeInitVictoryDefeat="强制胜利/失败条件"
			MeleeInitVictoryDefeat="强制使用对战胜利/失败条件"
			MeleeInitVictoryDefeatHint="动作运行之前玩家要有单位."
		MeleeStartingUnitsForPlayer="创建初始单位(指定玩家)"
			MeleeStartingUnitsForPlayer="创建 ",~Race," 的对战初始单位给 ",~Player," 在 ",~指定点," (",~Include/Exclude," 英雄)"
			MeleeStartingUnitsForPlayerHint=
	// Neutral Building actions
		AddResourceAmountBJ="增加黄金储量"
			AddResourceAmountBJ="增加 ",~Quantity," 黄金储量给 ",~金矿
			AddResourceAmountBJHint="使用负数来减少黄金储量."
		SetResourceAmount="设置黄金储量"
			SetResourceAmount="设置 ",~金矿," 的黄金储量为 ",~Quantity
			SetResourceAmountHint=
		BlightGoldMineForPlayer="创建不死族金矿(立即)"
			BlightGoldMineForPlayer="将 ",~金矿," 变为 ",~Player," 的不死族金矿"
			BlightGoldMineForPlayerHint="金矿的储金量不会改变."
		WaygateActivateBJ="启用/禁用 传送门"
			WaygateActivateBJ=~Enable/Disable," ",~传送门
			WaygateActivateBJHint=
		WaygateSetDestination="设置传送门目的坐标 [C]"
			WaygateSetDestination="设置 ",~传送门," 的目的地为(",~X,",",~Y,")"
			WaygateSetDestinationHint=
		WaygateSetDestinationLocBJ="设置传送门目的点"
			WaygateSetDestinationLocBJ="设置 ",~传送门," 的目的地为 ",~Target
			WaygateSetDestinationLocBJHint=
		SetAltMinimapIcon="设置小地图特殊标志"
			SetAltMinimapIcon="设置小地图特殊标志为 ",~Image
			SetAltMinimapIconHint="必须使用16x16的图像."
		UnitSetUsesAltIconBJ="开启/关闭 小地图特殊标志"
			UnitSetUsesAltIconBJ=~On/Off," ",~单位," 的小地图特殊标志"
			UnitSetUsesAltIconBJHint="使用'中立建筑 - 设置小地图特殊标志'动作来设置显示的标志. 默认为中立建筑标志."
		AddItemToStockBJ="添加物品(指定市场)"
			AddItemToStockBJ="添加 ",~物品类型," 到 ",~Marketplace," 并设置库存量: ",~Count," 最大库存量: ",~Max
			AddItemToStockBJHint="只影响有'出售物品'技能的单位."
		AddItemToAllStock="添加物品(所有市场)"
			AddItemToAllStock="添加 ",~物品类型," 到所有市场并设置库存量: ",~Count," 最大库存量: ",~Max
			AddItemToAllStockHint="影响所有拥有'出售物品'技能的单位."
		AddUnitToStockBJ="添加单位(指定市场)"
			AddUnitToStockBJ="添加 ",~单位类型," 到 ",~Marketplace," 并设置库存量: ",~Count," 最大库存量: ",~Max
			AddUnitToStockBJHint="只影响有'出售单位'技能的单位."
		AddUnitToAllStock="添加单位(所有市场)"
			AddUnitToAllStock="添加 ",~单位类型," 到所有市场并设置库存量: ",~Count," 最大库存量: ",~Max
			AddUnitToAllStockHint="影响所有拥有'出售单位'技能的单位."
		RemoveItemFromStockBJ="删除物品(指定市场)"
			RemoveItemFromStockBJ="删除 ",~物品类型," 从 ",~Marketplace
			RemoveItemFromStockBJHint="只影响有'出售物品'技能的单位"
		RemoveItemFromAllStock="删除物品(所有市场)"
			RemoveItemFromAllStock="删除 ",~物品类型," 从所有市场"
			RemoveItemFromAllStockHint="影响所有拥有'出售物品'技能的单位."
		RemoveUnitFromStockBJ="删除单位(指定市场)"
			RemoveUnitFromStockBJ="删除 ",~单位类型," 从 ",~Marketplace
			RemoveUnitFromStockBJHint="只影响有'出售单位'技能的单位."
		RemoveUnitFromAllStock="删除单位(所有市场)"
			RemoveUnitFromAllStock="删除 ",~单位类型," 从所有市场"
			RemoveUnitFromAllStockHint="影响所有拥有'出售单位'技能的单位."
		SetItemTypeSlots="限制物品种类(指定市场)"
			SetItemTypeSlots="限制 ",~Marketplace," 的可出售物品种类数为 ",~Quantity
			SetItemTypeSlotsHint="只影响有'出售物品'技能的单位."
		SetAllItemTypeSlots="限制物品种类(所有市场)"
			SetAllItemTypeSlots="限制所有市场的可出售物品种类数为 ",~Quantity
			SetAllItemTypeSlotsHint="影响所有拥有'出售物品'技能的单位."
		SetUnitTypeSlots="限制单位种类(指定市场)"
			SetUnitTypeSlots="限制 ",~Marketplace," 的可出售单位种类数为 ",~Quantity
			SetUnitTypeSlotsHint="只影响有'出售单位'技能的单位."
		SetAllUnitTypeSlots="限制单位种类(所有市场)"
			SetAllUnitTypeSlots="限制所有市场的可出售单位种类数为 ",~Quantity
			SetAllUnitTypeSlotsHint="影响所有拥有'出售单位'技能的单位."
	// JAPI
		YDWESetUnitAbilityState="设置技能属性 [JAPI] [Y]"
			YDWESetUnitAbilityState="设置 ",~单位," 的 ",~技能," 的 ",~状态," 为 ",~Value
			YDWESetUnitAbilityStateHint="WMUI: JAPI函数需要JAPI环境，因此慎用！"
		YDWESetUnitAbilityDataInteger="设置技能数据 (整数) [JAPI] [Y]"
			YDWESetUnitAbilityDataInteger="设置 ",~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据," 为 ",~Value
			YDWESetUnitAbilityDataIntegerHint="WMUI: JAPI函数需要JAPI环境，因此慎用！"
		YDWESetUnitAbilityDataReal="设置技能数据 (实数) [JAPI] [Y]"
			YDWESetUnitAbilityDataReal="设置 ",~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据," 为 ",~Value
			YDWESetUnitAbilityDataRealHint="数据A~数据I也就是物体编辑器里按Ctrl+D后看到的DataA~DataI"
		YDWESetUnitAbilityDataString="设置技能数据 (字符串) [JAPI] [Y]"
			YDWESetUnitAbilityDataString="设置 ",~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据," 为 ",~Value
			YDWESetUnitAbilityDataStringHint="JAPI函数需要JAPI环境，因此慎用！"
		YDWEUnitTransform="单位变身 [JAPI] [Y]"
			YDWEUnitTransform=~单位," ",~技能,"为 ",~目标单位
			YDWEUnitTransformHint="技能请填恶魔猎手的变身<AEme>或其复制品"
		YDWEUnitAddStun="单位添加晕眩 [JAPI] [Y]"
			YDWEUnitAddStun=~单位," 添加晕眩"
			YDWEUnitAddStunHint=""
		YDWEUnitRemoveStun="单位移除晕眩 [JAPI] [Y]"
			YDWEUnitRemoveStun=~单位," 移除晕眩"
			YDWEUnitRemoveStunHint="别用来移风暴之锤之类的晕眩。因为它只会移除晕眩并不会移除晕眩的buff。"
		YDWESetEventDamage="设置伤害值 [JAPI] [Y]"
			YDWESetEventDamage="设置单位所受伤害为 ",~伤害值
			YDWESetEventDamageHint="修改伤害事件里的伤害值，不能在等待之后使用。"
		YDWERHSetGameWinner="设置联盟胜利 [JAPI] [Y]"
			YDWERHSetGameWinner="设置队伍(",~整数,")获胜"
			YDWERHSetGameWinnerHint="队伍1的ID为0，队伍2的ID为1。"
		YDWERecordSetTitle="服务器存档-设置平台积分项名称 [JAPI] [Y]"
			YDWERecordSetTitle="服务器存档，平台界面上第",~整数,"个名称为〖",~战斗力,"〗"
			YDWERecordSetTitleHint="11平台RPG积分是用玩家服务器存档来模拟，这里可以设置需要显示在平台界面上的积分项名字，最多可显示8个积分项，每个积分项名字不超过3个汉字。"
		YDWERecordSetI="服务器存档-设置玩家存档数据 [JAPI] [Y]"
			YDWERecordSetI="服务器存档，",~玩家,"的〖",~战斗力,"〗=",~整数
			YDWERecordSetIHint="设置玩家服务器存档里某个目录下的数据，如设置玩家一的战斗力为5。"
		YDWERecordSave="服务器存档-保存玩家存档数据 [JAPI] [Y]"
			YDWERecordSave="服务器存档，保存",~玩家,"所有数据"
			YDWERecordSaveHint="服务器存档数据必须保存后才能生效。"
		YDWERecordClear="服务器存档-清空玩家存档数据 [JAPI] [Y]"
			YDWERecordClear="服务器存档，清空",~玩家,"所有数据"
			YDWERecordClearHint="由于每个玩家最多只能存储100条左右的数据，假如超过上限，建议使用此功能清空全部数据，然后重新保存有用的数据。"
		YDWERPGSetKey="RPG积分-设置玩家积分数据 [JAPI] [Y]"
			YDWERPGSetKey="RPG积分，",~玩家,"的〖",~战斗力,"〗= ",~整数
			YDWERPGSetKeyHint="修改积分数据，覆盖型。"
		YDWERPGAddKey="RPG积分-增加玩家积分数据 [JAPI] [Y]"
			YDWERPGAddKey="RPG积分，",~玩家,"的〖",~战斗力,"〗+= ",~整数
			YDWERPGAddKeyHint="修改积分数据，累加型。名字需要是xx+1的形式，1表示一局这项最多可以增加的值。注意设置合理的值来避免刷分。"
		YDWERPGGameEnd="RPG积分-游戏结束 [JAPI] [Y]"
			YDWERPGGameEnd="RPG积分，游戏结束"
			YDWERPGGameEndHint="游戏结束，开始算分"
		YDWEDisplayChat="模拟玩家聊天 [JAPI] [Y]"
			YDWEDisplayChat="模拟 ",~Player," 在 ",~频道," 发言: ",~文字
			YDWEDisplayChatHint="WMUI: JAPI函数需要JAPI环境，因此慎用！"
		YDWESetItemDataString="设置物品数据 (字符串) [JAPI] [Y]"
			YDWESetItemDataString="设置 ",~物品," 的 ",~数据," 为 ",~Value
			YDWESetItemDataStringHint=""
	// Obsolete actions
		YDWEMemoryLeakHelperMapIsOpenMemoryLeakHelper="自动排泄系统-开启系统自动排泄功能<Mr.Malte制作>"
			YDWEMemoryLeakHelperMapIsOpenMemoryLeakHelper="设置系统自动排泄功能开启 ",~false
			YDWEMemoryLeakHelperMapIsOpenMemoryLeakHelperHint="自动排泄系统从收集到的反馈来看不是很理想，请尽量不要使用它。"
		YDWEMemoryLeakHelperDisplayLeaks="自动排泄系统-显示泄露<Mr.Malte制作>"
			YDWEMemoryLeakHelperDisplayLeaks="显示点、单位组和特效泄露的数目"
			YDWEMemoryLeakHelperDisplayLeaksHint="自动排泄系统从收集到的反馈来看不是很理想，请尽量不要使用它。"
		YDWEMemoryLeakHelperProtectLastCaughtHandle="自动排泄系统-保护最后生成的句柄<Mr.Malte制作>"
			YDWEMemoryLeakHelperProtectLastCaughtHandle="保护最后生成的点、单位组和特效句柄，使其不被系统自动清除"
			YDWEMemoryLeakHelperProtectLastCaughtHandleHint="自动排泄系统从收集到的反馈来看不是很理想，请尽量不要使用它。"
		YDWEMemoryLeakHelperProtectLocation="自动排泄系统-保护-点<Mr.Malte制作>"
			YDWEMemoryLeakHelperProtectLocation="保护点 ",~点,"，使其不被系统自动清除"
			YDWEMemoryLeakHelperProtectLocationHint="自动排泄系统从收集到的反馈来看不是很理想，请尽量不要使用它。"
		YDWEMemoryLeakHelperProtectGroup="自动排泄系统-保护-单位组<Mr.Malte制作>"
			YDWEMemoryLeakHelperProtectGroup="保护单位组 ",~单位组,"，使其不被系统自动清除"
			YDWEMemoryLeakHelperProtectGroupHint="自动排泄系统从收集到的反馈来看不是很理想，请尽量不要使用它。"
		YDWEMemoryLeakHelperProtectEffect="自动排泄系统-保护-特效<Mr.Malte制作>"
			YDWEMemoryLeakHelperProtectEffect="保护特效 ",~特效,"，使其不被系统自动清除"
			YDWEMemoryLeakHelperProtectEffectHint="自动排泄系统从收集到的反馈来看不是很理想，请尽量不要使用它。"
		StoreRealBJ="记录实数"
			StoreRealBJ="记录 ",~实数," ,使用名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache
			StoreRealBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		StoreIntegerBJ="记录整数"
			StoreIntegerBJ="记录 ",~整数," ,使用名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache
			StoreIntegerBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		StoreBooleanBJ="记录布尔值"
			StoreBooleanBJ="记录 ",~布尔值," ,使用名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache
			StoreBooleanBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		StoreStringBJ="记录字符串"
			StoreStringBJ="记录 ",~字符串," ,使用名称: ",~文字," 类别名: ",~Category," 缓存: ",~Game Cache
			StoreStringBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		FlushGameCache="删除缓存 [C]"
			FlushGameCache="删除 ",~GameCache
			FlushGameCacheHint="删除并清空该缓存的所有数据.和原版UI完全一致，但却不能兼容原版UI，它的存在完全是在添乱啊"
		FlushStoredMissionBJ="删除类别"
			FlushStoredMissionBJ="删除类别 ",~Category," 在缓存 ",~GameCache," 中"
			FlushStoredMissionBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
[TriggerCallStrings]
	// XYWE
		XYSplitLine_TriggerCalls_1="------------------------------------ JAPI"
			XYSplitLine_TriggerCalls_1="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		XYSplitLine_TriggerCalls_2="------------------------------------ 废弃 / 重复 / 不推荐"
			XYSplitLine_TriggerCalls_2="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		XYSplitLine_TriggerCalls_3="------------------------------------ 哈希表"
			XYSplitLine_TriggerCalls_3="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		XYSplitLine_TriggerCalls_4="------------------------------------"
			XYSplitLine_TriggerCalls_4="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		XYSplitLine_TriggerCalls_5="------------------------------------ JAPI"
			XYSplitLine_TriggerCalls_5="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		XYSplitLine_TriggerCalls_6="------------------------------------ JAPI"
			XYSplitLine_TriggerCalls_6="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
		XYSplitLine_TriggerCalls_7="------------------------------------ JAPI"
			XYSplitLine_TriggerCalls_7="XYWE：这是一个分割线，禁止使用，否则会在保存时报错"
	// unWE
		unWEUnitInventoryCountByType="持有物品数量 (指定类型) [U]"
			unWEUnitInventoryCountByType=~单位," 所持有的 "~物品类型," 数量"
			unWEUnitInventoryCountByTypeHint=
		unWEOperatorRI="算术运算 [U]"
			unWEOperatorRI=~Value," ",~运算符," ",~Value
		unWEGetLastCreatedDummy="最后创建的施法傀儡 [U]"
			unWEGetLastCreatedDummy="施法傀儡"
			unWEGetLastCreatedDummyHint="最后一个使用'单位 - 创建施法傀儡'动作创建的单位"
		unWELoadTriggerDataUnit="获取自定义事件单位参数 [U]"
			unWELoadTriggerDataUnit=~字符串
			unWELoadTriggerDataUnitHint=
	// DZAPI
		DzAPI_Map_GetMapLevel=获取玩家地图等级 [DZ]
			DzAPI_Map_GetMapLevel="获取 ",~whichPlayer," 的地图等级"
			DzAPI_Map_GetMapLevelHint="(只能在网易对战平台使用)获取玩家地图等级【RPG大厅限定】"
		DzAPI_Map_GetGameStartTime=获取地图开始时的时间 [DZ]
			DzAPI_Map_GetGameStartTime="获取地图开始时的时间"
			DzAPI_Map_GetGameStartTimeHint="(只能在网易对战平台使用)采用的是UNIX时间戳格式，如果需要转换为时间(字符串)，使用 'S 时间 - 转换时间戳为时间 [X]'"
		DzAPI_Map_GetStoredBoolean=获取服务器存储的布尔值 [DZ]
			DzAPI_Map_GetStoredBoolean="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的布尔值"
			DzAPI_Map_GetStoredBooleanHint="(只能在网易对战平台使用)"
		DzAPI_Map_GetStoredInteger=获取服务器存储的整数 [DZ]
			DzAPI_Map_GetStoredInteger="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的整数."
			DzAPI_Map_GetStoredIntegerHint="(只能在网易对战平台使用)"
		DzAPI_Map_GetStoredReal=获取服务器存储的实数 [DZ]
			DzAPI_Map_GetStoredReal="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的实数"
			DzAPI_Map_GetStoredRealHint="(只能在网易对战平台使用)"
		DzAPI_Map_GetStoredString=获取服务器存储的字符串 [DZ]
			DzAPI_Map_GetStoredString="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的字符串"
			DzAPI_Map_GetStoredStringHint="(只能在网易对战平台使用)"
		DzAPI_Map_GetStoredUnitId=获取服务器存储的单位类型 [DZ]
			DzAPI_Map_GetStoredUnitId="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的单位类型"
			DzAPI_Map_GetStoredUnitIdHint="(只能在网易对战平台使用)"
		DzAPI_Map_GetStoredAbilityId=获取服务器存储的技能类型 [DZ]
			DzAPI_Map_GetStoredAbilityId="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的技能类型"
			DzAPI_Map_GetStoredAbilityIdHint="(只能在网易对战平台使用)"
		DzAPI_Map_GetStoredItemId=获取服务器存储的物品类型 [DZ]
			DzAPI_Map_GetStoredItemId="获取 ",~whichPlayer," 数据名称: ",~key," 里存储的物品类型"
			DzAPI_Map_GetStoredItemIdHint="(只能在网易对战平台使用)"
		DzAPI_Map_IsRPGLobby=判断当前地图是否rpg大厅来的 [DZ]
			DzAPI_Map_IsRPGLobby="判断当前地图是否rpg大厅来的"
			DzAPI_Map_IsRPGLobbyHint="(只能在网易对战平台使用)是rpg大厅地图会返回true"
	// Condition - YDWE - Get Local Variable
		YDWEGetLocalVariableBoolean="局部变量 [Y]"
			YDWEGetLocalVariableBoolean="local_",~bl
			YDWEGetLocalVariableBooleanHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableBooleanArray="局部变量数组 [Y]"
			YDWEGetLocalVariableBooleanArray="local_",~bl,"[",~index,"]"
			YDWEGetLocalVariableBooleanArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableInteger="局部变量 [Y]"
			YDWEGetLocalVariableInteger="local_",~i
			YDWEGetLocalVariableIntegerHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableIntegerArray="局部变量数组 [Y]"
			YDWEGetLocalVariableIntegerArray="local_",~i,"[",~index,"]"
			YDWEGetLocalVariableIntegerArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableReal="局部变量 [Y]"
			YDWEGetLocalVariableReal="local_",~R
			YDWEGetLocalVariableRealHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableRealArray="局部变量数组 [Y]"
			YDWEGetLocalVariableRealArray="local_",~R,"[",~index,"]"
			YDWEGetLocalVariableRealArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableString="局部变量 [Y]"
			YDWEGetLocalVariableString="local_",~str
			YDWEGetLocalVariableStringHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableStringArray="局部变量数组 [Y]"
			YDWEGetLocalVariableStringArray="local_",~str,"[",~index,"]"
			YDWEGetLocalVariableStringArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableLocation="局部变量 [Y]"
			YDWEGetLocalVariableLocation="local_",~point
			YDWEGetLocalVariableLocationHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableLocationArray="局部变量数组 [Y]"
			YDWEGetLocalVariableLocationArray="local_",~point,"[",~index,"]"
			YDWEGetLocalVariableLocationArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableRect="局部变量 [Y]"
			YDWEGetLocalVariableRect="local_",~rt
			YDWEGetLocalVariableRectpHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableRectArray="局部变量数组 [Y]"
			YDWEGetLocalVariableRectArray="local_",~rt,"[",~index,"]"
			YDWEGetLocalVariableRectArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableUnit="局部变量 [Y]"
			YDWEGetLocalVariableUnit="local_",~u
			YDWEGetLocalVariableUnitHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableUnitArray="局部变量数组 [Y]"
			YDWEGetLocalVariableUnitArray="local_",~u,"[",~index,"]"
			YDWEGetLocalVariableUnitArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableUnitID="局部变量 [Y]"
			YDWEGetLocalVariableUnitID="local_",~uid
			YDWEGetLocalVariableUnitIDHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableUnitIDArray="局部变量数组 [Y]"
			YDWEGetLocalVariableUnitIDArray="local_",~uid,"[",~index,"]"
			YDWEGetLocalVariableUnitIDArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableItem="局部变量 [Y]"
			YDWEGetLocalVariableItem="local_",~it
			YDWEGetLocalVariableItemHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableItemArray="局部变量数组 [Y]"
			YDWEGetLocalVariableItemArray="local_",~it,"[",~index,"]"
			YDWEGetLocalVariableItemArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableItemID="局部变量 [Y]"
			YDWEGetLocalVariableItemID="local_",~itid
			YDWEGetLocalVariableItemIDHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableItemIDArray="局部变量数组 [Y]"
			YDWEGetLocalVariableItemIDArray="local_",~itid,"[",~index,"]"
			YDWEGetLocalVariableItemIDArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableAbilityID="局部变量 [Y]"
			YDWEGetLocalVariableAbilityID="local_",~abid
			YDWEGetLocalVariableAbilityIDHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableAbilityIDArray="局部变量数组 [Y]"
			YDWEGetLocalVariableAbilityIDArray="local_",~abid,"[",~index,"]"
			YDWEGetLocalVariableAbilityIDArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableGroup="局部变量 [Y]"
			YDWEGetLocalVariableGroup="local_",~g
			YDWEGetLocalVariableGroupHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableGroupArray="局部变量数组 [Y]"
			YDWEGetLocalVariableGroupArray="local_",~g,"[",~index,"]"
			YDWEGetLocalVariableGroupArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableEffect="局部变量 [Y]"
			YDWEGetLocalVariableEffect="local_",~e
			YDWEGetLocalVariableEffectpHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量，参数处填入该变量的名字;局部变量仅在当前触发器下有效。"
		YDWEGetLocalVariableEffectArray="局部变量数组 [Y]"
			YDWEGetLocalVariableEffectArray="local_",~e,"[",~index,"]"
			YDWEGetLocalVariableEffectArrayHint="使用 逆天 - 局部变量 [Y] 替代。获取一个局部变量数组，参数处填入该变量的名字和数组索引;局部变量仅在当前触发器下有效。"
	// TCWE
		// TC Preload
			TCPreloadSystem_CreatePreload="新建存档 [T]"
				TCPreloadSystem_CreatePreload="新建存档"
				TCPreloadSystem_CreatePreloadHint="在使用天才存档系统前请先创建一个存档，最多同时操作10个存档"
			TCPreloadSystem_I2Preload="按索引获取存档 [T]"
				TCPreloadSystem_I2Preload="存档 ",~整数," "
				TCPreloadSystem_I2PreloadHint="按照ID获取存档"
			TCPreloadSystem_GetlastCreatedPreload="最后创建的存档ID [T]"
				TCPreloadSystem_GetlastCreatedPreload="获取最后创建的存档的整数索引"
				TCPreloadSystem_GetlastCreatedPreloadHint=
			TCPreloadSystem_PreloadGetInt="获取整数 [T]"
				TCPreloadSystem_PreloadGetInt="在 ",~整数," 中获取子索引为 ",~整数," 的整数"
				TCPreloadSystem_PreloadGetIntHint="获取该存档上的整数数值"
			TCPreloadSystem_PreloadGetStr="获取字符串 [T]"
				TCPreloadSystem_PreloadGetStr="在 ",~整数," 中获取子索引为 ",~整数," 的字符串"
				TCPreloadSystem_PreloadGetStrHint="获取该存档上的字符串数值"
		// TC Stringcode
			TCStringcodeSystem_CreateStringcode="加密字符串 - 新建 [T]"
				TCStringcodeSystem_CreateStringcode="新建加密字符串"
				TCStringcodeSystem_CreateStringcodeHint="在使用加密字符串系统前请先创建一个加密字符串，最多同时操作80个加密字符串"
			TCStringcodeSystem_I2Stringcode="加密字符串 - 按索引获取 [T]"
				TCStringcodeSystem_I2Stringcode="获取 ",~加密字符串ID
				TCStringcodeSystem_I2StringcodeHint="按ID获取加密字符串"
			TCStringcodeSystem_GetlastCreatedStringcode="加密字符串 - 最后创建的加密字符串 [T]"
				TCStringcodeSystem_GetlastCreatedStringcode="获取最后创建的加密字符串的整数索引"
				TCStringcodeSystem_GetlastCreatedStringcodeHint=
			TCStringcodeSystem_StringcodeGetInt="加密字符串 - 获取整数 [T]"
				TCStringcodeSystem_StringcodeGetInt="获取 ",~加密字符串," 的子索引为 ",~整数," 的整数"
				TCStringcodeSystem_StringcodeGetIntHint="获取该加密字符串上的整数数值，数据范围[-35819648,35819647]"
			TCStringcodeSystem_StringcodeGetLongInt="加密字符串 - 获取长整数 [T]"
				TCStringcodeSystem_StringcodeGetLongInt="获取 ",~加密字符串," 的子索引为 ",~整数," 的长整数"
				TCStringcodeSystem_StringcodeGetLongIntHint="获取该加密字符串对象上的整数数值，范围无限制，但占据当前索引和后一个索引"
			TCStringcodeSystem_StringcodeGetStr="加密字符串 - 获取字符串 [T]"
				TCStringcodeSystem_StringcodeGetStr="获取 ",~加密字符串," 的字符串"
				TCStringcodeSystem_StringcodeGetStrHint="获取该加密字符串对象上的字符串数值"
	// SJWE
		ReturnUnitID=指定单位 [S]
			ReturnUnitID=~单位
			ReturnUnitIDHint=""
		#   ReturnType=物品类型 [S]
			   ReturnType=~物品类型
			   ReturnTypeHint=""
		#   ReturnType_0=转换类型ID为对象ID [S]
			   ReturnType_0="转换",~类型ID,"为对象ID"
			   ReturnType_0Hint=""
		#  GetTypeId=转换类型名为对象ID [S]
			  GetTypeId="转换",~类型名,"为对象ID"
			  GetTypeIdHint=""
		# ReturnUnitID=指定单位 [S]
			 ReturnUnitID=~单位
			 ReturnUnitIDHint=""
		#  ReturnType_0=物品类型 [S]
			  ReturnType_0=~物品类型
			  ReturnType_0Hint=""
		# ReturnType_0=技能类型 [S]
			 ReturnType_0=~技能
			 ReturnType_0Hint=""
		ReturnType_0=单位类型 [S]
			ReturnType_0=~单位类型
			ReturnType_0Hint=""
		#     ReturnType=转换整数为类型ID [S]
			     ReturnType="转换",~整数,"为类型ID"
			     ReturnTypeHint=""
		#      ReturnType=转换整数为类型ID [S]
			      ReturnType="转换",~整数,"为类型ID"
			      ReturnTypeHint=""
		# GetTypeId=转换类型名为类型ID [S]
			 GetTypeId="转换",~类型名,"为类型ID"
			 GetTypeIdHint=""
		# ReturnType=转换整数为类型ID [S]
			 ReturnType="转换整数",~11,"为类型ID"
			 ReturnTypeHint=""
		Probability=概率事件成立 [S]
			Probability="设置概率为：",~a
			ProbabilityHint="比如输入数据20，则20%概率该项成立。"
		GetSkillHalfDamageBoolean=单位能否化解自定义技能伤害（需加载） [S]
			GetSkillHalfDamageBoolean="获取单位",~单位类型,"是否能化解一半技能伤害"
			GetSkillHalfDamageBooleanHint="只有开启系统默认触发和加载默认数据时才能使用。"
		GetUnitThumpDamageBool=单位是否被暴击(需加载) [S]
			GetUnitThumpDamageBool=~单位,"是否被暴击"
			GetUnitThumpDamageBoolHint=""
		GetUnitDodgeDamageBool=单位是否闪避（需加载） [S]
			GetUnitDodgeDamageBool=~单位,"是否闪避"
			GetUnitDodgeDamageBoolHint="不包括普通攻击的闪避。"
		GetUnitHalfDamageBool=单位是否化解伤害(需加载) [S]
			GetUnitHalfDamageBool=~单位,"是否化解伤害"
			GetUnitHalfDamageBoolHint=""
		GetTypeId=获取类型名的类型ID [S]
			GetTypeId="获取",~类型名,"的类型ID"
			GetTypeIdHint=""
		GetHatredUnitIndex=获取伤害来源在仇恨列表索引 [S]
			GetHatredUnitIndex="获取受伤单位",~受伤单位,"的仇恨列表中伤害来源单位",~伤害来源,"的索引值。"
			GetHatredUnitIndexHint=""
		GetMaxIndex=索引系统 - 获取对象拥有过的最大索引数 [S]
			GetMaxIndex="获取对象",~对象ID,"拥有过的最大索引数。"
			GetMaxIndexHint="获取对象拥有过的最大索引数。"
		CreateIndex=索引系统 - 为对象分配索引值 [S]
			CreateIndex="为对象",~对象ID,"分配唯一索引值。"
			CreateIndexHint="为对象分配一个唯一索引值。"
		GetType=获取对象的类型的整数类型数据 [S]
			GetType="获取对象",~对象,"的类型",~类型,"的整数型数据"
			GetTypeHint="这里对象指的是单位、物体或技能的ID。获取的数据也可以是另外一个类型ID，不过获取的ID是实数，要转换为整数。"
		GetItemTypeNumberMax=获取物品附加类型的可持有数量（需加载） [S]
			GetItemTypeNumberMax="获取物品附加类型",~类型名,"的可持有数量"
			GetItemTypeNumberMaxHint=""
		GetHalfDamageFactor=获取单位普通伤害化解率（需加载） [S]
			GetHalfDamageFactor="获取单位",~单位类型,"的普通伤害化解概率"
			GetHalfDamageFactorHint="只有开启系统默认触发和加载默认数据时才能使用。"
		GetSkillHalfDamageFactor=获取单位自定义技能伤害化解率（需加载） [S]
			GetSkillHalfDamageFactor="获取单位",~单位类型,"的自定义技能伤害化解概率"
			GetSkillHalfDamageFactorHint="只有开启系统默认触发和加载默认数据时才能使用。"
		GetUnitData=获取指定单位属性改变量（需加载） [S]
			GetUnitData="获取",~单位,"的",~属性类型,"类型的数值改变量"
			GetUnitDataHint="该量用于模拟状态造成的属性变化。"
		GetReduceDamagePercent=获取减伤百分比（需加载） [S]
			GetReduceDamagePercent="获取",~对象类型,"的减伤百分比"
			GetReduceDamagePercentHint="可填入单位ID，物品ID。"
		GetIncreaseDamagePercent=获取增伤百分比（需加载） [S]
			GetIncreaseDamagePercent="获取",~对象类型,"的增伤百分比"
			GetIncreaseDamagePercentHint="可填入单位ID，物品ID。"
		GetReduceDamage=获取伤害修改值（需加载） [S]
			GetReduceDamage="获取",~对象类型,"的伤害修改值"
			GetReduceDamageHint="可填入单位ID，物品ID。"
		GetTypeData=获取对象的类型的实数类型数据 [S]
			GetTypeData="获取对象",~对象,"的类型",~类型,"的实数型数据"
			GetTypeDataHint="这里对象指的是单位、物体或技能的ID。获取的数据也可以是另外一个类型ID，不过获取的ID是实数，要转换为整数。"
		CountMeleeOriginalDamageMain=计算原始普通伤害（伤害类型可选）（需加载） [S]
			CountMeleeOriginalDamageMain="以攻击类型：",~攻击类型,"，伤害来源为：",~伤害来源,"，接受伤害单位为：",~受害单位,"，来源伤害值为：",~伤害值,"计算原始普通伤害。"
			CountMeleeOriginalDamageMainHint="配合模拟伤害使用即可造成伤害。（不能触发普通伤害事件。）"
		CountSkillOriginalDamageMain=计算原始技能伤害（伤害类型可选）（需加载） [S]
			CountSkillOriginalDamageMain="以技能",~技能,"，伤害类型为：",~伤害类型,"，伤害来源为：",~伤害来源,"，接受伤害单位为：",~受伤单位,"，伤害来源值为：",~伤害值,"，计算原始技能伤害。"
			CountSkillOriginalDamageMainHint="配合模拟伤害使用即可造成伤害。(不会触发技能伤害事件，如要触发事件请在模拟伤害前加上对目标0.01的法术伤害即可。)"
		MeleeOriginalDamageMain=用系统默认方法计算普通伤害（需加载） [S]
			MeleeOriginalDamageMain="用系统默认方法计算普通伤害--伤害来源：",~伤害来源,"；伤害目标：",~伤害目标,"。"
			MeleeOriginalDamageMainHint="根据单位绑定数据直接计算。（不能触发普通伤害事件。）"
		SkillOriginalDamageMain=用系统默认方法计算自定义技能的伤害（需加载） [S]
			SkillOriginalDamageMain="用系统默认方法计算自定义技能的伤害--伤害产生的技能：",~技能,"；伤害来源：",~伤害来源,"；伤害目标：",~伤害目标,"。"
			SkillOriginalDamageMainHint="根据技能及单位绑定数据直接计算。(不会触发技能伤害事件，如要触发事件请在模拟伤害前加上对目标0.01的法术伤害即可。)"
		GetUnitDamageBeforeMimeticd=接受伤害前的伤害值(需加载) [S]
			GetUnitDamageBeforeMimeticd=~受伤单位,"被伤害前计算的伤害值"
			GetUnitDamageBeforeMimeticdHint="获取单位在被造成伤害前计算出的伤害值。"
		GetEventDamageZJ=原始伤害值 [S]
			GetEventDamageZJ="原始伤害值"
			GetEventDamageZJHint="获取的是魔兽原始伤害值，不是该系统的伤害值。"
		GetUnitMimeticdDamage=模拟伤害值 [S]
			GetUnitMimeticdDamage="获取",~受到伤害单位,"受到的模拟伤害"
			GetUnitMimeticdDamageHint="获取模拟的伤害值。"
		TypeId2S=转换类型ID为类型名 [S]
			TypeId2S="转换",~类型ID,"为类型名"
			TypeId2SHint=""
		GetItemTypeName=获取物品类型的附加类型（需加载） [S]
			GetItemTypeName="获取",~物品类型,"的附加类型"
			GetItemTypeNameHint=""
		GetEventDamagedUnitZJ=被伤害单位 [S]
			GetEventDamagedUnitZJ="被伤害单位"
			GetEventDamagedUnitZJHint=""
		GetEventDamageSourceZJ=伤害来源单位 [S]
			GetEventDamageSourceZJ="伤害来源单位"
			GetEventDamageSourceZJHint=""
		GetSystemHashtable=获取伤害系统主哈希表 [S]
			GetSystemHashtable="获取伤害系统主哈希表"
			GetSystemHashtableHint="该功能为高级自定义使用。"
		GetItemSystemHashtable=获取伤害系统物品附属系统哈希表 [S]
			GetItemSystemHashtable="获取伤害系统物品附属系统哈希表"
			GetItemSystemHashtableHint="该功能为高级自定义使用。"
	// returns <ANY TYPE>
		YDWECustomScriptCode="Jass"
			YDWECustomScriptCode=~Jass代码
			YDWECustomScriptCodeHint="可以在任何有返回值的地方输入Jass代码"
		YDWEGetAnyTypeLocalVariable="局部变量"
			YDWEGetAnyTypeLocalVariable="loc_",~局部变量名字
			YDWEGetAnyTypeLocalVariableHint="可以获取到任意类型的局部变量。"
		YDWELoadAnyTypeDataByUserData="自定义值"
			YDWELoadAnyTypeDataByUserData="{",~类型,"}",~null,"[",~属性,"]"
			YDWELoadAnyTypeDataByUserDataHint="从某个数据上获取自定义值。如：{单位}恶魔猎手[命中率]"
	// returns boolean
		YDWEIsTriggerEventId="判断触发的事件"
			YDWEIsTriggerEventId="当前触发的事件为 ",~事件
			YDWEIsTriggerEventIdHint="任意单位事件 等于 玩家单位事件，指定单位事件 等于 单位事件"
		 UnitAddAbility="添加技能 [C]"
			 UnitAddAbility="为 ",~单位," 添加 ",~技能
			 UnitAddAbilityHint="添加成功返回true."
		 UnitRemoveAbility="删除技能 [C]"
			 UnitRemoveAbility="为 ",~单位," 删除 ",~技能
			 UnitRemoveAbilityHint="删除成功返回true."
		YDWEHaveSavedAnyTypeDataByUserData="拥有自定义值"
			YDWEHaveSavedAnyTypeDataByUserData="{",~类型,"}",~null," 拥有 {",~类型,"}"~属性
			YDWEHaveSavedAnyTypeDataByUserDataHint="判断某个数据的自定义值是否存在，如： {单位}恶魔猎手 拥有 {物品}圣剑"
		YDWEGetBooleanByInteger="获取 布尔值 (整数路径)"
			YDWEGetBooleanByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取布尔值"
			YDWEGetBooleanByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取布尔值数据。"
		YDWEGetBooleanByString="获取 布尔值 (字符串路径)"
			YDWEGetBooleanByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取布尔值"
			YDWEGetBooleanByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取布尔值数据。"
		YDWEIsItemSwitch="单位切换背包"
			YDWEIsItemSwitch=~单位," 正在切换背包"
			YDWEIsItemSwitchHint="判断单位是否在切换背包，避免单位切换背包时触发获得和掉落物品事件。"
		IsDestructableAliveBJ="可破坏物存活"
			IsDestructableAliveBJ=~可破坏物," 是存活的"
			IsDestructableAliveBJHint=""
		IsDestructableDeadBJ="可破坏物死亡"
			IsDestructableDeadBJ=~可破坏物," 是死亡的"
			IsDestructableDeadBJHint=""
		IsDestructableInvulnerableBJ="物件无敌"
			IsDestructableInvulnerableBJ=~物件," 是无敌的"
			IsDestructableInvulnerableBJHint=
		IsPointBlighted="坐标被荒芜地表覆盖 [C]"
			IsPointBlighted="坐标(",~X,",",~Y,")被荒芜地表覆盖"
			IsPointBlightedHint=
		IsPointBlightedBJ="点被荒芜地表覆盖"
			IsPointBlightedBJ=~指定点," 被荒芜地表覆盖"
			IsPointBlightedBJHint=
		IsTerrainPathable="地形通行状态关闭(指定坐标) [C]"
			IsTerrainPathable="坐标(",~X,",",~Y,")处的 ",~Pathing Type," 通行状态为关闭"
			IsTerrainPathableHint="指定类型单位不能通行即通行状态为关闭. 如该点不能造建筑就是'建造'通行状态为关闭. 可使用'环境 - 设置地形通行状态'来改变通行状态."
		IsTerrainDeepWater="地形为深水 [W]"
			IsTerrainDeepWater="坐标(",~X,",",~Y,")处为深水
			IsTerrainDeepWaterHint="原作者:Rising_Dusk"
		IsTerrainShallowWater="地形为浅水 [W]"
			IsTerrainShallowWater="坐标(",~X,",",~Y,")处为浅水
			IsTerrainShallowWaterHint="原作者:Rising_Dusk"
		IsTerrainLand="地形为陆地 [W]"
			IsTerrainLand="坐标(",~X,",",~Y,")处为陆地
			IsTerrainLandHint="原作者:Rising_Dusk"
		IsTerrainPlatform="地形为平台 [W]"
			IsTerrainPlatform="坐标(",~X,",",~Y,")处为平台
			IsTerrainPlatformHint="原作者:Rising_Dusk"
		IsTerrainWalkable="地形可通行 [W]"
			IsTerrainWalkable="坐标(",~X,",",~Y,")处可通行
			IsTerrainWalkableHint="原作者:Rising_Dusk"
		IsTerrainPathableBJ="地形通行状态关闭(指定点)"
			IsTerrainPathableBJ=~指定点," 处的 ",~Pathing Type," 通行状态为关闭"
			IsTerrainPathableBJHint="指定类型单位不能通行即通行状态为关闭. 如该点不能造建筑就是'建造'通行状态为关闭. 可使用'环境 - 设置地形通行状态'来改变通行状态."
		IsMapFlagSet="地图参数设置"
			IsMapFlagSet=~Map Flag," 已设置"
			IsMapFlagSetHint=
		IsCustomCampaignButtonVisibile="自定义战役按钮可见"
			IsCustomCampaignButtonVisibile="自定义战役按钮# ",~Number," 可见"
			IsCustomCampaignButtonVisibileHint=
		GetCreepCampFilterState="小地图中立生物显示开启"
			GetCreepCampFilterState="小地图中立生物显示开启"
			GetCreepCampFilterStateHint=
		SaveGameExists="游戏存档存在"
			SaveGameExists=~存档文件," 已存在"
			SaveGameExistsHint=
		IsNoVictoryCheat="无法胜利 [C]"
			IsNoVictoryCheat="玩家开启作弊模式: 无法胜利"
			IsNoVictoryCheatHint="单机作弊码开启的模式."
		IsNoDefeatCheat="无法失败 [C]"
			IsNoDefeatCheat="玩家开启作弊模式: 无法失败"
			IsNoDefeatCheatHint="单机作弊码开启的模式."
		GetStoredBoolean="读取布尔值 [C]"
			GetStoredBoolean="从",~Game Cache,"中读取布尔值,类别: ",~Category,",名称: ",~文字
			GetStoredBooleanHint="如果该值不存在则返回false."
		HaveStoredValue="缓存项存在"
			HaveStoredValue="名称为 "~文字," 的 ",~Type," 类缓存项被保存在类别: ",~Category," 缓存: ",~Game Cache
			HaveStoredValueHint=
		HaveSavedValue="哈希项存在"
			HaveSavedValue="子索引为 ",~Value," 的 ",~Type," 类数据被保存在主索引为 ",~Value," 的 ",~Hashtable," 中"
			HaveSavedValueHint=
		UnitHasItem="持有物品"
			UnitHasItem=~Hero," 拥有 ",~物品
			UnitHasItemHint=
		UnitHasItemOfTypeBJ="持有物品(指定类型)"
			UnitHasItemOfTypeBJ=~Hero," 拥有 ",~物品类型
			UnitHasItemOfTypeBJHint=
		IsSuspendedXP="经验不可获得"
			IsSuspendedXP=~Hero," 不可获得经验"
			IsSuspendedXPHint="可使用'英雄 - 允许/禁止经验获取'来设置该项."
		CheckItemStatus="物品状态检查"
			CheckItemStatus=~物品," 是 ",~Status," 的"
			CheckItemStatusHint=
		CheckItemcodeStatus="物品类型状态检查"
			CheckItemcodeStatus=~物品类型," 是 ",~Status," 的"
			CheckItemcodeStatusHint=
		IsItemVisible="物品可见 [C]"
			IsItemVisible=~物品," 是可见的"
			IsItemVisibleHint="物品不被隐藏且不被单位持有时即为可见的."
		IsItemHiddenBJ="物品隐藏"
			IsItemHiddenBJ=~物品," 是隐藏的"
			IsItemHiddenBJHint="单位持有的物品也被认为是隐藏的. 建议使用物品可见=False来作判断."
		IsItemOwned="物品被持有"
			IsItemOwned=~物品," 是被持有的"
			IsItemOwnedHint="在物品栏中的物品都是被持有的. 就算单位正处于死亡状态."
		IsItemPowerup="物品是拾取时自动使用的 [C]"
			IsItemPowerup=~物品," 是拾取时自动使用类物品"
			IsItemPowerupHint=
		IsItemSellable="物品可被市场随机出售 [C]"
			IsItemSellable=~物品," 可被市场随机出售"
			IsItemSellableHint=
		IsItemPawnable="物品可被抵押 [C]"
			IsItemPawnable=~物品," 可被抵押"
			IsItemPawnableHint=
		RectContainsItem="物品在矩形区域"
			RectContainsItem=~物品," 在 ",~矩形区域
			RectContainsItemHint="单位持有的物品不会被计算在内."
		IsItemInvulnerable="物品无敌"
			IsItemInvulnerable=~物品," 是无敌的"
			IsItemInvulnerableHint=
		LeaderboardHasPlayerItemBJ="玩家在排行榜"
			LeaderboardHasPlayerItemBJ=~Leaderboard," 中包含 ",~Player
			LeaderboardHasPlayerItemBJHint=
		IsMultiboardDisplayed="多面板显示"
			IsMultiboardDisplayed=~Multiboard," 是显示的"
			IsMultiboardDisplayedHint=
		IsMultiboardMinimized="多面板最小化"
			IsMultiboardMinimized=~Multiboard," 是最小化的"
			IsMultiboardMinimizedHint=
		WaygateIsActiveBJ="传送门激活"
			WaygateIsActiveBJ=~传送门," 处于激活状态"
			WaygateIsActiveBJHint=
		IsPlayerFlagSetBJ="玩家参数开启"
			IsPlayerFlagSetBJ=~Player Flag," 为允许,对 ",~Player
			IsPlayerFlagSetBJHint=
		IsPlayerAlly="是玩家的盟友"
			IsPlayerAlly=~Player," 是 ",~Player," 的盟友"
			IsPlayerAllyHint="包括中立状态. 单向判断玩家A对玩家B联盟不侵犯,即表示玩家A是玩家B的盟友."
		IsPlayerEnemy="是玩家的敌人"
			IsPlayerEnemy=~Player," 是 ",~Player," 的敌人"
			IsPlayerEnemyHint="不包括中立状态. 单向判断玩家A对玩家B敌对侵犯,即表示玩家A是玩家B的盟友."
		IsPlayerObserver="玩家是裁判或观察者 [C]"
			IsPlayerObserver=~Player,"是裁判或观察者"
			IsPlayerObserverHint=
		IsPlayerRacePrefSet="玩家的种族选择"
			IsPlayerRacePrefSet=~Player," 选择了 ",~RacePreference
			IsPlayerRacePrefSetHint=
		GetPlayerAlliance="联盟状态设置"
			GetPlayerAlliance=~Player," 对 ",~Player," 开启 ",~Alliance Type
			GetPlayerAllianceHint=
		IsPlayerInForce="在玩家组"
			IsPlayerInForce=~Player," 在 ",~玩家组," 中"
			IsPlayerInForceHint=
		IsQuestItemCompleted="任务项目完成"
			IsQuestItemCompleted=~Quest Requirement," 已完成"
			IsQuestItemCompletedHint=
		IsQuestEnabled="任务激活"
			IsQuestEnabled=~Quest," 已激活"
			IsQuestEnabledHint=
		IsQuestCompleted="任务完成"
			IsQuestCompleted=~Quest," 已完成"
			IsQuestCompletedHint=
		IsQuestFailed="任务失败"
			IsQuestFailed=~Quest," 失败"
			IsQuestFailedHint=
		IsQuestDiscovered="任务被发现"
			IsQuestDiscovered=~Quest," 已被发现"
			IsQuestDiscoveredHint=
		IsQuestRequired="是主要任务"
			IsQuestRequired=~Quest," 是主要任务"
			IsQuestRequiredHint=
		RectContainsLoc="包含点"
			RectContainsLoc=~矩形区域," 内包含 ",~点
			RectContainsLocHint=
		IsPointInRegion="包含坐标"
			IsPointInRegion=~不规则区域," 内包含坐标(",~X,",",~Y,")"
		IsLocationInRegion="包含点"
			IsLocationInRegion=~不规则区域," 内包含点: ",~点
		IsTriggerEnabled="触发开启"
			IsTriggerEnabled=~触发," 处于开启状态"
			IsTriggerEnabledHint=
		TriggerEvaluate="触发条件成立"
			TriggerEvaluate=~触发," 的条件成立"
			TriggerEvaluateHint=
		IsTriggerQueuedBJ="触发在队列中"
			IsTriggerQueuedBJ=~触发," 在队列中"
			IsTriggerQueuedBJHint="可使用'触发器 - 添加到队列'和'触发器 - 移出队列'动作来操作触发队列."
		IsTriggerQueueEmptyBJ="触发队列为空"
			IsTriggerQueueEmptyBJ="触发队列为空"
			IsTriggerQueueEmptyBJHint="可使用'触发器 - 添加到队列'和'触发器 - 移出队列'动作来操作触发队列."
		IsUnit="与指定单位是同一个单位"
			IsUnit=~单位," 与 ",~单位,"相同"
			IsUnitHint="用来判断两个单位是否相等。"
		IsUnitDetected="被指定玩家检测到反隐形"
			IsUnitDetected=~单位," 处在 ",~玩家," 的真实视野范围内"
			IsUnitDetectedHint="用来判断单位在这个玩家反隐形范围内，注：不包含该玩家同盟的反隐范围。"
		IsUnitType="单位类别检查"
			IsUnitType=~单位," 是 ",~Type
			IsUnitTypeHint=
		IsUnitRace="单位种族检查"
			IsUnitRace=~单位," 是 ",~Race
			IsUnitRaceHint=
		IsUnitIdType="单位类别检查(指定单位类型)"
			IsUnitIdType=~单位类型," 是 ",~Type
			IsUnitIdTypeHint=
		IsHeroUnitId="单位类型是英雄单位"
			IsHeroUnitId=~UnitType," 是英雄单位"
		IsUnitInGroup="在单位组内"
			IsUnitInGroup=~单位," 在 ",~单位组," 中"
			IsUnitInGroupHint=
		IsUnitInRange="在指定单位范围内 [C]"
			IsUnitInRange=~单位," 在距离 ",~指定单位," ",~范围," 范围内"
			IsUnitInRangeHint=
		IsUnitInRangeXY="在指定坐标范围内 [C]"
			IsUnitInRangeXY=~单位," 在距离坐标(",~X,",",~Y,") ",~范围," 范围内"
			IsUnitInRangeXYHint=
		IsUnitInRangeLoc="在指定点范围内 [C]"
			IsUnitInRangeLoc=~单位," 在距离 ",~指定点," ",~范围," 范围内"
			IsUnitInRangeLocHint=
		RectContainsUnit="在矩形区域内"
			RectContainsUnit=~矩形区域," 内存在 ",~单位
			RectContainsUnitHint=
		IsUnitInRegion="在不规则区域内 [C]"
			IsUnitInRegion=~不规则区域," 内存在 ",~单位
			IsUnitInRegionHint=
		IsUnitAliveBJ="单位处于存活状态"
			IsUnitAliveBJ=~单位," 是存活的"
			IsUnitAliveBJHint="使用 单位 - 单位存活 [W] 替代。（WMUI：实际上该函数是判断单位血量是否>0）"
		UnitAlive="单位处于存活状态 [W]"
			UnitAlive=~单位," 是存活的"
			UnitAliveHint="WMUI：来自common.ai的native函数，比 单位 - 单位存活 精确"
		IsUnitDeadBJ="单位处于死亡状态"
			IsUnitDeadBJ=~单位," 处于死亡状态"
			IsUnitDeadBJHint="实际上该函数是判断单位血量是否<=0."
		IsUnitPausedBJ="单位处于暂停状态"
			IsUnitPausedBJ=~单位," 处于暂停状态"
			IsUnitPausedBJHint=
		IsUnitHiddenBJ="单位处于隐藏状态"
			IsUnitHiddenBJ=~单位," 处于隐藏状态"
			IsUnitHiddenBJHint="可通过'单位 - 隐藏'动作来析藏单位. 运输机,灵魂之球,祭坛中的单位都被认为是隐藏状态."
		IsUnitIllusionBJ="单位是镜像"
			IsUnitIllusionBJ=~单位," 是镜像单位"
			IsUnitIllusionBJHint=
		UnitCanSleepPerm="允许控制睡眠状态"
			UnitCanSleepPerm="允许控制 "~单位," 的睡眠状态"
			UnitCanSleepPermHint="即该单位拥有'一直睡眠'技能."
		UnitCanSleepBJ="允许夜晚睡眠"
			UnitCanSleepBJ=~单位," 会在夜晚进入睡眠"
			UnitCanSleepBJHint="中立生物才会睡眠."
		UnitIsSleepingBJ="正在睡眠"
			UnitIsSleepingBJ=~单位," 正在睡眠"
			UnitIsSleepingBJHint="中立生物才会睡眠. 不包括催眠魔法."
		DoesUnitGenerateAlarms="开启警报"
			DoesUnitGenerateAlarms=~单位," 处于开启警报状态"
			DoesUnitGenerateAlarmsHint=
		IsUnitLoadedBJ="被装载"
			IsUnitLoadedBJ=~单位," 被装载中"
			IsUnitLoadedBJHint="被飞艇,船等有运输功能的单位装载."
		IsUnitInTransportBJ="被指定单位装载"
			IsUnitInTransportBJ=~单位," 被 ",~运输机," 装载中"
			IsUnitInTransportBJHint=
		IsUnitSelected="被玩家选择"
			IsUnitSelected=~单位," 被 ",~Player," 选择"
			IsUnitSelectedHint=
		IsUnitAlly="是玩家的同盟单位"
			IsUnitAlly=~单位," 是 ",~Player," 的同盟单位"
			IsUnitAllyHint="包括中立状态. 单向判断玩家对单位是否为不侵犯状态."
		IsUnitEnemy="是玩家的敌对单位"
			IsUnitEnemy=~单位," 是 ",~Player," 的敌对单位"
			IsUnitEnemyHint="不包括中立状态. 单向判断玩家对单位是否为敌对侵犯."
		IsUnitOwnedByPlayer="是玩家的单位"
			IsUnitOwnedByPlayer=~单位," 属于 ",~Player
			IsUnitOwnedByPlayerHint="判断单位是否属于这个玩家。"
		IsUnitInvulnerable="是无敌的 [W]"
			IsUnitInvulnerable=~单位,"是无敌的"
			IsUnitInvulnerableHint="会对该单位造成0.01点伤害.感谢金皮蛋"
		IsUnitSpelling="正在施法 [W]"
			IsUnitSpelling=~单位,"正在施法"
			IsUnitSpellingHint="感谢金皮蛋"
		IsUnitInForce="是玩家组里玩家的单位"
			IsUnitInForce=~单位," 属于 ",~玩家组," 里的玩家"
			IsUnitInForceHint="判断单位是否属于这个玩家组里的玩家。"
		UnitHasBuffBJ="拥有魔法效果"
			UnitHasBuffBJ=~单位," 拥有 ",~魔法效果
			UnitHasBuffBJHint=
		IsUnitGroupEmptyBJ="单位组为空"
			IsUnitGroupEmptyBJ=~单位组," 为空"
			IsUnitGroupEmptyBJHint=
		IsUnitGroupInRectBJ="单位组中单位在矩形区域内"
			IsUnitGroupInRectBJ=~单位组," 中所有单位在 ",~矩形区域," 内"
			IsUnitGroupInRectBJHint=
		IsUnitGroupDeadBJ="单位组中所有单位死亡"
			IsUnitGroupDeadBJ=~单位组," 中所有单位死亡"
			IsUnitGroupDeadBJHint=
		IsFogEnabled="战争迷雾开启"
			IsFogEnabled="战争迷雾开启"
			IsFogEnabledHint=
		IsFogMaskEnabled="黑色阴影开启"
			IsFogMaskEnabled="黑色阴影开启"
			IsFogMaskEnabledHint=
		IsUnitVisible="单位对指定玩家可见"
			IsUnitVisible=~单位," 对 ",~Player," 可见"
			IsUnitVisibleHint=
		IsUnitInvisible="单位对指定玩家不可见"
			IsUnitInvisible=~单位," 对 ",~Player," 不可见"
			IsUnitInvisibleHint=
		IsUnitFogged="单位在指定玩家的迷雾中"
			IsUnitFogged=~单位," 在 ",~Player," 的迷雾范围内"
			IsUnitFoggedHint="黑色阴影内的单位不被计算在内."
		IsUnitMasked="单位在指定玩家的黑色阴影中"
			IsUnitMasked=~单位," 在 ",~Player," 的黑色阴影内"
			IsUnitMaskedHint=
		IsLocationVisibleToPlayer="点对玩家可见"
			IsLocationVisibleToPlayer=~指定点,"对 ",~Player," 可见"
			IsLocationVisibleToPlayerHint=
		IsVisibleToPlayer="坐标对玩家可见"
			IsVisibleToPlayer="坐标(",~x,",",~y,") 对 ",~玩家," 可见"
			IsVisibleToPlayerHint=""
		IsLocationFoggedToPlayer="点在指定玩家的迷雾中"
			IsLocationFoggedToPlayer=~指定点," 在 ",~Player," 的迷雾范围内"
			IsLocationFoggedToPlayerHint="黑色阴影内的点不被计算在内."
		IsFoggedToPlayer="坐标在指定玩家的迷雾中"
			IsFoggedToPlayer="坐标(",~x,",",~y,") 在 ",~玩家," 的迷雾范围内"
			IsFoggedToPlayerHint="黑色阴影内的坐标不被计算在内。"
		IsLocationMaskedToPlayer="点在指定玩家的黑色阴影中"
			IsLocationMaskedToPlayer=~指定点," 在 ",~Player," 的黑色阴影内"
			IsLocationMaskedToPlayerHint=
		IsMaskedToPlayer="坐标在指定玩家的黑色阴影中"
			IsMaskedToPlayer="坐标(",~x,",",~y,") 在 ",~玩家," 的黑色阴影内"
			IsMaskedToPlayerHint=""
		OperatorDegreeAdd="加 < ﹢ >"
			OperatorDegreeAdd=~角度," + ",~角度
			OperatorDegreeAddHint=
		OperatorDegreeSubtract="减 < ﹣ >"
			OperatorDegreeSubtract=~角度," - ",~角度
			OperatorDegreeSubtractHint=
		OperatorDegreeMultiply="乘 < × >"
			OperatorDegreeMultiply=~角度," × ",~实数
			OperatorDegreeMultiplyHint=
		OperatorDegreeDivide="除 < ÷ >"
			OperatorDegreeDivide=~角度," ÷ ",~实数
			OperatorDegreeDivideHint=
		OperatorRadianAdd="加 < ﹢ >"
			OperatorRadianAdd=~弧度," ﹢ ",~弧度
			OperatorRadianAddHint=
		OperatorRadianSubtract="减 < ﹣ >"
			OperatorRadianSubtract=~弧度," ﹣ ",~弧度
			OperatorRadianSubtractHint=
		OperatorRadianMultiply="乘 < × >"
			OperatorRadianMultiply=~弧度," × ",~实数
			OperatorRadianMultiplyHint=
		OperatorRadianDivide="除 < ÷ >"
			OperatorRadianDivide=~弧度," ÷ ",~实数
			OperatorRadianDivideHint=
		GetStoredBooleanBJ="游戏缓存 - 读取布尔值"
			GetStoredBooleanBJ="从游戏缓存读取布尔值,名称: ",~文字," 类别: ",~Category," 缓存: ",~Game Cache
			GetStoredBooleanBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		YDWEPlatformIsInPlatform="地图在11平台上 [JAPI] [Y]"
			YDWEPlatformIsInPlatform="目前地图正在11平台上运行"
			YDWEPlatformIsInPlatformHint="判断地图是否在11平台上；此功能可以根据地图所在平台做出差异化操作。特别注意：此操作内含有等待。 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEIsEventPhysicalDamage="是物理伤害 [JAPI] [Y]"
			YDWEIsEventPhysicalDamage="单位所受伤害是物理伤害"
			YDWEIsEventPhysicalDamageHint="响应'受到伤害'单位事件,不能用在等待之后 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEIsEventAttackDamage="是攻击伤害 [JAPI] [Y]"
			YDWEIsEventAttackDamage="单位所受伤害是攻击伤害"
			YDWEIsEventAttackDamageHint="响应'受到伤害'单位事件,不能用在等待之后 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEIsEventRangedDamage="是远程伤害 [JAPI] [Y]"
			YDWEIsEventRangedDamage="单位所受伤害是远程伤害"
			YDWEIsEventRangedDamageHint="响应'受到伤害'单位事件,不能用在等待之后 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEIsEventDamageType="是伤害类型 [JAPI] [Y]"
			YDWEIsEventDamageType="单位所受伤害的伤害类型是 ",~伤害类型
			YDWEIsEventDamageTypeHint="响应'受到伤害'单位事件,不能用在等待之后 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEIsEventWeaponType="是武器类型 [JAPI] [Y]"
			YDWEIsEventWeaponType="单位所受伤害的武器类型是 ",~武器类型
			YDWEIsEventWeaponTypeHint="响应'受到伤害'单位事件,不能用在等待之后 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEIsEventAttackType="是攻击类型 [JAPI] [Y]"
			YDWEIsEventAttackType="单位所受伤害的攻击类型是 ",~攻击类型
			YDWEIsEventAttackTypeHint="响应'受到伤害'单位事件,不能用在等待之后 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
	// returns integer
		OperatorInt="算术运算"
			OperatorInt=~数值," ",~运算符," ",~数值
			OperatorIntHint=
		YDWEForLoopLocVarIndex="局部变量 -- 读取(循环数)"
			YDWEForLoopLocVarIndex="loop_",~变量名
			YDWEForLoopLocVarIndexHint="用来获取当前循环中的循环数，是个真正的Jass局部变量。"
		GetItemCost="物品的价格 [W]"
			GetItemCost="获取",~i,"类型的",~j
			GetItemCostHint="初始化请设置好函数."
		GetPlayerUnitTypeCount="指定玩家的单位类型数目 [W]"
			GetPlayerUnitTypeCount="获取",~p,"的",~u,"的数目"
			GetPlayerUnitTypeCountHint="包括正在建造的单位,common.ai里的native函数."
		GetForLoopIndexA="循环整数A"
			GetForLoopIndexA="循环整数A"
			GetForLoopIndexAHint=
		GetForLoopIndexB="循环整数B"
			GetForLoopIndexB="循环整数B"
			GetForLoopIndexBHint=
		StringLength="字符串长度"
			StringLength=~String,的长度
			StringLengthHint=
		R2I="转换实数为整数"
			R2I="转换 ",~Real," 为整数"
			R2RHint="舍弃小数部分."
		S2I="转换字符串为整数"
			S2I="转换 ",~String," 为整数"
			S2IHint=
		StringHash="获取字符串的哈希值"
			StringHash="(",~String,")的哈希值"
			StringHashHint="获取一个对应该字符串的密钥，不同的字符串的密钥基本不可能相同，也很难找到两个不同的字符串他们有着相同的密钥。可以用于制作密码等功能。"
		YDWE_PreloadSL_Get="获取存档数据"
			YDWE_PreloadSL_Get="从",~玩家,"获取 ※",~数据注释,"，","从","当","前","存","档","[",~数据项索引,"]","上","获","取"
			YDWE_PreloadSL_GetHint="从玩家本地存档上获取数据，需要填入正确的数据项索引，标签即该项数据的注释。"
		YDWEGeneralBounsSystemUnitGetBonus="万能属性系统-获取属性<茄子制作>"
			YDWEGeneralBounsSystemUnitGetBonus="获取 ",~单位," 附加 ",~属性
			YDWEGeneralBounsSystemUnitGetBonusHint=
		GetHeroKillCount="击杀系统-获取杀敌数"
			GetHeroKillCount="获取",~玩家,"的杀敌数"
		GetAssistsCount="击杀系统-获取助攻数"
			GetAssistsCount="获取",~玩家,"的助攻数"
		GetHeroDeathCount="击杀系统-获取死亡数"
			GetHeroDeathCount="获取",~玩家,"的死亡数"
		GetHandleIdBJ="获取对象的h2i值"
			GetHandleIdBJ="转换 ",~Handle," 为整数"
			GetHandleIdBJHint="创建一个对应该handle的临时密钥,可以在哈希表中作为索引号使用.当该handle被彻底销毁时,密钥会被回收."
		GetHandleId="获取对象的h2i值 [C]"
			GetHandleId="转换 ",~Handle," 为整数"
			GetHandleIdHint="创建一个对应该handle的临时密钥,可以在哈希表中作为索引号使用.当该handle被彻底销毁时,密钥会被回收."
		StringHashBJ="获取字符串的哈希值"
			StringHashBJ="转换 ",~String," 为整数"
			StringHashBJHint="创建一个对应该字符串的永久密钥,可以在哈希表中作为索引号使用"
		YDWE_TP_NewTimerPeriodic="新中心计时器-开启新的运行索引<Fetrix_sai制作>"
			YDWE_TP_NewTimerPeriodic="开启中心计时器一个新的运行索引，时间间隔为 ",~时间," 秒，是否循环 ",~真值,"，运行触发器 ",~触发器
			YDWE_TP_NewTimerPeriodicHint="当中心计时器运行某个触发器时，会生成一个运行索引；本条API会按设置的参数来运行触发器，并返回一个运行索引。"
		YDWE_TP_GetExpiredTimerIndex="新中心计时器-获取当前到期计时器运行索引<Fetrix_sai制作>"
			YDWE_TP_GetExpiredTimerIndex="获取当前到期计时器运行索引"
			YDWE_TP_GetExpiredTimerIndexHint="当中心计时器运行某个触发器时，会生成一个运行索引；可以通过本条API来获取当前到期的计时器运行索引。"
		YDWEGetGameCurrentTime="计时器系统 - 获取游戏当前时间"
			YDWEGetGameCurrentTime="获取游戏当前时间"
			YDWEGetGameCurrentTimeHint="获得从游戏开始到目前流逝的时间，以秒为单位。"
		YDWETimerSystemGetRunIndex="计时器系统 - 获取中心计时器当前执行索引"
			YDWETimerSystemGetRunIndex="获取中心计时器当前执行索引"
			YDWETimerSystemGetRunIndexHint="获得中心计时器运行触发器或函数目前为止的执行次数。"
		YDWEGetUnitItemSoftId="物品在物品栏中的位置 [Y]"
			YDWEGetUnitItemSoftId="获取 ",~单位," 物品栏中 ",~物品," 的位置"
			YDWEGetUnitItemSoftIdHint="返回物品所在单位物品栏中的位置，为1-6之间的某个值；若单位身上不存在该物品，则返回0。"
		YDWEConverUnitcodeToInt="显示 单位类型 为整数 [Y]"
			YDWEConverUnitcodeToInt="显示 <",~单位类型,"> 为整数"
			YDWEConverUnitcodeToIntHint="单位类型本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
		YDWEConverItemcodeToInt="显示 物品类型 为整数 [Y]"
			YDWEConverItemcodeToInt="显示 <",~物品类型,"> 为整数"
			YDWEConverItemcodeToIntHint="物品类型本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
		YDWEConverAbilcodeToInt="显示 技能类型 为整数 [Y]"
			YDWEConverAbilcodeToInt="显示 <",~技能类型,"> 为整数"
			YDWEConverAbilcodeToIntHint="技能类型本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
		YDWEConverOrdercodeToInt="显示命令ID为整数 [Y]"
			YDWEConverOrdercodeToInt="显示<",~命令ID,">为整数"
			YDWEConverOrdercodeToIntHint="命令ID本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
		YDWEGetIntegerByInteger="获取 整数 (整数路径)"
			YDWEGetIntegerByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取整数"
			YDWEGetIntegerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取整数数据。"
		YDWEGetIntegerByString="获取 整数 (字符串路径)"
			YDWEGetIntegerByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取整数"
			YDWEGetIntegerByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取整数数据。"
		YDWEGetUnitGoldCost="获取 黄金消耗 (单位类型)"
			YDWEGetUnitGoldCost="获取 ",~单位," 建造时消耗的黄金"
			YDWEGetUnitGoldCostHint="本触发只能获取普通单位建造时消耗的黄金，若填入英雄单位，将会获得固定值425"
		YDWEGetUnitWoodCost="获取 木头消耗 (单位类型)"
			YDWEGetUnitWoodCost="获取 ",~单位," 建造时消耗的木头"
			YDWEGetUnitWoodCostHint="本触发只能获取普通单位建造时消耗的木头，若填入英雄单位，将会获得固定值100"
		YDWEGetUnitBuildTime="获取 建造时间 (单位类型)"
			YDWEGetUnitBuildTime="获取 ",~单位," 建造时需要的时间"
			YDWEGetUnitBuildTimeHint="本触发只能获取普通单位建造时需要的时间，若填入英雄单位，将会获得固定值55"
		YDWEGetUnitFoodUsed="获取 消耗人口 (单位)"
			YDWEGetUnitFoodUsed="获取 ",~单位," 建造时消耗的人口"
			YDWEGetUnitFoodUsedHint="本触发只能获取普通单位建造时消耗的人口，若填入英雄单位，将会获得固定值5"
		YDWEGetUnitFoodMade="获取 提供人口 (单位)"
			YDWEGetUnitFoodMade="获取 ",~单位," 建造后提供的人口"
			YDWEGetUnitFoodMadeHint="本触发只能获取普通单位建造后提供的人口，若填入英雄单位，将会获得固定值0"
		GetElevatorHeight="升降机高度"
			GetElevatorHeight=~升降机," 的高度"
			GetElevatorHeightHint="可以使用'可破坏物 - 设置升降机高度'来设置升降机高度."
		GetTerrainCliffLevel="地形悬崖高度(指定坐标) [C]"
			GetTerrainCliffLevel="坐标(",~X,",",~Y,")处的地形悬崖高度"
			GetTerrainCliffLevelHint="悬崖高度:深水区为0, 浅水区为1, 平原为2, 之后每层+1."
		GetTerrainCliffLevelBJ="地形悬崖高度(指定点)"
			GetTerrainCliffLevelBJ=~指定点," 处的地形悬崖高度"
			GetTerrainCliffLevelBJHint="悬崖高度:深水区为0, 浅水区为1, 平原为2, 之后每层+1."
		GetTerrainVariance="地形样式(指定坐标) [C]"
			GetTerrainVariance="坐标(",~X,",",~Y,")处的地形样式"
			GetTerrainVarianceHint=
		GetTerrainVarianceBJ="地形样式(指定点)"
			GetTerrainVarianceBJ=~指定点," 处的地形样式"
			GetTerrainVarianceBJHint=
		GetLearnedSkillLevel="学习技能等级"
			GetLearnedSkillLevel="学习技能等级"
			GetLearnedSkillLevelHint="响应'学习技能'单位事件,指代被学习技能的等级. 注意,该值为学习后的等级."
		GetPlayers="玩家数量"
			GetPlayers="玩家数量"
			GetPlayersHint="地图编辑器中开启的玩家数量(1-12)."
		GetTeams="队伍数量"
			GetTeams="队伍数量"
			GetTeamsHint=
		GetAllyColorFilterState="联盟颜色显示设置"
			GetAllyColorFilterState="联盟颜色显示设置"
			GetAllyColorFilterStateHint="0为不开启. 1为小地图显示. 2为小地图和游戏都显示."
		GetTournamentFinishNowRule="比赛结束规则"
			GetTournamentFinishNowRule="比赛结束规则"
			GetTournamentFinishNowRuleHint="1表示游戏开始时间已经超过限定时,无法以平局结束. 其他值表示游戏还在初期阶段,此时退出游戏将以平局结束.."
		GetTournamentScore="对战比赛得分"
			GetTournamentScore=~Player," 的当前对战比赛得分"
			GetTournamentScoreHint="对战游戏时如果游戏时间过长,系统将以该值来决定胜负."
		GetStoredInteger="缓存读取整数 [C]"
			GetStoredInteger="从",~Game Cache,"中读取整数值,类别: ",~Category,",名称: ",~文字
			GetStoredIntegerHint="如果该值不存在则返回0."
		GetHeroLevel="英雄等级"
			GetHeroLevel=~英雄," 的英雄等级"
			GetHeroLevelHint=
		GetHeroXP="英雄经验值"
			GetHeroXP=~英雄," 的经验值"
			GetHeroXPHint=
		GetHeroStr="英雄力量 [C]"
			GetHeroStr=~英雄," 的力量值(",~Include/Exclude," 加成)"
			GetHeroStrHint=
		GetHeroAgi="英雄敏捷 [C]"
			GetHeroAgi=~英雄," 的敏捷值(",~Include/Exclude," 加成)"
			GetHeroAgiHint=
		GetHeroInt="英雄智力 [C]"
			GetHeroInt=~英雄," 的智力值(",~Include/Exclude," 加成)"
			GetHeroIntHint=
		GetHeroStatBJ="英雄属性"
			GetHeroStatBJ=~Attribute," 对 ",~英雄," (",~Include/Exclude," 加成)"
			GetHeroStatBJHint=
		GetHeroSkillPoints="未分配技能点数"
			GetHeroSkillPoints=~英雄," 的未分配技能点数"
			GetHeroSkillPointsHint=
		GetInventoryIndexOfItemTypeBJ="物品在物品栏的序号 [C]"
			GetInventoryIndexOfItemTypeBJ=~单位," 所持有的 ",~物品类型," 的物品栏序号"
			GetInventoryIndexOfItemTypeBJHint="如果单位没有该类型的物品则返回0"
		GetItemLevel="物品等级"
			GetItemLevel=~物品," 的物品等级"
			GetItemLevelHint=
		GetItemCharges="使用次数"
			GetItemCharges=~物品," 的使用次数"
			GetItemChargesHint="无限使用物品将返回0."
		GetItemUserData="物品自定义值"
			GetItemUserData=~物品," 的自定义值"
			GetItemUserDataHint="可以使用'物品 - 设置自定义值'来设置该值."
		LeaderboardGetPlayerIndexBJ="排行榜位置"
			LeaderboardGetPlayerIndexBJ=~Player," 在 ",~Leaderboard," 的排名"
			LeaderboardGetPlayerIndexBJHint=
		LeaderboardGetItemCount="行数"
			LeaderboardGetItemCount=~Leaderboard," 的行数"
			LeaderboardGetItemCountHint=
		GetRandomInt="随机整数"
			GetRandomInt="随机整数,最小值: ",~Minimum," 最大值: ",~Maximum
			GetRandomIntHint=
		IMinBJ="取较小值"
			IMinBJ="取(",~整数1,", ",~整数2,")中较小值"
			IMinBJHint=
		IMaxBJ="取较大值"
			IMaxBJ="取(",~整数1,", ",~整数2,")中较大值"
			IMaxBJHint=
		IAbsBJ="绝对值"
			IAbsBJ=~整数," 的绝对值"
			IAbsBJHint=
		ISignBJ="符号标志"
			ISignBJ=~整数," 的符号标志"
			ISignBJHint="负数为-1. 非负数为1."
		ModuloInteger="模"
			ModuloInteger=~被除数," mod ",~除数
			ModuloIntegerHint="取模计算,例: 13 mod 5 = 3."
		MultiboardGetRowCount="行数"
			MultiboardGetRowCount=~Multiboard," 的行数"
			MultiboardGetRowCountHint=
		MultiboardGetColumnCount="列数"
			MultiboardGetColumnCount=~Multiboard," 的列数"
			MultiboardGetColumnCountHint=
		GetResourceAmount="储金量"
			GetResourceAmount=~金矿," 的储金量"
			GetResourceAmountHint="只对金矿有效."
		GetPlayerState="玩家属性"
			GetPlayerState=~Player," ",~Property
			GetPlayerStateHint=
		GetPlayerTaxRate="玩家税率 [C]"
			GetPlayerTaxRate=~Player," 需要交纳给 ",~Player," 的 ",~Resource," 所得税
			GetPlayerTaxRateHint="所得税取值范围0-100."
		GetPlayerTaxRateBJ="玩家税率"
			GetPlayerTaxRateBJ=~Resource," 所得税, ",~Player," 交纳给 ",~Player
			GetPlayerTaxRateBJHint="所得税取值范围0-100."
		GetPlayerScore="玩家得分"
			GetPlayerScore=~Player," ",~Score
			GetPlayerScoreHint=
		GetConvertedPlayerId="玩家索引"
			GetConvertedPlayerId=~Player," 的玩家索引号"
			GetConvertedPlayerIdHint="玩家索引取值1-16."
		GetPlayerId="玩家索引 [C]"
			GetPlayerId=~Player," 的玩家索引号"
			GetPlayerIdHint="玩家索引取值0-15，玩家一的索引号为0"
		GetPlayerStructureCount="建筑数量"
			GetPlayerStructureCount=~Player," 拥有的建筑数量(",~Include/Exclude," 未完成的)"
			GetPlayerStructureCountHint=
		GetPlayerUnitCount="非建筑单位数量"
			GetPlayerUnitCount=~Player," 拥有的非建筑单位数量(",~Include/Exclude," 未完成的)"
			GetPlayerUnitCountHint=
		GetPlayerTechCountSimple="当前科技等级"
			GetPlayerTechCountSimple=~科技," 的当前等级对 ",~Player
			GetPlayerTechCountSimpleHint=
		GetPlayerTechMaxAllowedSwap="最大科技等级"
			GetPlayerTechMaxAllowedSwap=~科技," 的最大等级对 ",~Player
			GetPlayerTechMaxAllowedSwapHint=
		GetPlayerTeam="玩家队伍"
			GetPlayerTeam=~Player," 所属队伍编号"
			GetPlayerTeamHint=
		CountPlayersInForceBJ="玩家组中玩家数量"
			CountPlayersInForceBJ=~玩家组," 中的玩家数量"
			CountPlayersInForceBJHint=
		CountUnitsInGroup="单位组中单位数量"
			CountUnitsInGroup=~单位组," 中的单位数量"
			CountUnitsInGroupHint=
		CountLivingPlayerUnitsOfTypeId="玩家拥有单位数量"
			CountLivingPlayerUnitsOfTypeId=~单位类型," 的数量对 ",~Player
			CountLivingPlayerUnitsOfTypeIdHint=
		GetUnitFoodUsed="单位使用人口数量"
			GetUnitFoodUsed=~单位," 使用的人口数量"
			GetUnitFoodUsedHint=
		GetUnitFoodMade="单位提供人口数量"
			GetUnitFoodMade=~单位," 提供的人口数量"
			GetUnitFoodMadeHint=
		GetFoodUsed="单位使用人口数量(指定单位类型)"
			GetFoodUsed=~单位类型," 使用的人口数量"
			GetFoodUsedHint=
		GetFoodMade="单位提供人口数量(指定单位类型)"
			GetFoodMade=~单位类型," 提供的人口数量"
			GetFoodMadeHint=
		GetUnitPointValue="单位附加值"
			GetUnitPointValue=~单位," 的附加值"
			GetUnitPointValueHint="单位附加值不可改变. 可以做一些特殊用途. 比如TD地图中的建筑贩卖价格."
		GetUnitPointValueByType="单位附加值(指定单位类型)"
			GetUnitPointValueByType=~单位类型," 的附加值"
			GetUnitPointValueByTypeHint=单位附加值不可改变. 可以做一些特殊用途. 比如TD地图中的建筑贩卖价格.
		GetUnitUserData="单位自定义值"
			GetUnitUserData=~单位," 的自定义值"
			GetUnitUserDataHint="可使用'单位 - 设置自定义值'来设置该值."
		GetUnitLevel="单位等级"
			GetUnitLevel=~单位," 的等级"
			GetUnitLevelHint="对于英雄则会返回其英雄等级."
		GetUnitAbilityLevel="单位技能等级 [C]"
			GetUnitAbilityLevel=~单位," 的 ",~技能," 技能等级"
			GetUnitAbilityLevelHint="如果单位没有该技能,则返回0."
		GetUnitAbilityLevelSwapped="单位技能等级"
			GetUnitAbilityLevelSwapped=~技能," 的等级对 ",~单位
			GetUnitAbilityLevelSwappedHint="如果单位没有该技能,则返回0."
		UnitInventoryCount="持有物品数量"
			UnitInventoryCount=~单位," 所持有的物品数量"
			UnitInventoryCountHint=
		UnitInventorySizeBJ="物品栏格数"
			UnitInventorySizeBJ=~单位," 的物品栏格数"
			UnitInventorySizeBJHint=
		UnitCountBuffsEx="拥有Buff数量 [C]"
			UnitCountBuffsEx=~单位," 的附带Buff数量,(",~Include/Exclude," 正面Buff, ",~Include/Exclude," 负面Buff",~Include/Exclude," 魔法Buff, ",~Include/Exclude," 物理Buff",~Include/Exclude," 生命周期, ",~Include/Exclude," 光环效果",~Include/Exclude," 不可驱散Buff)"
			UnitCountBuffsExHint=
		UnitCountBuffsExBJ="拥有Buff数量"
			UnitCountBuffsExBJ=~Buff Type," ",~Buff Resist," Buff数量在 ",~单位," 身上(",~Include/Exclude," 生命周期, ",~Include/Exclude," 光环)"
			UnitCountBuffsExBJHint=
		GetTriggerEvalCount="触发条件判断次数"
			GetTriggerEvalCount=~Trigger," 的触发条件判断次数"
			GetTriggerEvalCountHint=
		GetTriggerExecCount="触发动作运行次数"
			GetTriggerExecCount=~Trigger," 的触发动作运行次数"
			GetTriggerExecCountHint=
		QueuedTriggerCountBJ="队列中触发数量"
			QueuedTriggerCountBJ="触发队列中的触发数量"
			QueuedTriggerCountBJHint="可使用'触发器 - 添加到队列'和'触发器 - 移出队列'动作来操作触发队列."
		YDWEGetUnitID="获取 单位 的整数地址"
			YDWEGetUnitID="获取 ",~单位," 的整数地址"
			YDWEGetUnitIDHint="可以把一个单位转成整数，方便存入缓存或Hash表。"
		YDWEGetPlayerID="获取 玩家 的整数地址"
			YDWEGetPlayerID="获取 ",~玩家," 的整数地址"
			YDWEGetPlayerIDHint="可以把一个玩家转成整数，方便存入缓存或Hash表。"
		YDWEGetItemID="获取 物品 的整数地址"
			YDWEGetItemID="获取 ",~物品," 的整数地址"
			YDWEGetItemIDHint="可以把一个物品转成整数，方便存入缓存或Hash表。"
		YDWEGetTimerID="获取 计时器 的整数地址"
			YDWEGetTimerID="获取 ",~计时器," 的整数地址"
			YDWEGetTimerIDHint="可以把一个计时器转成整数，方便存入缓存或Hash表。"
		YDWEGetTriggerID="获取 触发器 的整数地址"
			YDWEGetTriggerID="获取 ",~触发器," 的整数地址"
			YDWEGetTriggerIDHint="可以把一个触发器转成整数，方便存入缓存或Hash表。"
		YDWEGetGroupID="获取 单位组 的整数地址"
			YDWEGetGroupID="获取 ",~单位组," 的整数地址"
			YDWEGetGroupIDHint="可以把一个单位组转成整数，方便存入缓存或Hash表。"
		YDWEGetLocationID="获取 点 的整数地址"
			YDWEGetLocationID="获取 ",~点," 的整数地址"
			YDWEGetLocationIDHint="可以把一个点转成整数，方便存入缓存或Hash表。"
		YDWEGetUnitTypeID="获取 单位类型 的整数地址"
			YDWEGetUnitTypeID="获取 ",~单位类型," 的整数地址"
			YDWEGetUnitTypeIDHint="可以把一个单位类型转成整数，方便存入缓存或Hash表。"
		YDWEGetAbilityTypeID="获取 技能类型 的整数地址"
			YDWEGetAbilityTypeID="获取 ",~技能类型," 的整数地址"
			YDWEGetAbilityTypeIDHint="可以把一个技能类型转成整数，方便存入缓存或Hash表。"
		YDWEGetItemTypeID="获取 物品类型 的整数地址"
			YDWEGetItemTypeID="获取 ",~物品类型," 的整数地址"
			YDWEGetItemTypeIDHint="可以把一个物品类型转成整数，方便存入缓存或Hash表。"
		YDWEGetMultiboardID="获取 多面板 的整数地址"
			YDWEGetMultiboardID="获取 ",~多面板," 的整数地址"
			YDWEGetMultiboardIDHint="可以把一个多面板转成整数，方便存入缓存或Hash表。"
		YDWEGetMultiboardItemID="获取 多面板项目 的整数地址"
			YDWEGetMultiboardItemID="获取 ",~多面板项目," 的整数地址"
			YDWEGetMultiboardItemIDHint="可以把一个多面板项目转成整数，方便存入缓存或Hash表。"
		YDWEGetTextTagID="获取 漂浮文字 的整数地址"
			YDWEGetTextTagID="获取 ",~漂浮文字," 的整数地址"
			YDWEGetTextTagIDHint="可以把一个漂浮文字转成整数，方便存入缓存或Hash表。"
		YDWEGetLightningID="获取 闪电 的整数地址"
			YDWEGetLightningID="获取 ",~闪电," 的整数地址"
			YDWEGetLightningIDHint="可以把一个闪电成转整数，方便存入缓存或Hash表。"
		YDWEGetRegionID="获取 区域 的整数地址"
			YDWEGetRegionID="获取 ",~区域," 的整数地址"
			YDWEGetRegionIDHint="可以把一个区域转成整数，方便存入缓存或Hash表。"
		YDWEGetRectID="获取 地区 的整数地址"
			YDWEGetRectID="获取 ",~地区," 的整数地址"
			YDWEGetRectIDHint="可以把一个地区转成整数，方便存入缓存或Hash表。"
		YDWEGetLeaderboardID="获取 排行榜 的整数地址"
			YDWEGetLeaderboardID="获取 ",~排行榜," 的整数地址"
			YDWEGetLeaderboardIDHint="可以把一个排行榜转成整数，方便存入缓存或Hash表。"
		YDWEGetEffectID="获取 特效 的整数地址"
			YDWEGetEffectID="获取 ",~特效," 的整数地址"
			YDWEGetEffectIDHint="可以把一个特效转成整数，方便存入缓存或Hash表。"
		YDWEGetDestructableID="获取 可破坏物 的整数地址"
			YDWEGetDestructableID="获取 ",~可破坏物," 的整数地址"
			YDWEGetDestructableIDHint="可以把一个可破坏物转成整数，方便存入缓存或Hash表。"
		YDWEGetTriggerConditionID="获取 触发器条件 的整数地址"
			YDWEGetTriggerConditionID="获取 ",~触发器条件," 的整数地址"
			YDWEGetTriggerConditionIDHint="可以把一个触发器条件转成整数，方便存入缓存或Hash表。"
		YDWEGetTriggerActionID="获取 触发器动作 的整数地址"
			YDWEGetTriggerActionID="获取 ",~触发器动作," 的整数地址"
			YDWEGetTriggerActionIDHint="可以把一个触发器动作转成整数，方便存入缓存或Hash表。"
		YDWEGetTriggerEventID="获取 事件 的整数地址"
			YDWEGetTriggerEventID="获取 ",~事件," 的整数地址"
			YDWEGetTriggerEventIDHint="可以把一个事件转成整数，方便存入缓存或Hash表。"
		YDWEGetForceID="获取 势力 的整数地址"
			YDWEGetForceID="获取 ",~势力," 的整数地址"
			YDWEGetForceIDHint="可以把一个势力转成整数，方便存入缓存或Hash表。"
		YDWEGetBoolexprID="获取 布尔表达式 的整数地址"
			YDWEGetBoolexprID="获取 ",~布尔表达式," 的整数地址"
			YDWEGetBoolexprIDHint="可以把一个布尔表达式转成整数，方便存入缓存或Hash表。"
		GetStoredIntegerBJ="缓存读取整数"
			GetStoredIntegerBJ="从游戏缓存读取整数,名称: ",~文字," 类别: ",~Category," 缓存: ",~Game Cache
			GetStoredIntegerBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		YDWEGetObjectPropertyInteger="物体属性 (整数) [JAPI]"
			YDWEGetObjectPropertyInteger="[",~类型,"]",~物体," 的 ",~属性名,""
			YDWEGetObjectPropertyIntegerHint="属性名也就是物体编辑器里按Ctrl+D后看到的英文名 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWERecordGetI="获取存档数据 [JAPI]"
			YDWERecordGetI="从",~玩家,"的服务器存档中读出〖",~数据名,"〗"
			YDWERecordGetIHint="从玩家服务器存档上获取数据，需要填入正确的数据名。(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWERPGGetKey="读取RPG积分 [JAPI]"
			YDWERPGGetKey="从",~玩家,"的RPG积分中读出〖",~数据名,"〗"
			YDWERPGGetKeyHint="从RPG积分上获取数据，需要填入正确的数据名。"
		YDWEGetUnitAbilityDataInteger="技能数据 (整数) [JAPI]"
			YDWEGetUnitAbilityDataInteger=~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据
			YDWEGetUnitAbilityDataIntegerHint="(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWES2Id="转换字符串为ID [Y]"
			YDWES2Id="转换 ",~字符串," 为ID"
			YDWES2IdHint="将一个字符串转换成单位、物品等目标的ID；如spsh转换后为'spsh'，届时可以通过聊天输入字符串来创建单位或物品。"
	// returns real
		OperatorReal="算术运算"
			OperatorReal=~Value," ",~Operator," ",~Value
			OperatorRealHint=
		YDWEGetRealByInteger="获取 实数 (整数路径)"
			YDWEGetRealByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取实数"
			YDWEGetRealByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取实数数据。"
		YDWEGetRealByString="获取 实数 (字符串路径)"
			YDWEGetRealByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取实数"
			YDWEGetRealByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取实数数据。"
		GetLocationX="点的X轴坐标"
			GetLocationX=~点," 的X轴坐标"
			GetLocationXHint=
		GetLocationY="点的Y轴坐标"
			GetLocationY=~点," 的Y轴坐标"
			GetLocationYHint=
		GetLocationZ="点的Z轴高度 [C]"
			GetLocationZ=~点," 的Z轴高度"
			GetLocationZHint=
		GetLocationZEx="点的Z轴高度 [W]"
			GetLocationZEx=~点," 的Z轴高度"
			GetLocationZExHint="采用伪点系统,该函数自动清除伪点.无需排泄"
		CameraSetupGetField="镜头属性(指定镜头) [C]"
			CameraSetupGetField=~镜头," 的 ",~Camera Field
			CameraSetupGetFieldHint=
		CameraSetupGetFieldSwap="镜头属性(指定镜头)"
			CameraSetupGetFieldSwap=~Camera Field," 对 ",~镜头
			CameraSetupGetFieldSwapHint=
		GetCameraField="镜头属性(当前镜头)"
			GetCameraField="当前镜头的 ",~Camera Field
			GetCameraFieldHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraTargetPositionX="当前镜头目标X坐标"
			GetCameraTargetPositionX="当前镜头目标X坐标"
			GetCameraTargetPositionXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraTargetPositionY="当前镜头目标Y坐标"
			GetCameraTargetPositionY="当前镜头目标Y坐标"
			GetCameraTargetPositionYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraTargetPositionZ="当前镜头目标Z坐标"
			GetCameraTargetPositionZ="当前镜头目标Z坐标"
			GetCameraTargetPositionZHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraEyePositionX="当前镜头源X坐标"
			GetCameraEyePositionX="当前镜头源X坐标"
			GetCameraEyePositionXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraEyePositionY="当前镜头源Y坐标"
			GetCameraEyePositionY="当前镜头源Y坐标"
			GetCameraEyePositionYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraEyePositionZ="当前镜头源Z坐标"
			GetCameraEyePositionZ="当前镜头源Z坐标"
			GetCameraEyePositionZHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraBoundMinX="当前可用镜头区域最小X坐标 [C]"
			GetCameraBoundMinX="当前可用镜头区域最小X坐标"
			GetCameraBoundMinXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraBoundMinY="当前可用镜头区域最小Y坐标 [C]"
			GetCameraBoundMinY="当前可用镜头区域最小Y坐标"
			GetCameraBoundMinYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraBoundMaxX="当前可用镜头区域最大X坐标 [C]"
			GetCameraBoundMaxX="当前可用镜头区域最大X坐标"
			GetCameraBoundMaxXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraBoundMaxY="当前可用镜头区域最大Y坐标 [C]"
			GetCameraBoundMaxY="当前可用镜头区域最大Y坐标"
			GetCameraBoundMaxYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetLastTransmissionDurationBJ="最后发言长度"
			GetLastTransmissionDurationBJ="最后发言长度"
			GetLastTransmissionDurationBJHint="最后一次使用'电影 - 播送单位消息'动作的单位发言时间."
		I2R="转换整数为实数"
			I2R="转换 ",~Integer," 为实数"
			I2RHint=
		S2R="转换字符串为实数"
			S2R="转换 ",~String," 为实数"
			S2RHint=
		Deg2Rad="转换角度为弧度"
			Deg2Rad="转换角度 ",~Degrees," 为弧度"
			Deg2RadHint=
		Rad2Deg="转换弧度为角度"
			Rad2Deg="转换弧度 ",~Radians," 为角度"
			Rad2DegHint=
		
		Atan2ForCoordinate="两坐标间角度 [W]"
			Atan2ForCoordinate="坐标(",~x1,",",~y1,")与坐标(",~x2,",",~y2,")之间角度"
			Atan2ForCoordinateHint="在-180到180之间,比如(0,0)与(1,1)则返回45度.(0,0)与(-1,-1)返回-135度."
		DistanceBetweenCoordinates="两坐标间距离 [W]"
			DistanceBetweenCoordinates="坐标(",~x1,",",~y1,")与坐标(",~x2,",",~y2,")之间距离."
		GetCliffGradient="悬崖坡度 [W]"
			GetCliffGradient="坐标(",~x,",",~y,")的悬崖坡度"
		YDWEDeg2R="转换角度为实数"
			YDWEDeg2R="转换角度 ",~Degrees," 为实数"
			YDWEDeg2RHint=
		YDWERad2R="转换弧度为实数"
			YDWERad2R="转换弧度 ",~Radians," 为实数"
			YDWERad2RHint=
		YDWER2Deg="转换实数为角度"
			YDWER2Deg="转换实数 ",~Real," 为角度"
			YDWER2DegHint=
		YDWER2Rad="转换实数为弧度"
			YDWER2Rad="转换实数 ",~Real," 为弧度"
			YDWER2RadHint=
		TimerGetElapsed="逝去时间"
			TimerGetElapsed=~计时器," 的逝去时间"
			TimerGetElapsedHint=
		TimerGetRemaining="剩余时间"
			TimerGetRemaining=~计时器," 的剩余时间"
			TimerGetRemainingHint=
		TimerGetTimeout="设置时间"
			TimerGetTimeout=~计时器," 设置的时间"
			TimerGetTimeoutHint=
		GetDestructableLife="生命值"
			GetDestructableLife=~可破坏物," 的当前生命值"
			GetDestructableLifeHint=
		GetDestructableMaxLife="最大生命值"
			GetDestructableMaxLife=~可破坏物," 的最大生命值"
			GetDestructableMaxLifeHint=
		GetDestructableOccluderHeight="闭塞高度"
			GetDestructableOccluderHeight=~可破坏物," 的闭塞高度"
			GetDestructableOccluderHeightHint=
		GetDestructableX="可破坏物所在X轴坐标 [C]"
			GetDestructableX=~可破坏物," 所在X轴坐标"
			GetDestructableXHint=
		GetDestructableY="可破坏物所在Y轴坐标 [C]"
			GetDestructableY=~可破坏物," 所在Y轴坐标"
			GetDestructableYHint
		GetEventDamage="伤害值"
			GetEventDamage="单位所受伤害"
			GetEventDamageHint="响应'受到伤害'单位事件,指代单位所受伤害."
		GetOrderPointX="命令发布点X坐标 [C]"
			GetOrderPointX="命令发布点X坐标"
			GetOrderPointXHint="用坐标代替点可以省去创建、删除点的麻烦."
		GetOrderPointY="命令发布点Y坐标 [C]"
			GetOrderPointY="命令发布点Y坐标"
			GetOrderPointYHint="用坐标代替点可以省去创建、删除点的麻烦."
		GetSpellTargetX="技能施放点X坐标"
			GetSpellTargetX="获取技能目标点的X坐标"
			GetSpellTargetXHint="这是1.24的函数，但已加入函数库，在1.20也可以使用。"
		GetSpellTargetY="技能施放点Y坐标"
			GetSpellTargetY="获取技能目标点的Y坐标"
			GetSpellTargetYHint="这是1.24的函数，但已加入函数库，在1.20也可以使用。"
		GetTournamentFinishSoonTimeRemaining="比赛剩余时间"
			GetTournamentFinishSoonTimeRemaining="比赛剩余时间"
			GetTournamentFinishSoonTimeRemainingHint="响应'比赛事件'游戏将要结束. 单位为秒."
		GetTimeOfDay="游戏时间"
			GetTimeOfDay="游戏时间"
			GetTimeOfDayHint="游戏中的昼夜时间."
		GetTimeOfDayScalePercentBJ="昼夜时间流逝速度"
			GetTimeOfDayScalePercentBJ="昼夜时间流逝速度"
			GetTimeOfDayScalePercentBJHint="百分比数值, 100为默认值."
		GetStoredReal="缓存读取实数 [C]"
			GetStoredReal="从 ",~Game Cache," 中读取实数,类别: ",~Category," 名称: ",~文字
			GetStoredRealHint="如果该值不存在则返回0."
		GetItemLifeBJ="生命值"
			GetItemLifeBJ=~物品," 的当前生命值"
			GetItemLifeBJHint=
		GetItemX="物品的X轴坐标 [C]"
			GetItemX=~物品," 的X轴坐标"
			GetItemXHint=
		GetItemY="物品的Y轴坐标 [C]"
			GetItemY=~物品," 的Y轴坐标"
			GetItemYHint=
		GetLightningColorRBJ="红颜色值"
			GetLightningColorRBJ=~Lightning," 的红颜色值"
			GetLightningColorRBJHint="取值范围0-1. 可使用'闪电效果 - 改变颜色'动作来改变颜色值."
		GetLightningColorGBJ="绿颜色值"
			GetLightningColorGBJ=~Lightning," 的绿颜色值"
			GetLightningColorGBJHint="取值范围0-1. 可使用'闪电效果 - 改变颜色'动作来改变颜色值."
		GetLightningColorBBJ="蓝颜色值"
			GetLightningColorBBJ=~Lightning," 的蓝颜色值"
			GetLightningColorBBJHint="取值范围0-1. 可使用'闪电效果 - 改变颜色'动作来改变颜色值."
		GetLightningColorABJ="Alpha通道值"
			GetLightningColorABJ=~Lightning," 的Alpha通道值"
			GetLightningColorABJHint="取值范围0-1. Alpha通道值为0是完全透明的. 可使用'闪电效果 - 改变颜色'动作来改变Alpha通道值."
		GetRandomReal="随机实数"
			GetRandomReal="随机实数,最小值: ",~Minimum," 最大值: ",~Maximum
			GetRandomRealHint=
		GetRandomDirectionDeg="随机角度"
			GetRandomDirectionDeg="随机角度"
			GetRandomDirectionDegHint="0-360的随机角度."
		GetRandomPercentageBJ="随机百分数"
			GetRandomPercentageBJ="随机百分数"
			GetRandomPercentageBJHint="0-100的随机实数."
		DistanceBetweenPoints="两点间距"
			DistanceBetweenPoints=~点," 和 ",~点," 之间的距离"
			DistanceBetweenPointsHint=
		AngleBetweenPoints="两点间方向"
			AngleBetweenPoints=~点," 到 ",~点," 的角度"
			AngleBetweenPointsHint="取值-180 - 180."
		AngleBetweenPointsEx="两伪点间方向 [W]"
			AngleBetweenPointsEx=~伪点," 到 ",~伪点," 的角度"
			AngleBetweenPointsExHint="取值-180 - 180.采用伪点系统,该函数自动清除伪点.无需排泄"
		RMinBJ="取较小值"
			RMinBJ="取(",~实数1,", ",~实数2,")中较小值"
			RMinBJHint=
		RMaxBJ="取较大值"
			RMaxBJ="取(",~实数1,", ",~实数2,")中较大值"
			RMaxBJHint=
		RAbsBJ="绝对值"
			RAbsBJ=~实数," 的绝对值"
			RAbsBJHint=
		RSignBJ="符号标志"
			RSignBJ=~实数," 的符号标志"
			RSignBJHint="负数为-1. 非负数为1."
		ModuloReal="模"
			ModuloReal=~被除数," mod ",~除数
			ModuloRealHint="取模计算,例: 9.0 mod 2.5 = 1.5."
		Pow="幂运算"
			Pow=~实数," 的 ",~实数," 次幂"
			PowHint=
		SquareRoot="平方根"
			SquareRoot=~实数," 的平方根"
			SquareRootHint=
		Sin="正弦(弧度) [C]"
			Sin="Sin(",~Angle,")"
			SinHint="采用弧度制计算. "
		SinBJ="正弦(角度)"
			SinBJ="Sin(",~Angle,")"
			SinBJHint="采用角度制计算."
		Cos="余弦(弧度) [C]"
			Cos="Cos(",~Angle,")"
			CosHint="采用弧度制计算. "
		CosBJ="余弦(角度)"
			CosBJ="Cos(",~Angle,")"
			CosBJHint="采用角度制计算."
		Tan="正切(弧度) [C]"
			Tan="Tan(",~Angle,")"
			TanHint="采用弧度制计算. "
		TanBJ="正切(角度)"
			TanBJ="Tan(",~Angle,")"
			TanBJHint="采用角度制计算."
		Asin="反正弦(弧度) [C]"
			Asin="Asin(",~数值,")"
			AsinHint="采用弧度制计算. 返回弧度取值-π/2 — π/2. "
		AsinBJ="反正弦(角度)"
			AsinBJ="Asin(",~数值,")"
			AsinBJHint="采用角度制计算. 返回角度取值-90 — 90."
		Acos="反余弦(弧度) [C]"
			Acos="Acos(",~数值,")"
			AcosHint="采用弧度制计算. 返回弧度取值0 — π. "
		AcosBJ="反余弦(角度)"
			AcosBJ="Acos(",~数值,")"
			AcosBJHint="采用角度制计算. 返回角度取值0 — 180."
		Atan="反正切(弧度) [C]"
			Atan="Atan(",~数值,")"
			AtanHint="采用弧度制计算. 返回弧度取值-π/2 — π/2. "
		AtanBJ="反正切(角度)"
			AtanBJ="Atan(",~数值,")"
			AtanBJHint="采用角度制计算. 返回角度取值-90 — 90."
		Atan2="反正切(Y:X)(弧度) [C]"
			Atan2="Atan(",~Y," : ",~X,")"
			Atan2Hint="采用弧度制计算. 返回弧度取值-π/2 — π/2. "
		Atan2BJ="反正切(角度)(Y:X)"
			Atan2BJ="Atan(",~Y," : ",~X,")"
			Atan2BJHint="采用角度制计算. 返回角度取值-90 — 90."
		YDWELogarithmLg="对数函数(10为底)<c kuhn制作>"
			YDWELogarithmLg="Lg(",~x,")"
			YDWELogarithmLgHint="10^n=x，那么lg(x)=n，如lg(100)=2；鸣谢zyl910"
		YDWELogarithmLn="对数函数(e为底)<c kuhn制作>"
			YDWELogarithmLn="Ln(",~x,")"
			YDWELogarithmLnHint="e^n=x，那么ln(x)=n，e即自然对数，约等于2.718281828；鸣谢zyl910"
		YDWELogarithmLog="对数函数(任意底)<c kuhn制作>"
			YDWELogarithmLog="Log(",~a,")(",~b,")"
			YDWELogarithmLogHint="a^n=b，那么log(a)(b)=n，如log(2)(4)=2；鸣谢zyl910"
		GetPlayerHandicapXPBJ="经验增长率"
			GetPlayerHandicapXPBJ=~Player," 的经验增长率"
			GetPlayerHandicapXPBJHint="百分比数值, 默认值为100."
		GetPlayerHandicapBJ="生命障碍"
			GetPlayerHandicapBJ=~Player," 的生命障碍"
			GetPlayerHandicapBJHint="百分比数值, 默认值为100."
		GetRectCenterX="中心X坐标"
			GetRectCenterX=~矩形区域," 的中心X坐标"
			GetRectCenterXHint=
		GetRectCenterY="中心Y坐标"
			GetRectCenterY=~矩形区域," 的中心Y坐标"
			GetRectCenterYHint=
		GetRectMinX="左下角X坐标"
			GetRectMinX=~矩形区域," 的左下角X坐标"
			GetRectMinXHint=
		GetRectMinY="左下角Y坐标"
			GetRectMinY=~矩形区域," 的左下角Y坐标"
			GetRectMinYHint=
		GetRectMaxX="右上角X坐标"
			GetRectMaxX=~矩形区域," 的右上角X坐标"
			GetRectMaxXHint=
		GetRectMaxY="右上角Y坐标"
			GetRectMaxY=~矩形区域," 的右上角Y坐标"
			GetRectMaxYHint=
		GetRectWidthBJ="宽度"
			GetRectWidthBJ=~矩形区域," 的宽度"
			GetRectWidthBJHint=
		GetRectHeightBJ="高度"
			GetRectHeightBJ=~矩形区域," 的高度"
			GetRectHeightBJHint=
		GetSoundDurationBJ="音效长度"
			GetSoundDurationBJ=~音效," 的长度"
			GetSoundDurationBJHint="单位为秒."
		GetSoundFileDurationBJ="音乐长度"
			GetSoundFileDurationBJ=~音乐," 的长度"
			GetSoundFileDurationBJHint="单位为秒."
		WaygateGetDestinationX="传送门目的地X坐标"
			WaygateGetDestinationX=~传送门," 的目的地X坐标"
			WaygateGetDestinationXHint=""
		WaygateGetDestinationY="传送门目的地Y坐标"
			WaygateGetDestinationY=~传送门," 的目的地Y坐标"
			WaygateGetDestinationYHint=""
		GetUnitState="属性 [C]"
			GetUnitState=~单位," 的 ",~Property
			GetUnitStateHint=
		GetUnitStateSwap="属性"
			GetUnitStateSwap=~Property," 对于 ",~单位
			GetUnitStateSwapHint=
		GetUnitLifePercent="生命百分比"
			GetUnitLifePercent=~单位," 的生命百分比"
			GetUnitLifePercentHint=
		GetUnitManaPercent="魔法百分比"
			GetUnitManaPercent=~单位," 的魔法百分比"
			GetUnitManaPercentHint=
		GetUnitX="单位所在X轴坐标 [C]"
			GetUnitX=~单位," 所在X轴坐标"
			GetUnitXHint=
		GetUnitY="单位所在Y轴坐标 [C]"
			GetUnitY=~单位," 所在Y轴坐标"
			GetUnitYHint=
		GetUnitFacing="面向角度"
			GetUnitFacing=~单位," 的面向角度"
			GetUnitFacingHint="采用角度制. 0度为正东方向, 90度为正北方向."
		GetUnitMoveSpeed="当前移动速度"
			GetUnitMoveSpeed=~单位," 的当前移动速度"
			GetUnitMoveSpeedHint=
		GetUnitDefaultMoveSpeed="默认移动速度"
			GetUnitDefaultMoveSpeed=~单位," 的默认移动速度"
			GetUnitDefaultMoveSpeedHint=
		GetUnitAcquireRange="当前主动攻击范围"
			GetUnitAcquireRange=~单位," 的当前主动攻击范围"
			GetUnitAcquireRangeHint=
		GetUnitDefaultAcquireRange="默认主动攻击范围"
			GetUnitDefaultAcquireRange=~单位," 的默认主动攻击范围"
			GetUnitDefaultAcquireRangeHint=
		GetUnitTurnSpeed="当前转身速度"
			GetUnitTurnSpeed=~单位," 的当前转身速度"
			GetUnitTurnSpeedHint="转身速度表示单位改变面向方向时的速度. 数值越小表示转身越慢."
		GetUnitDefaultTurnSpeed="默认转身速度"
			GetUnitDefaultTurnSpeed=~单位," 的默认转身速度"
			GetUnitDefaultTurnSpeedHint="转身速度表示单位改变面向方向时的速度. 数值越小表示转身越慢."
		GetUnitPropWindow="当前转向角度(弧度制) [C]"
			GetUnitPropWindow=~单位," 的当前转向角度(弧度制)"
			GetUnitPropWindowHint="单位转身时的转向角度. 数值越大转向幅度越大. "
		GetUnitPropWindowBJ="当前转向角度(角度制)"
			GetUnitPropWindowBJ=~单位," 的当前转向角度"
			GetUnitPropWindowBJHint="单位转身时的转向角度. 数值越大转向幅度越大."
		GetUnitDefaultPropWindowBJ="默认转向角度"
			GetUnitDefaultPropWindowBJ=~单位," 的默认转向角度"
			GetUnitDefaultPropWindowBJHint="单位转身时的转向角度. 数值越大转向幅度越大."
		GetUnitFlyHeight="当前飞行高度"
			GetUnitFlyHeight=~单位," 的当前飞行高度"
			GetUnitFlyHeightHint="飞行单位可以直接改变飞行高度. 其他单位通过添加/删除 替换为飞行单位的变身技能(如乌鸦形态)之后,也能改变飞行高度."
		GetUnitDefaultFlyHeight="默认飞行高度"
			GetUnitDefaultFlyHeight=~单位," 的默认飞行高度"
			GetUnitDefaultFlyHeightHint="飞行单位可以直接改变飞行高度. 其他单位通过添加/删除 替换为飞行单位的变身技能(如乌鸦形态)之后,也能改变飞行高度."
		GetStoredRealBJ="缓存读取实数"
			GetStoredRealBJ="从游戏缓存读取实数,名称: ",~文字," 类别: ",~Category," 缓存: ",~Game Cache
			GetStoredRealBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		DYCDisBtwCoords="两坐标间距离 [D]"
			DYCDisBtwCoords="坐标 (",~X坐标,", ",~Y坐标,") 与坐标 (",~X坐标,", ",~Y坐标,") 之间的距离"
			DYCDisBtwCoordsHint="免去创建点或者大量嵌套算术运算 （来自DYC 1.03）"
		DYCDisSqrBtwCoords="两坐标间距离的平方 [D]"
			DYCDisSqrBtwCoords="坐标 (",~X坐标,", ",~Y坐标,") 与坐标 (",~X坐标,", ",~Y坐标,") 间距离的平方."
			DYCDisSqrBtwCoordsHint="用于比较距离,省略开平方步骤,略微节省效率 （来自DYC 1.03）"
		DYCDisBtwCoordNLine="坐标到直线的距离 [D]"
			DYCDisBtwCoordNLine="坐标 (",~X坐标,", ",~Y坐标,") 到坐标 (",~X坐标,", ",~Y坐标,") 与坐标 (",~X坐标,", ",~Y坐标,") 所在直线的距离."
			DYCDisBtwCoordNLineHint="获取坐标到另外两坐标所在直线的距离 （来自DYC 1.03）"
		GetDYCDDValue="被显示的伤害 [D]"
			GetDYCDDValue="被显示的伤害"
			GetDYCDDValueHint="响应'伤害显示完毕'事件,指代伤害显示系统统计出的伤害. （来自DYC 1.03）"
		DYCAngleBtwCoords="两坐标间方向 [D]"
			DYCAngleBtwCoords="从坐标 (",~X坐标,", ",~Y坐标,") 到坐标 (",~X坐标,", ",~Y坐标,") 的角度"
			DYCAngleBtwCoordsHint="取值 -180~180 （来自DYC 1.03）"
		YDWEGetObjectPropertyReal="物体属性 (实数) [JAPI]"
			YDWEGetObjectPropertyReal="[",~类型,"]",~物体," 的 ",~属性名,""
			YDWEGetObjectPropertyRealHint="属性名也就是物体编辑器里按Ctrl+D后看到的英文名 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEGetUnitAbilityState="技能属性 [JAPI]"
			YDWEGetUnitAbilityState=~单位," 的 ",~技能," 的 ",~状态
			YDWEGetUnitAbilityStateHint="(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEGetUnitAbilityDataReal="技能数据 (实数) [JAPI]"
			YDWEGetUnitAbilityDataReal=~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据
			YDWEGetUnitAbilityDataRealHint="数据A~数据I也就是物体编辑器里按Ctrl+D后看到的DataA~DataI (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWECoordinateX="修正X坐标"
			YDWECoordinateX="需要修正的X坐标为：",~实数
			YDWECoordinateXHint="设修正X坐标，强制它大于地图边界最小值，小于地图边界最大值，避免弹出游戏错误。"
		YDWECoordinateY="修正Y坐标"
			YDWECoordinateY="需要修正的Y坐标为：",~实数
			YDWECoordinateYHint="设修正Y坐标，强制它大于地图边界最小值，小于地图边界最大值，避免弹出游戏错误。"
		YDWEDistanceBetweenUnits="两个单位之间的距离"
			YDWEDistanceBetweenUnits="从",~单位,"到",~单位,"的距离"
			YDWEDistanceBetweenUnitsHint="获取两个单位之间的距离。"
		YDWEGetUnitArmor="获取单位护甲<Rising_Dusk制作>"
			YDWEGetUnitArmor="获取 ",~单位," 的护甲值，关联技能为 ",~辅助技能
			YDWEGetUnitArmorHint="可以获取单位的护甲值；需要保证混乱攻击对所有护甲均为100%伤害。关联技能的设置请参考example文件夹下的辅助地图。"
		YDWE_TP_GetElapsedTime="获取中心计时器逝去时间<Fetrix_sai制作>"
			YDWE_TP_GetElapsedTime="获取运行索引为 ",~计时器运行索引," 的计时器逝去时间"
			YDWE_TP_GetElapsedTimeHint=""
		YDWE_TP_GetRemainingTime="获取中心计时器剩余时间<Fetrix_sai制作>"
			YDWE_TP_GetRemainingTime="获取运行索引为 ",~计时器运行索引," 的计时器剩余时间"
			YDWE_TP_GetRemainingTimeHint=""
		YDWE_TP_GetTimeout="获取中心计时器刷新周期<Fetrix_sai制作>"
			YDWE_TP_GetTimeout="获取运行索引为 ",~计时器运行索引," 的计时器刷新周期"
			YDWE_TP_GetTimeoutHint=""
		YDWEAngleBetweenUnits="两个单位之间的角度"
			YDWEAngleBetweenUnits="从",~单位,"到",~单位,"的角度"
			YDWEAngleBetweenUnitsHint="获取两个单位之间的角度。"
	// returns hashtable
		LoadIntegerBJ="从哈希表提取整数"
			LoadIntegerBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取整数"
			LoadIntegerBJHint="如果不存在则返回0"
		LoadInteger="从哈希表提取整数 [C]"
			LoadInteger="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取整数"
			LoadIntegerHint="如果不存在则返回0"
		LoadRealBJ="从哈希表提取实数"
			LoadRealBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取实数"
			LoadRealBJHint="如果不存在则返回0.00"
		LoadReal="从哈希表提取实数 [C]"
			LoadReal="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取实数"
			LoadRealHint="如果不存在则返回0.00"
		LoadStringBJ="从哈希表提取字符串"
			LoadStringBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取字符串"
			LoadStringBJHint="如果不存在则返回空字符串"
		LoadStr="从哈希表提取字符串 [C]"
			LoadStr="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取字符串"
			LoadStrHint="如果不存在则返回空"
		LoadBooleanBJ="从哈希表提取布尔"
			LoadBooleanBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取布尔"
			LoadBooleanBJHint="如果不存在则返回False"
		LoadBoolean="从哈希表提取布尔 [C]"
			LoadBoolean="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取布尔"
			LoadBooleanHint="如果不存在则返回False"
		LoadPlayerHandleBJ="从哈希表提取玩家"
			LoadPlayerHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取玩家"
			LoadPlayerHandleBJHint="如果不存在则返回空"
		LoadPlayerHandle="从哈希表提取玩家 [C]"
			LoadPlayerHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取玩家"
			LoadPlayerHandleHint="如果不存在则返回空"
		LoadWidgetHandleBJ="从哈希表提取物体"
			LoadWidgetHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取物体"
			LoadWidgetHandleBJHint="如果不存在则返回空"
		LoadWidgetHandle="从哈希表提取物体 [C]"
			LoadWidgetHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取物体"
			LoadWidgetHandleHint="如果不存在则返回空"
		LoadDestructableHandleBJ="从哈希表提取可破坏物"
			LoadDestructableHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取可破坏物"
			LoadDestructableHandleBJHint="如果不存在则返回空"
		LoadDestructableHandle="从哈希表提取可破坏物 [C]"
			LoadDestructableHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取可破坏物"
			LoadDestructableHandleHint="如果不存在则返回空"
		LoadItemHandleBJ="从哈希表提取物品"
			LoadItemHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取物品"
			LoadItemHandleBJHint="如果不存在则返回空"
		LoadItemHandle="从哈希表提取物品 [C]"
			LoadItemHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取物品"
			LoadItemHandleHint="如果不存在则返回空"
		LoadUnitHandleBJ="从哈希表提取单位"
			LoadUnitHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取单位"
			LoadUnitHandleBJHint="如果不存在则返回空"
		LoadUnitHandle="从哈希表提取单位 [C]"
			LoadUnitHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取单位"
			LoadUnitHandleHint="如果不存在则返回空"
		LoadAbilityHandleBJ="从哈希表提取技能"
			LoadAbilityHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取技能"
			LoadAbilityHandleBJHint="如果不存在则返回空"
		LoadAbilityHandle="从哈希表提取技能 [C]"
			LoadAbilityHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取技能"
			LoadAbilityHandleHint="如果不存在则返回空"
		YDWELoadAbilityHandleBJ="从哈希表提取技能"
			YDWELoadAbilityHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取技能"
			YDWELoadAbilityHandleBJHint="如果不存在则返回空"
		YDWELoadAbilityHandle="从哈希表提取技能 [C]"
			YDWELoadAbilityHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取技能"
			YDWELoadAbilityHandleHint="如果不存在则返回空"
		LoadTimerHandleBJ="从哈希表提取计时器"
			LoadTimerHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取计时器"
			LoadTimerHandleBJHint="如果不存在则返回空"
		LoadTimerHandle="从哈希表提取计时器 [C]"
			LoadTimerHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取计时器"
			LoadTimerHandleHint="如果不存在则返回空"
		LoadTriggerHandleBJ="从哈希表提取触发器"
			LoadTriggerHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取触发器"
			LoadTriggerHandleBJHint="如果不存在则返回空"
		LoadTriggerHandle="从哈希表提取触发器 [C]"
			LoadTriggerHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取触发器"
			LoadTriggerHandleHint="如果不存在则返回空"
		LoadTriggerConditionHandleBJ="从哈希表提取触发条件"
			LoadTriggerConditionHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取触发条件"
			LoadTriggerConditionHandleBJHint="如果不存在则返回空"
		LoadTriggerConditionHandle="从哈希表提取触发条件 [C]"
			LoadTriggerConditionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取触发条件"
			LoadTriggerConditionHandleHint="如果不存在则返回空"
		LoadTriggerActionHandleBJ="从哈希表提取触发动作"
			LoadTriggerActionHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取触发动作"
			LoadTriggerActionHandleBJHint="如果不存在则返回空"
		LoadTriggerActionHandle="从哈希表提取触发动作 [C]"
			LoadTriggerActionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取触发动作"
			LoadTriggerActionHandleHint="如果不存在则返回空"
		LoadTriggerEventHandleBJ="从哈希表提取触发事件"
			LoadTriggerEventHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取触发事件"
			LoadTriggerEventHandleBJHint="如果不存在则返回空"
		LoadTriggerEventHandle="从哈希表提取触发事件 [C]"
			LoadTriggerEventHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取触发事件"
			LoadTriggerEventHandleHint="如果不存在则返回空"
		LoadForceHandleBJ="从哈希表提取玩家组"
			LoadForceHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取玩家组"
			LoadForceHandleBJHint="如果不存在则返回空"
		LoadForceHandle="从哈希表提取玩家组 [C]"
			LoadForceHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取玩家组"
			LoadForceHandleHint="如果不存在则返回空"
		LoadGroupHandleBJ="从哈希表提取单位组"
			LoadGroupHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取单位组"
			LoadGroupHandleBJHint="如果不存在则返回空"
		LoadGroupHandle="从哈希表提取单位组 [C]"
			LoadGroupHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取单位组"
			LoadGroupHandleHint="如果不存在则返回空"
		LoadLocationHandleBJ="从哈希表提取点"
			LoadLocationHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取点"
			LoadLocationHandleBJHint="如果不存在则返回空"
		LoadLocationHandle="从哈希表提取点 [C]"
			LoadLocationHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取点"
			LoadLocationHandleHint="如果不存在则返回空"
		LoadRegionHandleBJ="从哈希表提取区域(不规则)"
			LoadRegionHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取区域(不规则)"
			LoadRegionHandleBJHint="如果不存在则返回空"
		LoadRegionHandle="从哈希表提取区域(不规则) [C]"
			LoadRegionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取区域(不规则)"
			LoadRegionHandleHint="如果不存在则返回空"
		LoadRectHandleBJ="从哈希表提取区域(矩型)"
			LoadRectHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取区域(矩型)"
			LoadRectHandleBJHint="如果不存在则返回空"
		LoadRectHandle="从哈希表提取区域(矩型) [C]"
			LoadRectHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取区域(矩型)"
			LoadRectHandleHint="如果不存在则返回空"
		LoadBooleanExprHandleBJ="从哈希表提取布尔表达式"
			LoadBooleanExprHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取布尔表达式"
			LoadBooleanExprHandleBJHint="如果不存在则返回空"
		LoadBooleanExprHandle="从哈希表提取布尔表达式 [C]"
			LoadBooleanExprHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取布尔表达式"
			LoadBooleanExprHandleHint="如果不存在则返回空"
		LoadSoundHandleBJ="从哈希表提取音效"
			LoadSoundHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取音效"
			LoadSoundHandleBJHint="如果不存在则返回空"
		LoadSoundHandle="从哈希表提取音效 [C]"
			LoadSoundHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取音效"
			LoadSoundHandleHint="如果不存在则返回空"
		LoadEffectHandleBJ="从哈希表提取特效"
			LoadEffectHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取特效"
			LoadEffectHandleBJHint="如果不存在则返回空"
		LoadEffectHandle="从哈希表提取特效 [C]"
			LoadEffectHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取特效"
			LoadEffectHandleHint="如果不存在则返回空"
		LoadUnitPoolHandleBJ="从哈希表提取单位池"
			LoadUnitPoolHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取单位池"
			LoadUnitPoolHandleBJHint="如果不存在则返回空"
		LoadUnitPoolHandle="从哈希表提取单位池 [C]"
			LoadUnitPoolHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取单位池"
			LoadUnitPoolHandleHint="如果不存在则返回空"
		LoadItemPoolHandleBJ="从哈希表提取物品池"
			LoadItemPoolHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取物品池"
			LoadItemPoolHandleBJHint="如果不存在则返回空"
		LoadItemPoolHandle="从哈希表提取物品池 [C]"
			LoadItemPoolHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取物品池"
			LoadItemPoolHandleHint="如果不存在则返回空"
		LoadQuestHandleBJ="从哈希表提取任务"
			LoadQuestHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取任务"
			LoadQuestHandleBJHint="如果不存在则返回空"
		LoadQuestHandle="从哈希表提取任务 [C]"
			LoadQuestHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取任务"
			LoadQuestHandleHint="如果不存在则返回空"
		LoadQuestItemHandleBJ="从哈希表提取任务要求"
			LoadQuestItemHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取任务要求"
			LoadQuestItemHandleBJHint="如果不存在则返回空"
		LoadQuestItemHandle="从哈希表提取任务要求 [C]"
			LoadQuestItemHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取任务要求"
			LoadQuestItemHandleHint="如果不存在则返回空"
		LoadDefeatConditionHandleBJ="从哈希表提取失败条件"
			LoadDefeatConditionHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取失败条件"
			LoadDefeatConditionHandleBJHint="如果不存在则返回空"
		LoadDefeatConditionHandle="从哈希表提取失败条件 [C]"
			LoadDefeatConditionHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取失败条件"
			LoadDefeatConditionHandleHint="如果不存在则返回空"
		LoadTimerDialogHandleBJ="从哈希表提取计时器窗口"
			LoadTimerDialogHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取计时器窗口"
			LoadTimerDialogHandleBJHint="如果不存在则返回空"
		LoadTimerDialogHandle="从哈希表提取计时器窗口 [C]"
			LoadTimerDialogHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取计时器窗口"
			LoadTimerDialogHandleHint="如果不存在则返回空"
		LoadLeaderboardHandleBJ="从哈希表提取排行榜"
			LoadLeaderboardHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取排行榜"
			LoadLeaderboardHandleBJHint="如果不存在则返回空"
		LoadLeaderboardHandle="从哈希表提取排行榜 [C]"
			LoadLeaderboardHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取排行榜"
			LoadLeaderboardHandleHint="如果不存在则返回空"
		LoadMultiboardHandleBJ="从哈希表提取多面板"
			LoadMultiboardHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取多面板"
			LoadMultiboardHandleBJHint="如果不存在则返回空"
		LoadMultiboardHandle="从哈希表提取多面板 [C]"
			LoadMultiboardHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取多面板"
			LoadMultiboardHandleHint="如果不存在则返回空"
		LoadMultiboardItemHandleBJ="从哈希表提取多面板项目"
			LoadMultiboardItemHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取多面板项目"
			LoadMultiboardItemHandleBJHint="如果不存在则返回空"
		LoadMultiboardItemHandle="从哈希表提取多面板项目 [C]"
			LoadMultiboardItemHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取多面板项目"
			LoadMultiboardItemHandleHint="如果不存在则返回空"
		LoadTrackableHandleBJ="从哈希表提取可追踪物"
			LoadTrackableHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取可追踪物"
			LoadTrackableHandleBJHint="如果不存在则返回空"
		LoadTrackableHandle="从哈希表提取可追踪物 [C]"
			LoadTrackableHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取可追踪物"
			LoadTrackableHandleHint="如果不存在则返回空"
		LoadDialogHandleBJ="从哈希表提取对话框"
			LoadDialogHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取对话框"
			LoadDialogHandleBJHint="如果不存在则返回空"
		LoadDialogHandle="从哈希表提取对话框 [C]"
			LoadDialogHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取对话框"
			LoadDialogHandleHint="如果不存在则返回空"
		LoadButtonHandleBJ="从哈希表提取对话框按钮"
			LoadButtonHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取对话框按钮"
			LoadButtonHandleBJHint="如果不存在则返回空"
		LoadButtonHandle="从哈希表提取对话框按钮 [C]"
			LoadButtonHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取对话框按钮"
			LoadButtonHandleHint="如果不存在则返回空"
		LoadTextTagHandleBJ="从哈希表提取漂浮文字"
			LoadTextTagHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取漂浮文字"
			LoadTextTagHandleBJ="如果不存在则返回空"
		LoadTextTagHandle="从哈希表提取漂浮文字 [C]"
			LoadTextTagHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取漂浮文字"
			LoadTextTagHandle="如果不存在则返回空"
		LoadLightningHandleBJ="从哈希表提取闪电效果"
			LoadLightningHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取闪电效果"
			LoadLightningHandleBJHint="如果不存在则返回空"
		LoadLightningHandle="从哈希表提取闪电效果 [C]"
			LoadLightningHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取闪电效果"
			LoadLightningHandleHint="如果不存在则返回空"
		LoadImageHandleBJ="从哈希表提取图象"
			LoadImageHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取图象"
			LoadImageHandleBJHint="如果不存在则返回空"
		LoadImageHandle="从哈希表提取图象 [C]"
			LoadImageHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取图象"
			LoadImageHandleHint="如果不存在则返回空"
		LoadUbersplatHandleBJ="从哈希表提取地面纹理变化"
			LoadUbersplatHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取地面纹理变化"
			LoadUbersplatHandleBJHint="如果不存在则返回空"
		LoadUbersplatHandle="从哈希表提取地面纹理变化 [C]"
			LoadUbersplatHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取地面纹理变化"
			LoadUbersplatHandleHint="如果不存在则返回空"
		LoadFogStateHandleBJ="从哈希表提取迷雾状态"
			LoadFogStateHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取迷雾状态"
			LoadFogStateHandleBJHint="如果不存在则返回空"
		LoadFogStateHandle="从哈希表提取迷雾状态 [C]"
			LoadFogStateHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取迷雾状态"
			LoadFogStateHandleHint="如果不存在则返回空"
		LoadFogModifierHandleBJ="从哈希表提取可见度修正器"
			LoadFogModifierHandleBJ="在子索引 ",~Value," 主索引 ",~Value," 的 ",~Hashtable," 内提取可见度修正器"
			LoadFogModifierHandleBJHint="如果不存在则返回空"
		LoadFogModifierHandle="从哈希表提取可见度修正器 [C]"
			LoadFogModifierHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取可见度修正器"
			LoadFogModifierHandleHint="如果不存在则返回空"
		LoadHashtableHandle="从哈希表提取哈希表 [C]"
			LoadHashtableHandle="在 ",~Hashtable," 的主索引 ",~Value," 子索引 ",~Value," 内提取哈希表"
			LoadHashtableHandleHint="如果不存在则返回空"
	// returns string
		XYConvertTimeStampToTime="转换UNIX时间戳为时间 [X]"
			XYConvertTimeStampToTime="转换 ",~UNIX时间戳," 为时间字符串"
			XYConvertTimeStampToTimeHint="时间字符串的格式为 年/月/日 时:分:秒，会自动进行 UTC+8 处理"
		OperatorString="连接字符串"
			OperatorString=~字符串1," + ",~字符串2
			OperatorStringHint=
		GetObjectName="物体名称 [C]"
			GetObjectName=~物体ID," 的名称"
			GetObjectNameHint="如'A01Z',物体编辑器中物体的名字"
		SubStringBJ="截取字符串"
			SubStringBJ="截取 ",~字符串," 的 ",~Start," - ",~End," 字节部分"
			SubStringBJHint="例: 截取''Grunts stink''的2 - 4字节部分 = ''run''."
		SubString="截取字符串 [C]"
			SubString="截取 ",~字符串," 的 ",~Start," - ",~End," 字节部分(不包括首字节)"
			SubStringHint="例: 截取''Grunts stink''的2 - 4字节部分 = ''un''."
		YDWEGetPlayerColorString="附加上玩家颜色"
			YDWEGetPlayerColorString="|c[",~玩家,"]",~Start,"|r"
			YDWEGetPlayerColorStringHint=
		YDWEId2S="转换Id为字符串"
			YDWEId2S="需要转换的Id为：",~整数
			YDWEId2SHint="将一个单位、物品等目标的Id转换成字符串；如'spsh'转换后为spsh。"
		I2S="转换整数为字符串"
			I2S="转换 ",~Integer," 为字符串"
			I2SHint=
		R2S="转换实数为字符串"
			R2S="转换 ",~Real," 为字符串"
			R2SHint=
		YDWE_PreloadSL_GetFile="获取存档名(存档名单)"
			YDWE_PreloadSL_GetFile="为",~玩家,"在","『",~目录名,"』","下","，","获","取","索","引","为","[",~整数,"]","的","存","档","名"
			YDWE_PreloadSL_GetFileHint="高级功能，获取指定目录下某个玩家存档文件的名字，填写正确的索引，即可获得对应存档名。"
		YDWEGetStringByInteger="获取 字符串 (整数路径)"
			YDWEGetStringByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取字符串"
			YDWEGetStringByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取字符串数据。"
		YDWEGetStringByString="获取 字符串 (字符串路径)"
			YDWEGetStringByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取字符串"
			YDWEGetStringByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取字符串数据。"
		R2SW="格式转换实数为字符串"
			R2SW="转换 ",~Real," 为字符串,最小宽度: ",~Width," ,小数位数: ",~Precision
			R2SWHint="如: 转换(1.234, 7, 2)后为''   1.23''. 转换(1.234, 2, 5)后为''1.23400''."
		OrderId2StringBJ="转换命令ID为字符串"
			OrderId2StringBJ="转换 ",~Order," 为命令字符串"
			OrderId2StringBJHint="如''harvest'', ''move'', ''smart'', ''attack''都是命令字符串."
		UnitId2StringBJ="转换单位类型为字符串"
			UnitId2StringBJ="转换 ",~单位类型," 为字符串"
			UnitId2StringBJHint=
		GetLocalizedString="本地字符串 [C]"
			GetLocalizedString="本地字符串: ",~文字
			GetLocalizedStringHint="获取ui\framedef\globalstrings.fdf中定义的字符串."
		StringIdentity="本地字符串"
			StringIdentity="本地字符串: ",~文字
			StringIdentityHint="获取ui\framedef\globalstrings.fdf中定义的字符串."
		GetLocalizedHotkey="本地热键"
			GetLocalizedHotkey="本地热键: ",~文字
			GetLocalizedHotkeyHint="获取ui\miscui.txt中定义的热键."
		StringCase="大小写转换"
			StringCase="转换 ",~字符串," 为 ",~Lower/Upper Case," 形式"
			StringCaseHint=
		GetDestructableName="物件名字"
			GetDestructableName=~物件," 的名字"
			GetDestructableNameHint=
		GetEventPlayerChatString="输入的聊天信息"
			GetEventPlayerChatString="输入的聊天信息"
			GetEventPlayerChatStringHint=
		GetEventPlayerChatStringMatched="匹配的聊天信息"
			GetEventPlayerChatStringMatched="匹配的聊天信息"
			GetEventPlayerChatStringMatchedHint=
		GetSaveBasicFilename="存档文件名"
			GetSaveBasicFilename="存档文件名"
			GetSaveBasicFilenameHint="响应'游戏 - 保存进度'事件."
		GetAbilityName="技能名称"
			GetAbilityName=~技能," 的名称"
			GetAbilityNameHint=
		GetAbilityEffectBJ="技能效果路径名"
			GetAbilityEffectBJ=~技能," 的 ",~EffectType," 路径名(序号: ",~Index,")"
			GetAbilityEffectBJHint="返回技能效果的模型路径,不管该效果是否存在.实际上就是技能编辑器中按Ctrl+D看到的文本内容. 该效果有多个模型时,序号表示取哪一个模型,如果该序号对应的文本内容不存在则返回上一序号."
		GetAbilitySoundBJ="技能音效名"
			GetAbilitySoundBJ=~技能," 的 ",~SoundType," 名字"
			GetAbilitySoundBJHint="同样,实际上就是技能编辑器中按Ctrl+D看到的文本内容."
		GetStoredString="读取字符串 [C]"
			GetStoredString="从 ",~Game Cache," 中读取字符串,类别: ",~Category," 名称: ",~文字
			GetStoredStringHint="如果该值不存在,则返回空字符串. 注意,空字符串不等于null"
		GetHeroProperName="英雄称谓"
			GetHeroProperName=~Hero," 的称谓"
			GetHeroProperNameHint="如圣骑士会返回'无惧的布赞恩'而不是'圣骑士'."
		MultiboardGetTitleText="多面板标题"
			MultiboardGetTitleText=~Multiboard," 的标题"
			MultiboardGetTitleTextHint=
		GetPlayerName="玩家名字"
			GetPlayerName=~Player," 的名字"
			GetPlayerNameHint=
		GetTriggerName="触发名字"
			GetTriggerName="当前触发的名字"
			GetTriggerNameHint=
		GetUnitName="单位名字"
			GetUnitName=~单位," 的名字"
			GetUnitNameHint=
		GetItemName="物品名字"
			GetItemName=~物品," 的名字"
			GetItemNameHint=
		GetStoredStringBJ="读取字符串"
			GetStoredStringBJ="从游戏缓存读取字符串,名称: ",~文字," 类别: ",~Category," 缓存: ",~Game Cache
			GetStoredStringBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
		GetDYCChargeName="冲锋名称 [D]"
			GetDYCChargeName="本次冲锋名称"
			GetDYCChargeNameHint="响应'被冲锋'、'完成冲锋'或'停止冲锋'事件 （来自DYC 1.03）"
		YDWEGetObjectPropertyString="物体属性 (字符串) [JAPI]"
			YDWEGetObjectPropertyString="[",~类型,"]",~物体," 的 ",~属性名,""
			YDWEGetObjectPropertyStringHint="属性名也就是物体编辑器里按Ctrl+D后看到的英文名 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEGetUnitAbilityDataString="技能数据 (字符串) [JAPI]"
			YDWEGetUnitAbilityDataString=~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据
			YDWEGetUnitAbilityDataStringHint="(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
		YDWEGetItemDataString="物品数据 (字符串) [JAPI]"
			YDWEGetItemDataString=~物品," 的 ",~数据
			YDWEGetItemDataStringHint=""
	// returns location
		GetRectCenter="矩形区域中心"
			GetRectCenter=~矩形区域," 的中心点"
			GetRectCenterHint="会创建点."
		GetRandomLocInRect="矩形区域内随机点"
			GetRandomLocInRect=~矩形区域," 内的随机点"
			GetRandomLocInRectHint="会创建点."
		YDWEGetLocationByInteger="获取 点 (整数路径)"
			YDWEGetLocationByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取点"
			YDWEGetLocationByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取点数据。"
		YDWEGetLocationByString="获取 点 (字符串路径)"
			YDWEGetLocationByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取点"
			YDWEGetLocationByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取点数据。"
		OffsetLocation="坐标位移点"
			OffsetLocation=~指定点," 坐标位移 (",~X,", ",~Y,")处"
			OffsetLocationHint="会创建点."
		PolarProjectionBJ="极坐标位移点"
			PolarProjectionBJ="从 "~指定点," 开始,距离 ",~Distance," ,方向为 ",~Angle," 度的位移处"
			PolarProjectionBJHint="会创建点."
		CameraSetupGetDestPositionLoc="镜头目标点"
			CameraSetupGetDestPositionLoc=~镜头," 的目标点"
			CameraSetupGetDestPositionLocHint="会创建点."
		GetCameraTargetPositionLoc="当前镜头目标点"
			GetCameraTargetPositionLoc="当前镜头目标点"
			GetCameraTargetPositionLocHint="会创建点. 注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraEyePositionLoc="当前镜头源位置"
			GetCameraEyePositionLoc="当前镜头源位置"
			GetCameraEyePositionLocHint="会创建点. 注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		Location="坐标点"
			Location="坐标(",~X,", ",~Y,")"
			LocationHint="会创建点."
		GetDestructableLoc="可破坏物位置"
			GetDestructableLoc=~可破坏物," 的位置"
			GetDestructableLocHint="会创建点."
		GetOrderPointLoc="命令发布点"
			GetOrderPointLoc="命令发布点"
			GetOrderPointLocHint="响应'发布指定点目标命令'单位事件. 会创建点."
		GetSpellTargetLoc="技能施放点"
			GetSpellTargetLoc="技能施放点"
			GetSpellTargetLocHint="响应'技能施放'单位事件. 注意技能施放结束将无法捕获该点. 会创建点."
		GetItemLoc="物品位置"
			GetItemLoc=~物品," 的位置"
			GetItemLocHint="会创建点."
		WaygateGetDestinationLocBJ="传送门目的地"
			WaygateGetDestinationLocBJ=~传送门," 的目的地"
			WaygateGetDestinationLocBJHint="会创建点."
		GetPlayerStartLocationLoc="玩家开始位置"
			GetPlayerStartLocationLoc=~Player," 的游戏开始位置"
			GetPlayerStartLocationLocHint="会创建点."
		GetUnitLoc="单位位置"
			GetUnitLoc=~单位," 的位置"
			GetUnitLocHint="会创建点."
		GetUnitRallyPoint="单位集结点"
			GetUnitRallyPoint=~单位," 的集结点位置"
			GetUnitRallyPointHint="如果单位没有设置集结点,则返回null. 设置自己为集结点可取消集结点设置. 会创建点."
	// returns LocEx
		GetUnitLocEx="单位位置 [W]"
			GetUnitLocEx=~单位," 的位置"
			GetUnitLocExHint="返回一个伪点."
		GetDestructableLocEx="可破坏物位置 [W]"
			GetDestructableLocEx=~可破坏物," 的位置"
			GetDestructableLocExHint="返回一个伪点."
		GetOrderPointLocEx="命令发布点 [W]"
			GetOrderPointLocEx="命令发布点"
			GetOrderPointLocExHint="响应'发布指定点目标命令'单位事件.返回一个伪点."
		GetPlayerStartLocationLocEx="玩家开始位置 [W]"
			GetPlayerStartLocationLocEx=~Player," 的游戏开始位置"
			GetPlayerStartLocationLocExHint="返回一个伪点."
		GetItemLocEx="物品位置 [W]"
			GetItemLocEx=~物品," 的位置"
			GetItemLocExHint="返回一个伪点."
		WaygateGetDestinationLocBJEx="传送门目的地 [W]"
			WaygateGetDestinationLocBJEx=~传送门," 的目的地"
			WaygateGetDestinationLocBJExHint="返回一个伪点."
		GetUnitRallyPointEx="单位集结点 [W]"
			GetUnitRallyPointEx=~单位," 的集结点位置"
			GetUnitRallyPointExHint="如果单位没有设置集结点,则返回null(0,0). 设置自己为集结点可取消集结点设置. 返回一个伪点."
		GetRectCenterEx="矩形区域中心 [W]"
			GetRectCenterEx=~矩形区域," 的中心点"
			GetRectCenterExHint="返回一个伪点."
		GetRandomLocInRectEx="矩形区域内随机点 [W]"
			GetRandomLocInRectEx=~矩形区域," 内的随机点"
			GetRandomLocInRectExHint="返回一个伪点."
		PolarProjectionBJEx="极坐标位移点 [W]"
			PolarProjectionBJEx="从 "~指定点," 开始,距离 ",~Distance," ,方向为 ",~Angle," 度的位移处"
			PolarProjectionBJExHint="返回一个伪点."
		CameraSetupGetDestPositionLocEx="镜头目标点 [W]"
			CameraSetupGetDestPositionLocEx=~镜头," 的目标点"
			CameraSetupGetDestPositionLocExHint="返回一个伪点."
		GetSpellTargetLocEx="技能施放点 [W]"
			GetSpellTargetLocEx="技能施放点"
			GetSpellTargetLocExHint="响应'技能施放'单位事件. 注意技能施放结束将无法捕获该点. 返回一个伪点."
	// returns region
		CreateRegion="新建区域 [C]"
			CreateRegion="新建区域"
			CreateRegionHint="会创建一个新的不规则区域,如果不往该区域添加点或地区,则该区域无效果."
		GetTriggeringRegion="触发区域 [C]"
			GetTriggeringRegion="触发区域"
			GetTriggeringRegionHint="响应单位进入/离开不规则区域事件."
		YDWEGetRegionByInteger="获取 区域 (整数路径)"
			YDWEGetRegionByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取区域"
			YDWEGetRegionByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取区域数据。"
		YDWEGetRegionByString="获取 区域 (字符串路径)"
			YDWEGetRegionByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取区域"
			YDWEGetRegionByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取区域数据。"
	// returns rect
		GetCurrentCameraBoundsMapRectBJ="当前可用镜头范围"
			GetCurrentCameraBoundsMapRectBJ="当前可用镜头范围"
			GetCurrentCameraBoundsMapRectBJHint="会创建矩形区域. 注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
		GetCameraBoundsMapRect="初始可用镜头范围"
			GetCameraBoundsMapRect="初始可用镜头范围"
			GetCameraBoundsMapRectHint="在地图编辑器的地图属性中设置."
		GetPlayableMapRect="可用地图区域"
			GetPlayableMapRect="可用地图区域"
			GetPlayableMapRectHint="在地图编辑器的地图属性中设置."
		GetEntireMapRect="完整地图区域"
			GetEntireMapRect="完整地图区域"
			GetEntireMapRectHint="在地图编辑器的地图属性中设置. 会创建矩形区域."
		OffsetRectBJ="位移创建矩形区域
			OffsetRectBJ="与 ",~矩形区域," 位移 (",~X,", ",~Y,") 坐标之后等价的矩形区域"
			OffsetRectBJHint="会创建矩形区域."
		YDWEGetRectByInteger="获取 地区 (整数路径)"
			YDWEGetRectByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取地区"
			YDWEGetRectByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取地区数据。"
		YDWEGetRectByString="获取 区域 (字符串路径)"
			YDWEGetRectByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取地区"
			YDWEGetRectByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取地区数据。"
		YDWEGetRect="新建矩形区域(指定中心坐标) [Y]"
			YDWEGetRect="以坐标(",~x,",",~y,")为中心，创建长",~实数,"，宽",~实数,"的矩形区域。"
			YDWEGetRectHint="会创建矩形区域"
		RectFromCenterSizeBJ="新建矩形区域(指定中心点)"
			RectFromCenterSizeBJ="以 ",~指定点," 为中心,宽 ",~数值," ,高 ",~数值," 的矩形区域"
			RectFromCenterSizeBJHint="会创建矩形区域."
		Rect="新建矩形区域(指定边角坐标)"
			Rect="左下角为(",~X1,", ",~Y1,"),右上角为(",~X2,", ",~Y2,")的矩形区域"
			RectHint="会创建矩形区域."
		RectFromLoc="新建矩形区域(指定边角点)"
			RectFromLoc="左下角为 ",~点1," ,右上角为 ",~点2," 的矩形区域"
			RectFromLocHint="会创建矩形区域."
	// returns unit
		CreateUnit="新建单位(指定坐标) [C]"
			CreateUnit="新建 ",~玩家," 的 ",~单位," 在(",~X,",",~Y,"),面向角度:",~Face," 度"
			CreateUnitHint="在坐标创建单位，不能被'最后创建的单位'获得。"
		CreateUnitAtLoc="新建单位(指定点) [C]"
			CreateUnitAtLoc="新建 ",~玩家," 的 ",~单位," 在 ",~点," 面向角度:",~Face," 度"
			CreateUnitAtLocHint=
		CreateCorpse="新建尸体 [C]"
			CreateCorpse="新建 ",~玩家," 的 ",~单位," 的尸体在(",~X,",",~Y,"),面向角度:",~Face," 度"
			CreateCorpseHint=
		CreateBlightedGoldmine="新建不死族金矿 [C]"
			CreateBlightedGoldmine="新建 ",~玩家," 的不死族金矿在(",~X,",",~Y,"),面向角度:",~Face," 度"
			CreateBlightedGoldmineHint=
		GetLastCreatedUnit="最后创建的单位"
			GetLastCreatedUnit="最后创建的单位"
			GetLastCreatedUnitHint="最后一个使用'单位 - 创建'动作创建的单位."
		GetLastRestoredUnitBJ="最后读取的单位"
			GetLastRestoredUnitBJ="最后读取的单位"
			GetLastRestoredUnitBJHint="最后一个使用'游戏缓存 - 读取单位'动作创建的单位."
		GetLastReplacedUnitBJ="最后替换的单位"
			GetLastReplacedUnitBJ="最后替换的单位"
			GetLastReplacedUnitBJHint="最后一个使用'单位 - 替换'替换的单位."
		GetLastHauntedGoldMine="最后创建的不死族金矿"
			GetLastHauntedGoldMine="最后创建的不死族金矿"
			GetLastHauntedGoldMineHint="最后一个使用'中立建筑 - 创建不死族金矿'创建的不死族金矿."
		GetEnumUnit="选取单位"
			GetEnumUnit="选取单位"
			GetEnumUnitHint="使用'选取单位做动作'时, 指代相应的单位."
		GetFilterUnit="匹配单位"
			GetFilterUnit="匹配单位"
			GetFilterUnitHint="在'选取单位满足条件'之类功能的条件中,指代被判断单位."
		FirstOfGroup="单位组中第一个单位"
		FirstOfGroup=~单位组," 中第一个单位"
		YDWEGetUnitByInteger="获取 单位 (整数路径)"
			YDWEGetUnitByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取单位"
			YDWEGetUnitByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取单位数据。"
		YDWEGetUnitByString="获取 单位 (字符串路径)"
			YDWEGetUnitByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取单位"
			YDWEGetUnitByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取单位数据。"
		GetLastAbilityCastingUnit="获取最后结束施放特殊技能的单位"
			GetLastAbilityCastingUnit="获取最后结束施放特殊技能的单位"
			GetLastAbilityCastingUnitHint="响应单位释放特殊技能事件，当技能释放完毕后，可以获取最后施放特殊技能的单位。"
		GetLastAbilityTargetUnit="获取最后被特殊技能命中的单位"
			GetLastAbilityTargetUnit="获取最后被特殊技能命中的单位"
			GetLastAbilityTargetUnitHint="响应单位释放可以命中目标的特殊技能事件，如钩子、月神箭；当技能命中目标后，可以获取最后被特殊技能命中的单位。"
		GroupPickRandomUnit="单位组中随机单位"
			GroupPickRandomUnit=~单位组," 中随机选取的一个单位"
			GroupPickRandomUnitHint=
		GetAttackedUnitBJ="被攻击单位"
			GetAttackedUnitBJ="被攻击单位"
			GetAttackedUnitBJHint="响应'被攻击'单位事件."
		GetAttacker="攻击单位"
			GetAttacker="攻击单位"
			GetAttackerHint="响应'被攻击'单位事件."
		GetBuyingUnit="购买者"
			GetBuyingUnit="购买者"
			GetBuyingUnitHint="响应'出售单位','出售物品'或'抵押物品'单位事件."
		GetCancelledStructure="被取消的建筑"
			GetCancelledStructure="被取消的建筑"
			GetCancelledStructureHint="响应'取消建造建筑'单位事件."
		GetSpellAbilityUnit="施法单位"
			GetSpellAbilityUnit="施法单位"
			GetSpellAbilityUnitHint="响应'施放技能'单位事件."
		GetConstructedStructure="完成的建筑"
			GetConstructedStructure="完成的建筑"
			GetConstructedStructureHint="响应'完成建造建筑'单位事件."
		GetConstructingStructure="正在建造的建筑"
			GetConstructingStructure="正在建造的建筑"
			GetConstructingStructureHint="响应'开始建造建筑'单位事件."
		GetEventDamageSource="伤害来源"
			GetEventDamageSource="伤害来源"
			GetEventDamageSourceHint="响应'受到伤害'单位事件."
		GetDecayingUnit="腐化的单位"
			GetDecayingUnit="腐化的单位"
			GetDecayingUnitHint="响应'开始腐化'单位事件."
		GetDyingUnit="死亡单位"
			GetDyingUnit="死亡单位"
			GetDyingUnitHint="响应'死亡'单位事件."
		GetEnteringUnit="进入的单位"
			GetEnteringUnit="进入的单位"
			GetEnteringUnitHint="响应'单位进入区域'单位事件."
		GetManipulatingUnit="操作物品的单位"
			GetManipulatingUnit="操作物品的单位"
			GetManipulatingUnitHint="响应'使用/获得/丢失物品'单位事件."
		GetKillingUnitBJ="凶手单位"
			GetKillingUnitBJ="凶手单位"
			GetKillingUnitBJHint="响应'死亡'单位事件. 如果不是被单位所杀(比如负数邪恶光环)则返回null."
		GetLearningUnit="学习技能的英雄"
			GetLearningUnit="学习技能的英雄"
			GetLearningUnitHint="响应'学习技能'单位事件."
		GetLeavingUnit="离开的单位"
			GetLeavingUnit="离开的单位"
			GetLeavingUnitHint="响应'单位离开区域'单位事件."
		GetLevelingUnit="升级的英雄"
			GetLevelingUnit="升级的英雄"
			GetLevelingUnitHint="响应'提升等级'单位事件."
		GetLoadedUnitBJ="被装载单位"
			GetLoadedUnitBJ="被装载单位"
			GetLoadedUnitBJHint="响应'被装载'单位事件."
		GetOrderedUnit="发布命令的单位"
			GetOrderedUnit="发布命令的单位"
			GetOrderedUnitHint="响应'发布命令'单位事件."
		GetChangingUnit="被改变所有者的单位"
			GetChangingUnit="被改变所有者的单位"
			GetChangingUnitHint="响应'改变所有者'单位事件."
		GetResearchingUnit="研究科技的单位"
			GetResearchingUnit="研究科技的单位"
			GetResearchingUnitHint="响应'开始/取消/完成科技研究'单位事件."
		GetRevivableUnit="可复活英雄"
			GetRevivableUnit="可复活英雄"
			GetRevivableUnitHint="响应'变为可复活的'单位事件."
		GetRevivingUnit="复活英雄"
			GetRevivingUnit="复活英雄"
			GetRevivingUnitHint="响应'开始/取消/完成复活'单位事件."
		GetSellingUnit="贩卖者"
			GetSellingUnit="贩卖者"
			GetSellingUnitHint="响应'出售单位','出售物品'或'抵押物品'单位事件."
		GetSoldUnit="被贩卖单位"
			GetSoldUnit="被贩卖单位"
			GetSoldUnitHint="响应'出售单位'单位事件."
		GetSummonedUnit="召唤单位"
			GetSummonedUnit="召唤单位"
			GetSummonedUnitHint="响应'召唤单位'单位事件,指代被召唤单位."
		GetSummoningUnit="召唤者"
			GetSummoningUnit="召唤者"
			GetSummoningUnitHint="响应'召唤单位'单位事件."
		GetOrderTargetUnit="命令发布目标"
			GetOrderTargetUnit="命令发布目标"
			GetOrderTargetUnitHint="响应'发布指定物体目标命令'单位事件并以单位为目标时."
		GetSpellTargetUnit="技能施放目标"
			GetSpellTargetUnit="技能施放目标"
			GetSpellTargetUnitHint="响应'施放技能'单位事件并以单位为目标时. 注意: 技能施放结束将无法捕获施放目标."
		GetEventTargetUnit="事件目标单位"
			GetEventTargetUnit="事件目标单位"
			GetEventTargetUnitHint="响应'注意到/获取攻击目标'单位事件,指代目标单位."
		GetTrainedUnit="训练单位"
			GetTrainedUnit="训练单位"
			GetTrainedUnitHint="响应'完成训练单位'单位事件,指代被训练单位."
		GetTransportUnitBJ="运输单位"
			GetTransportUnitBJ="运输单位"
			GetTransportUnitBJHint="响应'被装载'单位事件.指代作为载体的单位."
		GetTriggerUnit="触发单位"
			GetTriggerUnit="触发单位"
			GetTriggerUnitHint=
		YDWECinSActor="演员单位"
			YDWECinSActor="电影系统里编号为(",~整数,")的演员"
			YDWECinSActorHint="获取Script System电影系统中的演员单位。"
		YDWEGetLastPoolAbstractedUnit="最后从单位池里取出的单位"
			YDWEGetLastPoolAbstractedUnit="最后从单位池里取出的单位"
			YDWEGetLastPoolAbstractedUnitHint="该单位必须是由YDWE提供的<选择放置单位>动作生成，不然无法获取。"
		GetUnitRallyUnit="单位集结点目标"
			GetUnitRallyUnit=~单位," 的集结点目标"
			GetUnitRallyUnitHint="如果指定单位没有设置集结点到单位目标,则返回null."
		PlaceRandomUnit="选择放置单位 [C]"
			PlaceRandomUnit="从 ",~单位池," 中为 ",~玩家," 任意选择一个单位并放置到点( ",~X," , ",~Y," )"," 面向 ",~度
			PlaceRandomUnitHint="从单位池中随机选取一个单位类型."
		GetDYCChargingUnit="冲锋者 [D]"
			GetDYCChargingUnit="冲锋者"
			GetDYCChargingUnitHint="响应'被冲锋'、'完成冲锋'或'停止冲锋'事件 （来自DYC 1.03）"
		GetDYCChargedUnit="被冲锋单位 [D]"
			GetDYCChargedUnit="被冲锋单位"
			GetDYCChargedUnitHint="响应'被冲锋'、'完成冲锋'或'停止冲锋'事件。无目标冲锋完成和停止时无法捕捉被冲锋单位 （来自DYC 1.03）"
		GetDYCDDUnit="伤害显示单位 [D]"
			GetDYCDDUnit="伤害显示单位"
			GetDYCDDUnitHint="响应'伤害显示完毕'事件。 （来自DYC 1.03）"
		GetDYCDDSUnit="显示的伤害的来源 [D]"
			GetDYCDDSUnit="显示的伤害的来源"
			GetDYCDDSUnitHint="响应'伤害显示完毕'事件。 （来自DYC 1.03）"
	// returns unitpool
		CreateUnitPool="新建单位池 [C]"
			CreateUnitPool="新建的空单位池"
			CreateUnitPoolHint="会创建单位池。"
		YDWEGetLastUnitPool="最后创建的单位池 [Y]"
			YDWEGetLastUnitPool="最后创建的单位池"
			YDWEGetLastUnitPoolHint="该单位池必须是由YDWE提供的<创建单位池>动作生成，不然无法获取。"
	// returns unitcode
		GetUnitTypeId="指定单位的类型"
			GetUnitTypeId=~单位," 的类型"
			GetUnitTypeIdHint=
		YDWEGetUnitIDByInteger="获取 单位类型 (整数路径)"
			YDWEGetUnitIDByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取单位类型"
			YDWEGetUnitIDByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取单位类型数据。"
		YDWEGetUnitIDByString="获取 单位类型 (字符串路径)"
			YDWEGetUnitIDByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取单位类型"
			YDWEGetUnitIDByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取单位类型数据。"
		ChooseRandomCreepBJ="随机中立单位类型"
			ChooseRandomCreepBJ="一个等级 ",~Level," 的随机中立单位类型"
			ChooseRandomCreepBJHint="-1代表所有等级."
		ChooseRandomNPBuildingBJ="随机中立建筑类型"
			ChooseRandomNPBuildingBJ="随机中立建筑类型"
			ChooseRandomNPBuildingBJHint=
		String2UnitIdBJ="转换字符串为单位类型"
			String2UnitIdBJ="转换 ",~字符串," 为单位类型"
			String2UnitIdBJHint=
		GetTrainedUnitType="训练单位类型"
			GetTrainedUnitType="训练单位类型"
			GetTrainedUnitTypeHint="响应'开始/取消/完成训练单位'单位事件, 指代所训练的单位类型."
		YDWEI2UnitId="转换整数为单位Id"
			YDWEI2UnitId="转换 ",~整数," 为单位Id"
			YDWEI2UnitIdHint="将一个整数转换成单位ID，如输入1751543663，将转成步兵的ID。"
		YDWES2UnitId="转换字符串为单位Id"
			YDWES2UnitId="需要转换成单位Id的字符窜为：",~字符窜
			YDWES2UnitIdHint="将一个字符窜转换成单位ID，如输入hfoo，将转成步兵的ID。"
	// returns ordercode
		String2OrderIdBJ="转换命令字符串为命令ID"
			String2OrderIdBJ="转换 ",~字符串," 为命令ID"
			String2OrderIdBJHint="如''harvest'', ''move'', ''smart'', ''attack''都是命令字符串."
		UnitId2OrderIdBJ="转换单位类型为命令ID"
			UnitId2OrderIdBJ="转换 ",~单位类型," 为命令ID"
			UnitId2OrderIdBJHint=
		GetIssuedOrderIdBJ="发布的命令ID"
			GetIssuedOrderIdBJ="发布的命令ID"
			GetIssuedOrderIdBJHint="响应'发布命令'单位事件."
		GetUnitCurrentOrder="当前命令ID"
			GetUnitCurrentOrder=~单位," 的当前命令ID."
			GetUnitCurrentOrderHint=
	// returns destructable
		GetLastCreatedDestructable="最后创建的可破坏物"
			GetLastCreatedDestructable="最后创建的可破坏物"
			GetLastCreatedDestructableHint="最后一个使用 '可破坏物 - 创建'动作创建的可破坏物."
		CreateDestructableZ="新建可破坏物 [C]"
			CreateDestructableZ="新建的 ",~可破坏物类型," 在(",~X,",",~Y,",",~Z,"),面向角度: ",~Direction," 尺寸缩放: ",~Scale," 样式: ",~Variation
			CreateDestructableZHint="坐标为(X,Y,Z)格式. 面向角度采用角度制,0度为正东方向,90度为正北方向."
		CreateDeadDestructableZ="新建可破坏物(死亡的) [C]"
			CreateDeadDestructableZ="新建死亡的 ",~可破坏物类型," 在(",~X,",",~Y,",",~Z"),面向角度: ",~Direction," 尺寸缩放: ",~Scale," 样式: ",~Variation
			CreateDeadDestructableZHint="坐标为(X,Y,Z)格式. 面向角度采用角度制,0度为正东方向,90度为正北方向."
		RandomDestructableInRectSimpleBJ="矩形区域内的随机可破坏物"
			RandomDestructableInRectSimpleBJ=~矩形区域," 内随机选取一个可破坏物"
			RandomDestructableInRectSimpleBJHint=
		RandomDestructableInRectBJ="矩形区域内的随机可破坏物(指定条件)"
			RandomDestructableInRectBJ=~矩形区域," 内满足 ",~条件," 的一个随机可破坏物"
			RandomDestructableInRectBJHint="使用'匹配的可破坏物'来指代条件中用于比较的可破坏物."
		GetEnumDestructable="选取的可破坏物"
			GetEnumDestructable="选取的可破坏物"
			GetEnumDestructableHint="使用'选取可破坏物做动作'时, 指代相应的可破坏物."
		GetFilterDestructable="匹配的可破坏物"
			GetFilterDestructable="匹配的可破坏物"
			GetFilterDestructableHint="在'选取可破坏物满足条件'之类功能的条件中,指代被判断的可破坏物."
		GetDyingDestructable="死亡的可破坏物"
			GetDyingDestructable="死亡的可破坏物"
			GetDyingDestructableHint="响应'可破坏物死亡'事件."
		GetOrderTargetDestructable="命令发布目标(可破坏物)"
			GetOrderTargetDestructable="命令发布目标"
			GetOrderTargetDestructableHint="响应'发布指定物体目标命令'单位事件并以可破坏物为目标时."
		GetSpellTargetDestructable="技能施放目标(可破坏物)"
			GetSpellTargetDestructable="技能施放目标"
			GetSpellTargetDestructableHint="响应'施放技能'单位事件并以可破坏物为目标时. 注意: 技能施放结束将无法捕获施放目标."
		GetUnitRallyDestructable="单位集结点目标"
			GetUnitRallyDestructable=~单位," 的集结点目标"
			GetUnitRallyDestructableHint="如果指定单位没有设置集结点到可破坏物上,则返回null."
		YDWEGetDestructableByInteger="获取 可破坏物 (整数路径)"
			YDWEGetDestructableByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取可破坏物"
			YDWEGetDestructableByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取可破坏物数据。"
		YDWEGetDestructableByString="获取 可破坏物 (字符串路径)"
			YDWEGetDestructableByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取可破坏物"
			YDWEGetDestructableByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取可破坏物数据。"
	// returns destructablecode
		GetDestructableTypeId="指定可破坏物的类型"
			GetDestructableTypeId=~可破坏物," 的类型"
			GetDestructableTypeIdHint=
	// returns item
		CreateItem="新建物品 [C]"
			CreateItem="新建 ",~物品," 在(",~X,",",~Y,")"
			CreateItemHint=
		GetLastCreatedItem="最后创建的物品"
			GetLastCreatedItem="最后创建的物品"
			GetLastCreatedItemHint="最后一个使用'物品 - 创建'或'英雄 - 创建物品给英雄'动作创建的物品."
		GetLastRemovedItem="最后丢弃的物品"
			GetLastRemovedItem="最后丢弃的物品"
			GetLastRemovedItemHint="最后一个使用'英雄 - 丢弃物品'动作丢弃的物品."
		GetLastMovedItemInItemSlot="最后在物品栏中移动的物品 [Y]"
			GetLastMovedItemInItemSlot="最后在物品栏中移动的物品"
			GetLastMovedItemInItemSlotHint="最后一个单位在物品栏中移动的物品"
		GetLastCombinedItem="最后被合成的物品 [Y]"
			GetLastCombinedItem="最后被合成的物品"
			GetLastCombinedItemHint="最后由物品合成系统合成的物品"
		UnitDropItem="单位掉落的物品"
			UnitDropItem="让 ",~单位," 掉落一件 ",~物品
			UnitDropItemHint="在单位所在区域(32x32)内的随机点创建一个物品，注意当单位站在不可通行路径旁边时，该物品可能掉落其中而无法拾取。"
		YDWEGetItemByInteger="获取 物品 (整数路径)"
			YDWEGetItemByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取物品"
			YDWEGetItemByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取物品数据。"
		YDWEGetItemByString="获取 物品 (字符串路径)"
			YDWEGetItemByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取物品"
			YDWEGetItemByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取物品数据。"
		RandomItemInRectSimpleBJ="矩形区域内随机物品"
			RandomItemInRectSimpleBJ=~矩形区域," 内随机选取的一个物品"
			RandomItemInRectSimpleBJHint=
		RandomItemInRectBJ="矩形区域内随机物品(指定条件)"
			RandomItemInRectBJ=~矩形区域," 内满足 ",~条件," 的一个随机物品"
			RandomItemInRectBJHint="使用'匹配物品'来指代条件中用于比较的物品."
		GetEnumItem="选取物品"
			GetEnumItem="选取物品"
			GetEnumItemHint="使用'选取物品做动作'时, 指代相应的物品."
		GetFilterItem="匹配物品"
			GetFilterItem="匹配物品"
			GetFilterItemHint="在'选取物品满足条件'之类功能的条件中,指代被判断单位."
		UnitItemInSlot="单位持有物品"
			UnitItemInSlot=~单位," 物品栏第 ",~Index," 格的物品"
			UnitItemInSlotHint="第一个单位格的位置为0."
		UnitItemInSlotBJ="单位持有物品"
			UnitItemInSlotBJ=~单位," 物品栏第 ",~Index," 格的物品"
			UnitItemInSlotBJHint="第一个单位格的位置为1."
		GetItemOfTypeFromUnitBJ="单位持有物品(指定类型)"
			GetItemOfTypeFromUnitBJ=~单位," 所持有的 ",~物品类型
			GetItemOfTypeFromUnitBJHint="注意：有多个相同物品时，只能获取第一个物品。"
		GetManipulatedItem="被操作物品"
			GetManipulatedItem="被操作物品"
			GetManipulatedItemHint="响应'使用/得到/丢弃物品'单位事件."
		GetSoldItem="被售出物品"
			GetSoldItem="被售出物品"
			GetSoldItemHint="响应'出售物品'或'抵押物品'单位事件."
		GetOrderTargetItem="命令发布目标"
			GetOrderTargetItem="命令发布目标"
			GetOrderTargetItemHint="响应'发布指定物体目标命令'单位事件并以物品为目标时."
		GetSpellTargetItem="技能施放目标"
			GetSpellTargetItem="技能施放目标"
			GetSpellTargetItemHint="响应施放技能单位事件并以物品为目标时. 注意: 技能施放结束将无法捕获施放目标."
		PlaceRandomItem="选择放置物品 [C]"
			PlaceRandomItem="从 ",~物品池," 中任意选择一个物品并放置到( ",~X," , ",~Y," )点"
			PlaceRandomItemHint=
		YDWEGetLastPoolAbstractedItem="最后从物品池里取出的物品 [Y]"
			YDWEGetLastPoolAbstractedItem="最后从物品池里取出的物品"
			YDWEGetLastPoolAbstractedItemHint="该物品必须是由YDWE提供的<选择放置物品>动作生成，不然无法获取。"
	// returns itemtype
		GetItemType="指定物品的分类"
			GetItemType=~物品," 的分类"
			GetItemTypeHint=
	// returns itemcode
		GetItemTypeId="指定物品的类型"
			GetItemTypeId=~物品," 的类型"
			GetItemTypeIdHint=
		YDWEGetItemIDByInteger="获取 物品类型 (整数路径)"
			YDWEGetItemIDByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取物品类型"
			YDWEGetItemIDByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取物品类型数据。"
		YDWEGetItemIDByString="获取 物品类型 (字符串路径)"
			YDWEGetItemIDByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取物品类型"
			YDWEGetItemIDByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取物品类型数据。"
		ChooseRandomItemExBJ="随机物品类型(指定分类)"
			ChooseRandomItemExBJ="等级 ",~Level," 的随机 ",~Class," 物品类型"
			ChooseRandomItemExBJHint="该功能为新版函数,使用新版等级作为参照对象. -1表示任何等级."
		ChooseRandomItemBJ="随机物品类型"
			ChooseRandomItemBJ="等级 ",~Level," 的随机物品类型"
			ChooseRandomItemBJHint="该功能为ROC版函数,使用旧版等级作为参照对象. -1表示任何等级."
		YDWEI2ItemId="转换整数为物品Id"
			YDWEI2ItemId="转换 ",~整数," 为物品Id"
			YDWEI2ItemIdHint="将一个整数转换成物品ID，如输入1936749416，将转成魔法护盾的ID。"
		YDWES2ItemId="转换字符串为物品Id"
			YDWES2ItemId="需要转换成物品Id的字符串为：",~字符窜
			YDWES2ItemIdHint="将一个字符串转换成物品ID，如输入spsh，将转成魔法护盾的ID。"
	// returns itempool
		CreateItemPool="新建物品池 [C]"
			CreateItemPool="新建的空物品池"
			CreateItemPoolHint="会创建物品池"
		YDWEGetLastItemPool="最后创建的物品池 [Y]"
			YDWEGetLastItemPool="最后创建的物品池"
			YDWEGetLastItemPoolHint="该物品池必须是由YDWE提供的<创建物品池>动作生成，不然无法获取。"
	// returns techcode
		GetResearched="被研究科技"
			GetResearched="被研究科技"
			GetResearchedHint="响应'开始/取消/完成科技研究'单位事件."
	// returns abilcode
		GetSpellAbilityId="施放技能"
			GetSpellAbilityId="施放技能"
			GetSpellAbilityIdHint="响应施放技能单位事件, 指代被施放的技能."
		GetLearnedSkill="学习技能 [C]"
			GetLearnedSkill="学习技能"
			GetLearnedSkillHint="响应'学习技能'单位事件, 指代被学习的技能."
		YDWEGetAbilityIDByInteger="获取 技能 (整数路径)"
			YDWEGetAbilityIDByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取技能"
			YDWEGetAbilityIDByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取技能数据。"
		YDWEGetAbilityIDByString="获取 技能 (字符串路径)"
			YDWEGetAbilityIDByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取技能"
			YDWEGetAbilityIDByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取技能数据。"
	// returns heroskillcode
		GetLearnedSkillBJ="学习技能"
			GetLearnedSkillBJ="学习技能"
			GetLearnedSkillBJHint="响应'学习技能'单位事件, 指代被学习的技能. 新函数在'技能'类别中."
	// returns player
		GetEnumPlayer="选取玩家"
			GetEnumPlayer="选取玩家"
			GetEnumPlayerHint="使用'选取玩家做动作'时, 指代相应的玩家."
		GetFilterPlayer="匹配玩家"
			GetFilterPlayer="匹配玩家"
			GetFilterPlayerHint="在'选取玩家满足条件'之类功能的条件中,指代被判断玩家."
		GetOwningPlayer="单位所有者"
			GetOwningPlayer=~单位," 的所有者"
			GetOwningPlayerHint=
		GetHost="获取主机 [W]"
			GetHost="主机玩家"
			GetHostHint="尽量不要在初始化时使用.服务器建主房使用可能会返回错误值."
		YDWEGetPlayerByInteger="获取 玩家 (整数路径)"
			YDWEGetPlayerByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取玩家"
			YDWEGetPlayerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取玩家数据。"
		YDWEGetPlayerByString="获取 玩家 (字符串路径)"
			YDWEGetPlayerByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取玩家"
			YDWEGetPlayerByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取玩家数据。"
		GetItemPlayer="物品所属玩家"
			GetItemPlayer=~物品," 的所属玩家"
			GetItemPlayerHint="与持有者无关,默认为中立被动玩家."
		ForcePickRandomPlayer="玩家组中随机玩家"
			ForcePickRandomPlayer=~玩家组," 中随机抽取的一名玩家."
			ForcePickRandomPlayerHint=
		GetLocalPlayer="本地玩家 [C]"
			GetLocalPlayer="本地玩家"
			GetLocalPlayerHint="指代玩家自己,所以对每个玩家返回值都不一样. 如果不清楚该函数的话千万别用,因为很可能因为不同步而导致掉线."
		ConvertedPlayer="转换玩家索引号为玩家"
			ConvertedPlayer="玩家 ",~Player Index
			ConvertedPlayerHint="玩家索引号取值1-16."
		GetChangingUnitPrevOwner="原所有者"
			GetChangingUnitPrevOwner="原所有者"
			GetChangingUnitPrevOwnerHint="响应'改变所有者'单位事件,指代单位原来的所有者."
		GetTriggerPlayer="触发玩家"
			GetTriggerPlayer="触发玩家"
			GetTriggerPlayerHint=
		LeaderboardGetIndexedPlayerBJ="玩家所在排行榜位置"
			LeaderboardGetIndexedPlayerBJ="第 ",~Position," 位玩家在 ",~Leaderboard," 中"
			LeaderboardGetIndexedPlayerBJHint=
	// returns group
		 CreateNUnitsAtLoc="创建单位(面向角度) [C]"
			 CreateNUnitsAtLoc="创建 ",~Number," 个 ",~单位," 给 ",~Player," 在 ",~指定点," ,面向角度为 ",~Direction," 度"
			 CreateNUnitsAtLocHint="面向角度采用角度制,0度为正东方向,90度为正北方向. 使用'最后创建的单位组'来获取创建的所有单位. 使用'最后创建的单位'来获取创建的单个单位."
		CreateGroup="新建的单位组 [C]"
			CreateGroup="新建的空单位组"
			CreateGroupHint="会创建单位组."
		GetLastCreatedGroup="最后创建的单位组"
			GetLastCreatedGroup="最后创建的单位组"
			GetLastCreatedGroupHint="最后一批通过'单位 - 创建'动作创建的单位."
		YDWEGetGroupByInteger="获取 单位组 (整数路径)"
			YDWEGetGroupByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取单位组"
			YDWEGetGroupByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取单位组数据。"
		YDWEGetGroupByString="获取 单位组 (字符串路径)"
			YDWEGetGroupByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取单位组"
			YDWEGetGroupByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取单位组数据。"
		GetRandomSubGroup="单位组中随机单位"
			GetRandomSubGroup="随机获取 ",~Count," 个单位从 ",~单位组
			GetRandomSubGroupHint="会创建单位组.该函数不能使用设置 bj_wantDestroyGroup=true来清除group,会导致该动作无效."
		GetUnitsInRectAll="矩形区域内的单位"
			GetUnitsInRectAll=~矩形区域," 内的所有单位"
			GetUnitsInRectAllHint="会创建单位组."
		GetUnitsInRectOfPlayer="矩形区域内的玩家单位"
			GetUnitsInRectOfPlayer=~矩形区域," 内属于 ",~Player," 的所有单位"
			GetUnitsInRectOfPlayerHint="会创建单位组."
		GetUnitsInRectMatching="矩形区域内的单位(指定条件)"
			GetUnitsInRectMatching=~矩形区域," 内满足 ",~条件," 的所有单位"
			GetUnitsInRectMatchingHint="使用'匹配单位'指代条件中用于比较的单位. 会创建单位组."
		GetUnitsInRangeOfLocAll="圆范围内单位"
			GetUnitsInRangeOfLocAll="半径为 ",~Radius," 圆心为 ",~指定点," 的圆范围内所有单位"
			GetUnitsInRangeOfLocAllHint="会创建单位组."
		GetUnitsInRangeOfLocMatching="圆范围内单位(指定条件)"
			GetUnitsInRangeOfLocMatching="半径为 ",~Radius," 圆心为 ",~指定点," 且满足 ",~条件," 的所有单位"
			GetUnitsInRangeOfLocMatchingHint="使用'匹配单位'指代条件中用于比较的单位. 会创建单位组."
		WMGetGroup="指定坐标扇形内的单位 [W]"
			WMGetGroup="以坐标(",~x,",",~y,")为中心，选取角度为",~角度,"方向为",~角度,"，范围为",~实数,"内的所有单位"
			WMGetGroupHint="会创建单位组.可以被最后创建的单位组所获取"
		GetUnitsOfPlayerAll="玩家单位"
			GetUnitsOfPlayerAll="属于 ",~Player," 的所有单位"
			GetUnitsOfPlayerAllHint="会创建单位组."
		GetUnitsOfPlayerAndTypeId="玩家单位(指定单位类型)"
			GetUnitsOfPlayerAndTypeId="属于 ",~Player," 的所有 ",~单位类型
			GetUnitsOfPlayerAndTypeIdHint="会创建单位组."
		GetUnitsOfPlayerMatching="玩家单位(指定条件)"
			GetUnitsOfPlayerMatching="属于 ",~Player," 并满足 ",~条件," 的所有单位"
			GetUnitsOfPlayerMatchingHint="使用'匹配单位'指代条件中用于比较的单位. 会创建单位组."
		GetUnitsOfTypeIdAll="所有指定类型单位"
			GetUnitsOfTypeIdAll="所有 ",~单位类型
			GetUnitsOfTypeIdAllHint="会创建单位组."
		GetUnitsSelectedAll="玩家选择单位"
			GetUnitsSelectedAll=~Player," 选择的所有单位"
			GetUnitsSelectedAllHint="不能用于触发条件. 会创建单位组."
	// returns force
		CreateForce="新建玩家组 [C]"
			CreateForce="新建空玩家组"
			CreateForceHint="会创建玩家组."
		GetPlayersAll="所有玩家"
			GetPlayersAll="所有玩家"
			GetPlayersAllHint="包括未使用玩家和中立玩家."
		GetPlayersByMapControl="所有指定控制者的玩家"
			GetPlayersByMapControl="所有 ",~Control Type," 控制的玩家"
			GetPlayersByMapControlHint="会创建玩家组."
		GetPlayersMatching="所有符合条件的玩家"
			GetPlayersMatching="所有符合 ",~条件," 的玩家"
			GetPlayersMatchingHint="使用'匹配玩家'指代条件中用于比较的玩家,包括未使用玩家和中立玩家. 会创建玩家组."
		GetPlayersAllies="玩家的盟友"
			GetPlayersAllies="所有 ",~Player," 的联盟玩家"
			GetPlayersAlliesHint="需要双方互为联盟状态,包括自己,不包括中立玩家. 会创建玩家组."
		GetPlayersEnemies="玩家的敌人"
			GetPlayersEnemies="所有 ",~Player," 的敌对玩家"
			GetPlayersEnemiesHint="对其敌对的所有玩家,不包括中立玩家. 会创建玩家组."
		GetForceOfPlayer="转换玩家为玩家组"
			GetForceOfPlayer="转换 ",~Player," 为玩家组"
			GetForceOfPlayerHint="会创建玩家组."
	// returns race
		GetPlayerRace="玩家的种族"
			GetPlayerRace=~Player," 的种族"
			GetPlayerRaceHint=
		GetUnitRace="单位种族"
			GetUnitRace=~单位," 所属种族"
			GetUnitRaceHint="物体编辑器中设置的单位所属种族."
	// returns camerasetup
		GetCurrentCameraSetup="玩家当前镜头"
			GetCurrentCameraSetup="玩家当前镜头"
			GetCurrentCameraSetupHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线. 会创建镜头对象,但每个玩家只会有一个当前镜头."
	// returns fogmodifier
		ConvertFogModifier="转换整数地址为可见度修正器"
			ConvertFogModifier="转换可见度修正器( ",~整数地址,")"
			ConvertFogModifierHint="用于取得该整数地址所表示的可见度修正器.如果没有可见度修正器,则无效."
		CreateFogModifierRect="新建可见度修正器(矩形区域) [C]"
			CreateFogModifierRect="新建的 ",~玩家," 可见度修正器. 可见度: ",~FogStateVisible," 影响区域: ",~矩形区域," (对盟友 ",~共享," 视野, ",~覆盖," 单位视野)"
			CreateFogModifierRectHint="会创建可见度修正器."
		CreateFogModifierRadius="新建可见度修正器(圆范围) [C]"
			CreateFogModifierRadius="新建的 ",~玩家," 可见度修正器. 可见度: ",~FogStateVisible," 圆心坐标:(",~X,",",~Y,") 半径: ",~数值," (对盟友 ",~共享," 视野, ",~覆盖," 单位视野)"
			CreateFogModifierRadiusHint="会创建可见度修正器."
		GetLastCreatedFogModifier="最后创建的可见度修正器"
			GetLastCreatedFogModifier="最后创建的可见度修正器"
			GetLastCreatedFogModifierHint="最后一个由'可见度 - 创建可见度修正器'动作创建的可见度修正器."
	// returns trigger
		CreateTrigger="新建触发 [C]"
			CreateTrigger="新建触发"
			CreateTriggerHint="会创建一个新的触发器,如果对该功能不熟悉请慎用."
		GetTriggeringTrigger="当前触发"
			GetTriggeringTrigger="当前触发"
			GetTriggeringTriggerHint="当前所运行的触发器."
		YDWEGetTriggerByInteger="获取 触发器 (整数路径)"
			YDWEGetTriggerByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取触发器"
			YDWEGetTriggerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取触发器数据。"
		YDWEGetTriggerByString="获取 触发器 (字符串路径)"
			YDWEGetTriggerByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取触发器"
			YDWEGetTriggerByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取触发器数据。"
	// returns triggercondition
		YDWEGetTriggerConditionByInteger="获取 触发器条件 (整数路径)"
			YDWEGetTriggerConditionByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取触发器条件"
			YDWEGetTriggerConditionByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取触发器条件数据。"
		YDWEGetTriggerConditionByString="获取 触发器条件 (字符串路径)"
			YDWEGetTriggerConditionByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取触发器条件"
			YDWEGetTriggerConditionByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取触发器条件数据。"
	// returns triggeraction
		YDWEGetTriggerActionByInteger="获取 触发器动作 (整数路径)"
			YDWEGetTriggerActionByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取触发器动作"
			YDWEGetTriggerActionByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取触发器动作数据。"
		YDWEGetTriggerActionByString="获取 触发器动作 (字符串路径)"
			YDWEGetTriggerActionByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取触发器动作"
			YDWEGetTriggerActionByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取触发器动作数据。"
	// returns event
		YDWEGetTriggerEventByInteger="获取 事件 (整数路径)"
			YDWEGetTriggerEventByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取事件"
			YDWEGetTriggerEventByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取事件数据。"
		YDWEGetTriggerEventByString="获取 事件 (字符串路径)"
			YDWEGetTriggerEventByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取事件"
			YDWEGetTriggerEventByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取事件数据。"
	// returns force
		YDWEGetForceByInteger="获取 势力 (整数路径)"
			YDWEGetForceByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取势力"
			YDWEGetForceByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取势力数据。"
		YDWEGetForceByString="获取 势力 (字符串路径)"
			YDWEGetForceByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取势力"
			YDWEGetForceByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取势力数据。"
	// returns boolexpr
		YDWEGetBoolexprByInteger="获取 布尔表达式 (整数路径)"
			YDWEGetBoolexprByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取布尔表达式"
			YDWEGetBoolexprByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取布尔表达式数据。"
		YDWEGetBoolexprByString="获取 布尔表达式 (字符串路径)"
			YDWEGetBoolexprByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取布尔表达式"
			YDWEGetBoolexprByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取布尔表达式数据。"
	// returns gamedifficulty
		GetGameDifficulty="当前游戏难度"
			GetGameDifficulty="当前游戏难度"
			GetGameDifficultyHint=
	// returns aidifficulty
		GetAIDifficulty="玩家的AI难度"
			GetAIDifficulty=~Player," 的对战AI难度"
			GetAIDifficultyHint="对非AI玩家返回普通难度."
	// returns gamespeed
		GetGameSpeed="当前游戏速度"
			GetGameSpeed="当前游戏速度"
			GetGameSpeedHint=
	// returns mapcontrol
		GetPlayerController="玩家控制者"
			GetPlayerController=~Player," 的控制者"
			GetPlayerControllerHint=
	// returns playercolor
		GetPlayerColor="玩家颜色"
			GetPlayerColor=~Player," 的颜色"
			GetPlayerColorHint=
	// returns playerslotstate
		GetPlayerSlotState="玩家游戏状态"
			GetPlayerSlotState=~Player," 的游戏状态"
			GetPlayerSlotStateHint=
	// returns effect
		AddSpecialEffect="新建特效(创建到坐标) [C]"
			AddSpecialEffect="新建特效 ",~Model File," 在(",~X,",",~Y,")处"
			AddSpecialEffectHint=会创建特效.
		AddSpecialEffectLoc="新建特效(创建到点) [C]"
			AddSpecialEffectLoc="新建特效 ",~Model File," 在 ",~指定点," 处"
			AddSpecialEffectLocHint=会创建特效.
		AddSpecialEffectTarget="新建特效(创建到单位) [C]"
			AddSpecialEffectTarget="新建特效 ",~Model File," 并绑定到 ",~单位," 的 ",~Attachment Point," 附加点上"
			AddSpecialEffectTargetHint=会创建特效.
		AddSpellEffectById="新建特效(指定技能，创建到坐标) [C]"
			AddSpellEffectById=~技能," 的 ",~EffectType," , 创建到坐标(",~X,",",~Y,")"
			AddSpellEffectByIdHint=会创建特效.
		AddSpellEffectByIdLoc="新建特效(指定技能，创建到点) [C]"
			AddSpellEffectByIdLoc=~技能," 的 ",~EffectType," , 创建到 ",~指定点
			AddSpellEffectByIdLocHint=会创建特效.
		AddSpellEffectTargetById="新建特效(指定技能，创建到单位) [C]"
			AddSpellEffectTargetById=~技能," 的 ",~EffectType," , 绑定到 ",~单位," 的 ",~String," 附加点"
			AddSpellEffectTargetByIdHint=会创建特效.
		GetLastCreatedEffectBJ="最后创建的特效"
			GetLastCreatedEffectBJ="最后创建的特效"
			GetLastCreatedEffectBJHint="最后一个使用'特殊效果 - 创建特效'动作创建的效果."
		YDWEGetEffectByInteger="获取 特效 (整数路径)"
			YDWEGetEffectByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取特效"
			YDWEGetEffectByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取特效数据。"
		YDWEGetEffectByString="获取 特效 (字符串路径)"
			YDWEGetEffectByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取特效"
			YDWEGetEffectByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取特效数据。"
	// returns lightning
		AddLightning="新建闪电效果 [C]"
			AddLightning="新建闪电效果: ",~闪电效果," (",~Boolean,"检查可见性) 起始点:("~X,",",~Y,") 终结点:(",~X,",",~Y,")"
			AddLightningHint="会创建闪电效果. 允许检查可见性则在起始点和终结点都不可见时将不创建闪电效果."
		AddLightningEx="新建闪电效果(指定Z轴) [C]"
			AddLightningEx="新建闪电效果: ",~闪电效果," (",~Boolean,"检查可见性) 起始点:("~X,",",~Y,",",~Z,") 终结点:(",~X,",",~Y,",",~Z,")"
			AddLightningExHint="会创建闪电效果. 允许检查可见性则在起始点和终结点都不可见时将不创建闪电效果."
		GetLastCreatedLightningBJ="最后创建的闪电效果"
			GetLastCreatedLightningBJ="最后创建的闪电效果"
			GetLastCreatedLightningBJHint="最后一个使用'闪电效果 - 创建'动作创建的闪电效果."
		YDWEGetLightningByInteger="获取 闪电 (整数路径)"
			YDWEGetLightningByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取闪电"
			YDWEGetLightningByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取闪电数据。"
		YDWEGetLightningByString="获取 闪电 (字符串路径)"
			YDWEGetLightningByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取闪电"
			YDWEGetLightningByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取闪电数据。"
	// returns image
		GetLastCreatedImage="最后创建的图像"
			GetLastCreatedImage="最后创建的图像"
			GetLastCreatedImageHint="最后一个使用'图像 - 创建'动作创建的图像."
		CreateImage="新建图像 [C]"
			CreateImage="新建图像: ",~Image," 大小:(",~X,",",~Y,",",~Z,") 创建点:(",~X,",",~Y,",",~Z,") 原点坐标:(",~X,",",~Y,",",~Z,") 图像类型: ",~Type
			CreateImageHint="使用'图像 - 设置永久渲染状态'动作才能显示图像. 大小、创建点和原点格式为(X,Y,Z). 创建点作为图像的左下角位置. 会创建图像."
	// returns ubersplat
		CreateUbersplat="新建地面纹理变化 [C]"
			CreateUbersplat="新建的地面纹理变化在点(",~X,",",~Y,"),使用图像: ",~Type," 颜色值为(",~Red,",",~Green,",",~Blue,") Alpha值为",~Transparency," (",~Enable/Disable," 暂停状态, ",~Enble/Disable," 跳过出生动画)"
			CreateUbersplatHint="颜色值和Alpha值取值范围0-255. 使用'地面纹理变化 - 设置永久渲染状态' 来显示创建的纹理变化. 暂停状态表示动画播放完毕后是否继续保留该纹理变化. 会创建纹理变化."
		GetLastCreatedUbersplat="最后创建的地面纹理变化"
			GetLastCreatedUbersplat="最后创建的地面纹理变化"
			GetLastCreatedUbersplatHint="最后一个使用'地面纹理 - 创建'动作创建的纹理变化."
	// returns weathereffect
		AddWeatherEffect="新建天气效果 [C]"
			AddWeatherEffect="新建的在 ",~矩形区域," 的天气效果: ",~WeatherId
			AddWeatherEffectHint="会创建天气效果."
		GetLastCreatedWeatherEffect="最后创建的天气效果"
			GetLastCreatedWeatherEffect="最后创建的天气效果"
			GetLastCreatedWeatherEffectHint="最后一个使用'环境 - 创建天气效果'动作创建的天气效果."
	// returns terraindeformation
		ConvertTerrainde="转换整数地址为地形变化"
			ConvertTerrainde="转换地形变化( ",~整数地址,")"
			ConvertTerraindeHint="用于取得该整数地址所表示的天气效果.如果没有地形变化,则无效."
		TerrainDeformCrater="新建地形变化:弹坑 [C]"
			TerrainDeformCrater="新建的弹坑变形. 中心坐标:(",~X,",",~Y,") 半径: ",~Radius," 深度: ",~Depth," 持续时间: ",~Duration," 毫秒, 变化类型: ",~Type
			TerrainDeformCraterHint="深度可取负数. 永久地形变化在保存游戏时不会被记录.
		TerrainDeformRipple="新建地形变化:波纹 [C]"
			TerrainDeformRipple="新建的波纹变形. 中心坐标:(",~X,",",~Y,") 最终半径: ",~Radius," 深度: ",~Depth," 持续时间: ",~Duration," 毫秒, 变化次数: ",~Count," 面波数: ",~SpaceWave," 总波数: ",~TimeWave," 初始半径率: ",~数值," 变化类型: ",~Type
			TerrainDeformRipple="初始半径率=初始半径/最终半径."
		TerrainDeformWave="新建地形变化:冲击波 [C]"
			TerrainDeformWave="新建的冲击波变形. 起始坐标:(",~X,",",~Y,") 波方向:(",~X,",",~Y,") 波距离: ",~distance," 波速度: ",~speed," 波半径: ",~radius," 深度: ",~Depth," 变形效果持续时间: ",~Delay," 毫秒, 变化次数: ",~Count
			TerrainDeformWaveHint="深度可取负数. 方向以(X,Y)坐标形式表示,如(1,1)表示45度."
		TerrainDeformRandom="新建地形变化:随机 [C]"
			TerrainDeformRandom="新建的随机变形. 中心坐标:(",~X,",",~Y,") 半径: ",~Radius," 最小高度变化: ",~Depth," 最大高度变化: ",~Depth," 持续时间: ",~Duration," 毫秒, 变化周期: ",~Duration," 毫秒"
			TerrainDeformRandomHint=
		GetLastCreatedTerrainDeformation="最后创建的地形变化"
			GetLastCreatedTerrainDeformation="最后创建的地形变化"
			GetLastCreatedTerrainDeformationHint="最后一个由'环境 - 创建地形变化'动作创建的地形变化."
	// returns terraintype
		GetTerrainType="指定坐标地形 [C]"
			GetTerrainType="坐标(",~X,",",~Y,")处的地形"
			GetTerrainTypeHint=
		GetTerrainTypeBJ="指定点地形"
			GetTerrainTypeBJ=~指定点," 处的地形"
			GetTerrainTypeBJHint=
	// returns sound
		GetLastPlayedSound="最后播放的音效"
			GetLastPlayedSound="最后播放的音效"
			GetLastPlayedSoundHint="最后一个由'声音 - 播放音效'或'电影 - 播放单位消息'动作播放的音效."
		YDWEGetSoundByInteger="获取 音效 (整数路径)"
			YDWEGetSoundByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取音效"
			YDWEGetSoundByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取音效数据。"
		YDWEGetSoundByString="获取 音效 (字符串路径)"
			YDWEGetSoundByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取音效"
			YDWEGetSoundByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取音效数据。"
	// returns music
		GetLastPlayedMusic="最后播放的音乐"
			GetLastPlayedMusic="最后播放的音乐"
			GetLastPlayedMusicHint="最后一个由'声音 - 播放音乐'动作播放的音乐."
	// returns quest
		CreateQuest="新建任务 [C]"
			CreateQuest="新建任务 "
			CreateQuestHint="新建一个任务.注：这条毫无用处，别用——everguo"
		YDWECreateQuest="新建任务 [Y]"
			YDWECreateQuest="新建一个 ",~Quest Type," 任务,标题: ",~文字," 任务说明: ",~文字," 任务图标: ",~Icon Path
			YDWECreateQuestHint="新建一个任务；YDWE新增。"
		GetLastCreatedQuestBJ="最后创建的任务"
			GetLastCreatedQuestBJ="最后创建的任务"
			GetLastCreatedQuestBJHint="最后一个由'任务 - 创建任务'动作创建的任务."
		YDWEGetQuestByInteger="获取 任务 (整数路径)"
			YDWEGetQuestByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取任务"
			YDWEGetQuestByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取任务数据。"
		YDWEGetQuestByString="获取 任务 (字符串路径)"
			YDWEGetQuestByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取任务"
			YDWEGetQuestByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取任务数据。"
	// returns questitem
		YDWECreateQuestItem="创建任务目标项 [Y]"
			YDWECreateQuestItem="为 ",~Quest," 创建一个任务目标项: ",~文字
			YDWECreateQuestItemHint="新建一个任务目标项；YDWE新增功能。"
		GetLastCreatedQuestItemBJ="最后创建的任务项目"
			GetLastCreatedQuestItemBJ="最后创建的任务项目"
			GetLastCreatedQuestItemBJHint="最后一个由'任务 - 创建任务项目'动作创建的任务项目."
		YDWEGetQuestItemByInteger="获取 任务目标项 (整数路径)"
			YDWEGetQuestItemByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取任务目标项"
			YDWEGetQuestItemByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取任务目标项数据。"
		YDWEGetQuestItemByString="获取 任务目标项 (字符串路径)"
			YDWEGetQuestItemByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取任务目标项"
			YDWEGetQuestItemByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取任务目标项数据。"
	// returns defeatcondition
		GetLastCreatedDefeatConditionBJ="最后创建的失败条件"
			GetLastCreatedDefeatConditionBJ="最后创建的失败条件"
			GetLastCreatedDefeatConditionBJHint="最后一个由'任务 - 创建失败条件'动作创建的失败条件."
	// returns dialog
		GetClickedDialogBJ="点击的对话框"
			GetClickedDialogBJ="点击的对话框"
			GetClickedDialogBJHint="响应'对话框 - 点击对话框/按钮'事件."
		DialogCreate="新建对话框 [C]"
			DialogCreate="新建对话框"
			DialogCreateHint="创建新的对话框."
		YDWEGetDialogByInteger="获取 对话框 (整数路径)"
			YDWEGetDialogByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取对话框"
			YDWEGetDialogByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取对话框数据。"
		YDWEGetDialogByString="获取 对话框 (字符串路径)"
			YDWEGetDialogByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取对话框"
			YDWEGetDialogByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取对话框数据。"
	// returns button
		YDWEGetButtonByInteger="获取 对话框按钮 (整数路径)"
			YDWEGetButtonByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取对话框按钮"
			YDWEGetButtonByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取对话框按钮数据。"
		YDWEGetButtonByString="获取 对话框按钮 (字符串路径)"
			YDWEGetButtonByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取对话框按钮"
			YDWEGetButtonByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取对话框按钮数据。"
		DialogAddButton="添加对话框按钮 [C]"
			DialogAddButton="给 ",~对话框," 添加按钮, 使用标题: ",~文字," 快捷键: ",~HotKey
			DialogAddButtonHint="会创建对话框按钮."
		GetLastCreatedButtonBJ="最后创建的对话框按钮"
			GetLastCreatedButtonBJ="最后创建的对话框按钮"
			GetLastCreatedButtonBJHint="最后一个由'对话框 - 创建对话框按钮'动作创建的对话框按钮."
		GetClickedButtonBJ="点击的对话框按钮"
			GetClickedButtonBJ="点击的对话框按钮"
			GetClickedButtonBJHint="响应'对话框 - 点击对话框/按钮'事件."
	// returns leaderboard
		CreateLeaderboard="新建排行榜 [C]"
			CreateLeaderboard="新建的空排行榜"
			CreateLeaderboardHint="会创建排行榜."
		GetLastCreatedLeaderboard="最后创建的排行榜"
			GetLastCreatedLeaderboard="最后创建的排行榜"
			GetLastCreatedLeaderboardHint="最后一个由'排行榜 - 创建排行榜'动作创建的排行榜."
		PlayerGetLeaderboardBJ="玩家使用的排行榜"
			PlayerGetLeaderboardBJ=~Player," 使用的排行榜"
			PlayerGetLeaderboardBJHint="每个玩家只能使用1个排行榜."
		YDWEGetLeaderboardByInteger="获取 排行榜 (整数路径)"
			YDWEGetLeaderboardByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取排行榜"
			YDWEGetLeaderboardByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取排行榜数据。"
		YDWEGetLeaderboardByString="获取 排行榜 (字符串路径)"
			YDWEGetLeaderboardByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取排行榜"
			YDWEGetLeaderboardByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取排行榜数据。"
	// returns multiboard
		CreateMultiboard="新建多面板 [C]"
			CreateMultiboard="新建的空多面板"
			CreateMultiboardHint="会创建多面板."
		GetLastCreatedMultiboard="最后创建的多面板"
			GetLastCreatedMultiboard="最后创建的多面板"
			GetLastCreatedMultiboardHint="最后一个由'多面板 - 创建多面板'动作创建的多面板."
		YDWEGetMultiBoardByInteger="获取 多面板 (整数路径)"
			YDWEGetMultiBoardByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取多面板"
			YDWEGetMultiBoardByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取多面板数据。"
		YDWEGetMultiBoardByString="获取 多面板 (字符串路径)"
			YDWEGetMultiBoardByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取多面板"
			YDWEGetMultiBoardByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取多面板数据。"
	// returns multiboarditem
		MultiboardGetItem="多面板项目 [C]"
			MultiboardGetItem=~多面板," 的第 ",~X," 行,第 ",~Y," 列项"
			MultiboardGetItemHint="(0,0)作为多面板首项,会创建多面板项目."
		YDWEGetMultiBoardItemByInteger="获取 多面板项目 (整数路径)"
			YDWEGetMultiBoardItemByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取多面板项目"
			YDWEGetMultiBoardItemByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取多面板项目数据。"
		YDWEGetMultiBoardItemByString="获取 多面板项目 (字符串路径)"
			YDWEGetMultiBoardItemByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取多面板项目"
			YDWEGetMultiBoardItemByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取多面板项目数据。"
	// returns timer
		CreateTimer="新建计时器 [C]"
			CreateTimer="新建的计时器"
			CreateTimerHint="会创建计时器."
		GetLastCreatedTimerBJ="最后启用的计时器"
			GetLastCreatedTimerBJ="最后启用的计时器"
			GetLastCreatedTimerBJHint="最后一个由'计时器 - 启用计时器'动作启用的计时器."
		GetExpiredTimer="到期的计时器"
			GetExpiredTimer="到期的计时器"
			GetExpiredTimerHint="响应'时间 - 计时器到期'事件."
		YDWEGetTimerByInteger="获取 计时器 (整数路径)"
			YDWEGetTimerByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取计时器"
			YDWEGetTimerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取计时器数据。"
		YDWEGetTimerByString="获取 计时器 (字符串路径)"
			YDWEGetTimerByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取计时器"
			YDWEGetTimerByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取计时器数据。"
		YDWERemoveAttackWaveReturnTimer="最后创建的刷兵计时器"
			YDWERemoveAttackWaveReturnTimer="最后创建的刷兵计时器"
			YDWERemoveAttackWaveReturnTimerHint="响应刷兵系统"
		DYCspawnsystemstart=命令单位开始刷兵
			DYCspawnsystemstart="为 ",~," 创建刷兵计时器并开始刷兵，起点坐标 (",~,", ",~,") ，攻击移动到坐标 (",~,", ",~,") ，兵种类型1: ",~," ，兵种1的数量: ",~,"，兵种类型2: ",~," ，兵种2的数量: ",~," ，兵种类型3: ",~," ，兵种3的数量: ",~," ，兵种类型4: ",~," ，兵种4的数量: ",~," ，单位初始面向角: ",~," ，刷兵波次间隔: ",~," ，单兵刷新间隔: ",~," ，按随机顺序刷兵种: ",~," 。为每个刷出的单位在 ",~," 秒后创建一个会立即被删除的一次性特效 ",~," ，绑定在单位的 ",~," 附着点处"
			DYCspawnsystemstartHint="可以用'最后创建刷兵计时器'获取计时器。单兵刷新间隔表示每两个刷出的单位间的间隔。 （来自DYC 1.03）"
	// returns timerdialog
		CreateTimerDialog="新建计时器窗口 [C]"
			CreateTimerDialog="为 ",~计时器," 新建计时窗口"
			CreateTimerDialogHint="为一个计时器创建一个新建计时器窗口."
		GetLastCreatedTimerDialogBJ="最后创建的计时器窗口"
			GetLastCreatedTimerDialogBJ="最后创建的计时器窗口"
			GetLastCreatedTimerDialogBJHint="最后一个由'计时器 - 创建计时器窗口'动作创建的计时器窗口."
		YDWEGetTimerDialogByInteger="获取 计时器窗口 (整数路径)"
			YDWEGetTimerDialogByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取计时器窗口"
			YDWEGetTimerDialogByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取计时器窗口数据。"
		YDWEGetTimerDialogByString="获取 计时器窗口 (字符串路径)"
			YDWEGetTimerDialogByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取计时器窗口"
			YDWEGetTimerDialogByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取计时器窗口数据。"
	// returns gamecache
		InitGameCache="新建游戏缓存 [C]"
			InitGameCache="新建游戏缓存: ",~缓存名
			InitGameCacheHint="创建一个新的游戏缓存,一个地图最多只有有256个游戏缓存."
		GetLastCreatedGameCacheBJ="最后创建的游戏缓存"
			GetLastCreatedGameCacheBJ="最后创建的游戏缓存"
			GetLastCreatedGameCacheBJHint="最后一个由'游戏缓存 - 创建缓存'动作创建的缓存."
	// returns hashtable
		YDWEInitHashtable="新建哈希表 [Y]"
			YDWEInitHashtable="新建哈希表"
			YDWEInitHashtableHint="创建一个新的哈希表"
		GetLastCreatedHashtableBJ="最后创建的哈希表"
			GetLastCreatedHashtableBJ="最后创建的哈希表"
			GetLastCreatedHashtableBJHint="能得到通过 '哈希表 - 新建哈希表' 最后一次创建的哈希表"
	// returns Trackable
		CreateTrackable="新建可追踪物 [C]"
			CreateTrackable="新建的可追踪物, 使用模型: ",~模型名字," 所在位置: ( ",~X轴," , ",~Y轴," ) 面向角度: ",~数值," 度"
			CreateTrackableHint="可用来响应鼠标的移动和点击. 会创建可追踪物."
		GetTriggeringTrackable="触发可追踪物 [C]"
			GetTriggeringTrackable="触发可追踪物"
			GetTriggeringTrackableHint=
		YDWEGetTrackableByInteger="获取 可追踪物 (整数路径)"
			YDWEGetTrackableByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取可追踪物"
			YDWEGetTrackableByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取可追踪物数据。"
		YDWEGetTrackableByString="获取 可追踪物 (字符串路径)"
			YDWEGetTrackableByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取可追踪物"
			YDWEGetTrackableByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取可追踪物数据。"
	// returns texttag
		CreateTextTag="新建漂浮文字 [C]"
			CreateTextTag="新建的空漂浮文字"
			CreateTextTagHint="会创建漂浮文字."
		GetLastCreatedTextTag="最后创建的漂浮文字"
			GetLastCreatedTextTag="最后创建的漂浮文字"
			GetLastCreatedTextTagHint="最后一个由'漂浮文字 - 创建漂浮文字'动作创建的漂浮文字."
		YDWEGetTextTagByInteger="获取 漂浮文字 (整数路径)"
			YDWEGetTextTagByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取漂浮文字"
			YDWEGetTextTagByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取漂浮文字数据。"
		YDWEGetTextTagByString="获取 漂浮文字 (字符串路径)"
			YDWEGetTextTagByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取漂浮文字"
			YDWEGetTextTagByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取漂浮文字数据。"
	// Obsolete
		// Custom Script Code
			 ="自定义代码 [C]"
				 ="代码: ",~Jass代码
				 Hint="使用 逆天 - Jass [Y] 替代。可以在这使用如0x1ab3和'A001'之类的整数形式，或是直接写算术表达式"
			  ="自定义代码 [C]"
				  ="代码: ",~Jass代码
				  Hint="使用 逆天 - Jass [Y] 替代"
			   ="自定义代码 [C]"
				   ="代码: ",~Jass代码
				   Hint="使用 逆天 - Jass [Y] 替代"
			    ="自定义代码 [C]"
				    ="代码: ",~Jass代码
				    Hint="使用 逆天 - Jass [Y] 替代"
			     ="自定义代码 [C]"
				     ="代码: ",~Jass代码
				     Hint="使用 逆天 - Jass [Y] 替代"
			      ="自定义代码 [C]"
				      ="代码: ",~Jass代码
				      Hint="使用 逆天 - Jass [Y] 替代"
			       ="自定义代码 [C]"
				       ="代码: ",~Jass代码
				       Hint="使用 逆天 - Jass [Y] 替代"
			        ="自定义代码 [C]"
				        ="代码: ",~Jass代码
				        Hint="使用 逆天 - Jass [Y] 替代"
			         ="自定义代码 [C]"
				         ="代码: ",~Jass代码
				         Hint="使用 逆天 - Jass [Y] 替代"
			          ="自定义代码 [C]"
				          ="代码: ",~Jass代码
				          Hint="使用 逆天 - Jass [Y] 替代"
			           ="自定义代码 [C]"
				           ="代码: ",~Jass代码
				           Hint="使用 逆天 - Jass [Y] 替代"
			            ="自定义代码 [C]"
				            ="代码: ",~Jass代码
				            Hint="使用 逆天 - Jass [Y] 替代"
			              ="自定义代码 [C]"
				              ="代码: ",~Jass代码
				              Hint="使用 逆天 - Jass [Y] 替代"
[AIFunctionStrings]
	//
		// These functions are defined in AIEditorData.txt
	// Boolean
		TownThreatened="基地被攻击"
			TownThreatened="基地被攻击"
			TownThreatenedHint="
		TownHasMine="基地有金矿"
			TownHasMine="#",~ID," 基地有金矿"
		TownHasHall="基地有主建筑"
			TownHasHall="#",~ID," 基地有主建筑"
		CaptainIsHome="攻击指挥官在家"
			CaptainIsHome="攻击指挥官在家"
		CaptainIsFull="攻击组准备完毕"
			CaptainIsFull="攻击组准备完毕"
		CaptainIsEmpty="攻击组为空"
			CaptainIsEmpty="攻击组为空"
		CaptainRetreating="攻击指挥官撤退"
			CaptainRetreating="攻击指挥官撤退"
		CaptainAtGoal="攻击指挥官到达目的地"
			CaptainAtGoal="攻击指挥官到达目的地"
		CaptainInCombat="指挥官在战斗"
			CaptainInCombat=~Captain Type," 指挥官在战斗"
		CreepsOnMap="存在中立生物"
			CreepsOnMap="存在中立生物"
		ExpansionNeeded="需要扩张"
			ExpansionNeeded="需要扩张"
			ExpansionNeededHint="当AI需要开分矿时返回True."
	// Integer
		GetUnitCount="单位总数"
			GetUnitCount=~单位类型," 的总数"
			GetUnitCountHint="包括正在建造的单位."
		GetUnitCountDone="已完成单位总数"
			GetUnitCountDone="已完成 ",~单位类型," 的总数"
			GetUnitCountDoneHint="不包括包括正在建造的单位."
		GetTownUnitCount="单位总数(指定基地)"
			GetTownUnitCount=~单位类型," 的总数在#",~Town," 基地(只取已完成单位: ",~Option,")"
			GetTownUnitCountHint="
		GetMinesOwned="拥有金矿数量"
			GetMinesOwned="拥有金矿数量"
			GetMinesOwnedHint="AI玩家正在使用的金矿数量."
		GetGoldOwned="未被使用的金矿数量"
			GetGoldOwned="未被使用的金矿数量"
			GetGoldOwnedHint="未被采集保持满储金量的金矿."
		TownWithMine="有金矿的基地ID"
			TownWithMine="有金矿的基地ID"
			TownWithMineHint="返回编号最靠前的有金矿的基地"
		GetGold="当前黄金资源"
			GetGold="当前黄金资源"
			GetGoldHint="当前AI玩家拥有的黄金资源"
		GetWood="当前木材资源"
			GetWood="当前木材资源"
			GetWoodHint="当前AI玩家拥有的木材资源"
		GetUnitGoldCost="单位造价(黄金)"
			GetUnitGoldCost="建造 ",~单位类型," 所需黄金"
		GetUnitWoodCost="单位造价(木材)"
			GetUnitWoodCost="建造 ",~单位类型," 所需木材"
		GetUnitBuildTime="单位建造时间"
			GetUnitBuildTime=~单位类型," 的建造时间"
			GetUnitBuildTimeHint="时间单位为秒."
		GetUpgradeLevel="当前科技等级"
			GetUpgradeLevel="当前",~科技," 的等级"
		GetUpgradeGoldCost="科技升级花费黄金"
			GetUpgradeGoldCost=~科技," 升级花费黄金"
		GetUpgradeWoodCost="科技升级花费木材"
			GetUpgradeWoodCost=~科技," 升级花费木材"
		GetNextExpansion="下一个扩张点ID"
			GetNextExpansion="下一个扩张点ID"
			GetNextExpansionHint=
		FoodUsed="已使用人口"
			FoodUsed="已使用人口"
			FoodUsedHint="AI玩家的当前人口数"
		TotalFoodProduced="可用人口数"
			TotalFoodProduced="可用人口数"
			TotalFoodProducedHint="AI玩家的当前可使用人口数"
		GetFoodMade="单位提供人口数量"
			GetFoodMade=~单位类型," 可提供的人口数量"
		CommandsWaiting="等待命令数量"
			CommandsWaiting="等待命令数量"
			CommandsWaitingHint="命令可以通过触发动作'AI - 发送AI命令'发送给AI玩家."
		CheckLastCommand="最后一条命令"
			CheckLastCommand="最后一条发送的命令, ",~Option," 命令"
			CheckLastCommandHint="命令可以通过触发动作'AI - 发送AI命令'发送给AI玩家."
		CheckLastCommandData="最后一条命令数据"
			CheckLastCommandData="最后一条发送命令的数据, ",~Option," 命令"
			CheckLastCommandDataHint="命令可以通过触发动作'AI - 发送AI命令'发送给AI玩家."
		CaptainGroupSize="攻击组人数"
			CaptainGroupSize="攻击组人数"
			CaptainGroupSizeHint="攻击组当前人数."
		CaptainReadinessHP="攻击组生命级别"
			CaptainReadinessHP="攻击组生命级别"
			CaptainReadinessHPHint="生命级别为所有攻击组单位的平均百分比血量,最高为100."
		CaptainReadinessMa="攻击魔法级别"
			CaptainReadinessMa="攻击组魔法级别"
			CaptainReadinessMaHint="魔法级别为所有攻击组单位的平均百分比魔法值,最高为100."
		CurrentAttackWave="当前攻击波数"
			CurrentAttackWave="当前攻击波数"
			CurrentAttackWaveHint="攻击波数在AI编辑器攻击表中定义."
		MeleeDifficulty="对战难度等级"
			MeleeDifficulty="对战难度等级"
