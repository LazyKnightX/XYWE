OperatorReal="算术运算"
	OperatorReal=~Value," ",~Operator," ",~Value
	OperatorRealHint=
YDWEGetRealByInteger="获取 实数 (整数路径)"
	YDWEGetRealByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取实数"
	YDWEGetRealByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取实数数据。"
YDWEGetRealByString="获取 实数 (字符串路径)"
	YDWEGetRealByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取实数"
	YDWEGetRealByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取实数数据。"
GetLocationX="点的X轴坐标"
	GetLocationX=~点," 的X轴坐标"
	GetLocationXHint=
GetLocationY="点的Y轴坐标"
	GetLocationY=~点," 的Y轴坐标"
	GetLocationYHint=
GetLocationZ="点的Z轴高度 [C]"
	GetLocationZ=~点," 的Z轴高度"
	GetLocationZHint=
GetLocationZEx="点的Z轴高度 [W]"
	GetLocationZEx=~点," 的Z轴高度"
	GetLocationZExHint="采用伪点系统,该函数自动清除伪点.无需排泄"
CameraSetupGetField="镜头属性(指定镜头) [C]"
	CameraSetupGetField=~镜头," 的 ",~Camera Field
	CameraSetupGetFieldHint=
CameraSetupGetFieldSwap="镜头属性(指定镜头)"
	CameraSetupGetFieldSwap=~Camera Field," 对 ",~镜头
	CameraSetupGetFieldSwapHint=
GetCameraField="镜头属性(当前镜头)"
	GetCameraField="当前镜头的 ",~Camera Field
	GetCameraFieldHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraTargetPositionX="当前镜头目标X坐标"
	GetCameraTargetPositionX="当前镜头目标X坐标"
	GetCameraTargetPositionXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraTargetPositionY="当前镜头目标Y坐标"
	GetCameraTargetPositionY="当前镜头目标Y坐标"
	GetCameraTargetPositionYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraTargetPositionZ="当前镜头目标Z坐标"
	GetCameraTargetPositionZ="当前镜头目标Z坐标"
	GetCameraTargetPositionZHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraEyePositionX="当前镜头源X坐标"
	GetCameraEyePositionX="当前镜头源X坐标"
	GetCameraEyePositionXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraEyePositionY="当前镜头源Y坐标"
	GetCameraEyePositionY="当前镜头源Y坐标"
	GetCameraEyePositionYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraEyePositionZ="当前镜头源Z坐标"
	GetCameraEyePositionZ="当前镜头源Z坐标"
	GetCameraEyePositionZHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraBoundMinX="当前可用镜头区域最小X坐标 [C]"
	GetCameraBoundMinX="当前可用镜头区域最小X坐标"
	GetCameraBoundMinXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraBoundMinY="当前可用镜头区域最小Y坐标 [C]"
	GetCameraBoundMinY="当前可用镜头区域最小Y坐标"
	GetCameraBoundMinYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraBoundMaxX="当前可用镜头区域最大X坐标 [C]"
	GetCameraBoundMaxX="当前可用镜头区域最大X坐标"
	GetCameraBoundMaxXHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetCameraBoundMaxY="当前可用镜头区域最大Y坐标 [C]"
	GetCameraBoundMaxY="当前可用镜头区域最大Y坐标"
	GetCameraBoundMaxYHint="注意:该函数对各玩家返回值不同,请确定你知道自己在做什么,否则很容易引起掉线."
GetLastTransmissionDurationBJ="最后发言长度"
	GetLastTransmissionDurationBJ="最后发言长度"
	GetLastTransmissionDurationBJHint="最后一次使用'电影 - 播送单位消息'动作的单位发言时间."
I2R="转换整数为实数"
	I2R="转换 ",~Integer," 为实数"
	I2RHint=
S2R="转换字符串为实数"
	S2R="转换 ",~String," 为实数"
	S2RHint=
Deg2Rad="转换角度为弧度"
	Deg2Rad="转换角度 ",~Degrees," 为弧度"
	Deg2RadHint=
Rad2Deg="转换弧度为角度"
	Rad2Deg="转换弧度 ",~Radians," 为角度"
	Rad2DegHint=

Atan2ForCoordinate="两坐标间角度 [W]"
	Atan2ForCoordinate="坐标(",~x1,",",~y1,")与坐标(",~x2,",",~y2,")之间角度"
	Atan2ForCoordinateHint="在-180到180之间,比如(0,0)与(1,1)则返回45度.(0,0)与(-1,-1)返回-135度."
DistanceBetweenCoordinates="两坐标间距离 [W]"
	DistanceBetweenCoordinates="坐标(",~x1,",",~y1,")与坐标(",~x2,",",~y2,")之间距离."
GetCliffGradient="悬崖坡度 [W]"
	GetCliffGradient="坐标(",~x,",",~y,")的悬崖坡度"
YDWEDeg2R="转换角度为实数"
	YDWEDeg2R="转换角度 ",~Degrees," 为实数"
	YDWEDeg2RHint=
YDWERad2R="转换弧度为实数"
	YDWERad2R="转换弧度 ",~Radians," 为实数"
	YDWERad2RHint=
YDWER2Deg="转换实数为角度"
	YDWER2Deg="转换实数 ",~Real," 为角度"
	YDWER2DegHint=
YDWER2Rad="转换实数为弧度"
	YDWER2Rad="转换实数 ",~Real," 为弧度"
	YDWER2RadHint=
TimerGetElapsed="逝去时间"
	TimerGetElapsed=~计时器," 的逝去时间"
	TimerGetElapsedHint=
TimerGetRemaining="剩余时间"
	TimerGetRemaining=~计时器," 的剩余时间"
	TimerGetRemainingHint=
TimerGetTimeout="设置时间"
	TimerGetTimeout=~计时器," 设置的时间"
	TimerGetTimeoutHint=
GetDestructableLife="生命值"
	GetDestructableLife=~可破坏物," 的当前生命值"
	GetDestructableLifeHint=
GetDestructableMaxLife="最大生命值"
	GetDestructableMaxLife=~可破坏物," 的最大生命值"
	GetDestructableMaxLifeHint=
GetDestructableOccluderHeight="闭塞高度"
	GetDestructableOccluderHeight=~可破坏物," 的闭塞高度"
	GetDestructableOccluderHeightHint=
GetDestructableX="可破坏物所在X轴坐标 [C]"
	GetDestructableX=~可破坏物," 所在X轴坐标"
	GetDestructableXHint=
GetDestructableY="可破坏物所在Y轴坐标 [C]"
	GetDestructableY=~可破坏物," 所在Y轴坐标"
	GetDestructableYHint
GetEventDamage="伤害值"
	GetEventDamage="单位所受伤害"
	GetEventDamageHint="响应'受到伤害'单位事件,指代单位所受伤害."
GetOrderPointX="命令发布点X坐标 [C]"
	GetOrderPointX="命令发布点X坐标"
	GetOrderPointXHint="用坐标代替点可以省去创建、删除点的麻烦."
GetOrderPointY="命令发布点Y坐标 [C]"
	GetOrderPointY="命令发布点Y坐标"
	GetOrderPointYHint="用坐标代替点可以省去创建、删除点的麻烦."
GetSpellTargetX="技能施放点X坐标"
	GetSpellTargetX="获取技能目标点的X坐标"
	GetSpellTargetXHint="这是1.24的函数，但已加入函数库，在1.20也可以使用。"
GetSpellTargetY="技能施放点Y坐标"
	GetSpellTargetY="获取技能目标点的Y坐标"
	GetSpellTargetYHint="这是1.24的函数，但已加入函数库，在1.20也可以使用。"
GetTournamentFinishSoonTimeRemaining="比赛剩余时间"
	GetTournamentFinishSoonTimeRemaining="比赛剩余时间"
	GetTournamentFinishSoonTimeRemainingHint="响应'比赛事件'游戏将要结束. 单位为秒."
GetTimeOfDay="游戏时间"
	GetTimeOfDay="游戏时间"
	GetTimeOfDayHint="游戏中的昼夜时间."
GetTimeOfDayScalePercentBJ="昼夜时间流逝速度"
	GetTimeOfDayScalePercentBJ="昼夜时间流逝速度"
	GetTimeOfDayScalePercentBJHint="百分比数值, 100为默认值."
GetStoredReal="缓存读取实数 [C]"
	GetStoredReal="从 ",~Game Cache," 中读取实数,类别: ",~Category," 名称: ",~文字
	GetStoredRealHint="如果该值不存在则返回0."
GetItemLifeBJ="生命值"
	GetItemLifeBJ=~物品," 的当前生命值"
	GetItemLifeBJHint=
GetItemX="物品的X轴坐标 [C]"
	GetItemX=~物品," 的X轴坐标"
	GetItemXHint=
GetItemY="物品的Y轴坐标 [C]"
	GetItemY=~物品," 的Y轴坐标"
	GetItemYHint=
GetLightningColorRBJ="红颜色值"
	GetLightningColorRBJ=~Lightning," 的红颜色值"
	GetLightningColorRBJHint="取值范围0-1. 可使用'闪电效果 - 改变颜色'动作来改变颜色值."
GetLightningColorGBJ="绿颜色值"
	GetLightningColorGBJ=~Lightning," 的绿颜色值"
	GetLightningColorGBJHint="取值范围0-1. 可使用'闪电效果 - 改变颜色'动作来改变颜色值."
GetLightningColorBBJ="蓝颜色值"
	GetLightningColorBBJ=~Lightning," 的蓝颜色值"
	GetLightningColorBBJHint="取值范围0-1. 可使用'闪电效果 - 改变颜色'动作来改变颜色值."
GetLightningColorABJ="Alpha通道值"
	GetLightningColorABJ=~Lightning," 的Alpha通道值"
	GetLightningColorABJHint="取值范围0-1. Alpha通道值为0是完全透明的. 可使用'闪电效果 - 改变颜色'动作来改变Alpha通道值."
GetRandomReal="随机实数"
	GetRandomReal="随机实数,最小值: ",~Minimum," 最大值: ",~Maximum
	GetRandomRealHint=
GetRandomDirectionDeg="随机角度"
	GetRandomDirectionDeg="随机角度"
	GetRandomDirectionDegHint="0-360的随机角度."
GetRandomPercentageBJ="随机百分数"
	GetRandomPercentageBJ="随机百分数"
	GetRandomPercentageBJHint="0-100的随机实数."
DistanceBetweenPoints="两点间距"
	DistanceBetweenPoints=~点," 和 ",~点," 之间的距离"
	DistanceBetweenPointsHint=
AngleBetweenPoints="两点间方向"
	AngleBetweenPoints=~点," 到 ",~点," 的角度"
	AngleBetweenPointsHint="取值-180 - 180."
AngleBetweenPointsEx="两伪点间方向 [W]"
	AngleBetweenPointsEx=~伪点," 到 ",~伪点," 的角度"
	AngleBetweenPointsExHint="取值-180 - 180.采用伪点系统,该函数自动清除伪点.无需排泄"
RMinBJ="取较小值"
	RMinBJ="取(",~实数1,", ",~实数2,")中较小值"
	RMinBJHint=
RMaxBJ="取较大值"
	RMaxBJ="取(",~实数1,", ",~实数2,")中较大值"
	RMaxBJHint=
RAbsBJ="绝对值"
	RAbsBJ=~实数," 的绝对值"
	RAbsBJHint=
RSignBJ="符号标志"
	RSignBJ=~实数," 的符号标志"
	RSignBJHint="负数为-1. 非负数为1."
ModuloReal="模"
	ModuloReal=~被除数," mod ",~除数
	ModuloRealHint="取模计算,例: 9.0 mod 2.5 = 1.5."
Pow="幂运算"
	Pow=~实数," 的 ",~实数," 次幂"
	PowHint=
SquareRoot="平方根"
	SquareRoot=~实数," 的平方根"
	SquareRootHint=
Sin="正弦(弧度) [C]"
	Sin="Sin(",~Angle,")"
	SinHint="采用弧度制计算. "
SinBJ="正弦(角度)"
	SinBJ="Sin(",~Angle,")"
	SinBJHint="采用角度制计算."
Cos="余弦(弧度) [C]"
	Cos="Cos(",~Angle,")"
	CosHint="采用弧度制计算. "
CosBJ="余弦(角度)"
	CosBJ="Cos(",~Angle,")"
	CosBJHint="采用角度制计算."
Tan="正切(弧度) [C]"
	Tan="Tan(",~Angle,")"
	TanHint="采用弧度制计算. "
TanBJ="正切(角度)"
	TanBJ="Tan(",~Angle,")"
	TanBJHint="采用角度制计算."
Asin="反正弦(弧度) [C]"
	Asin="Asin(",~数值,")"
	AsinHint="采用弧度制计算. 返回弧度取值-π/2 — π/2. "
AsinBJ="反正弦(角度)"
	AsinBJ="Asin(",~数值,")"
	AsinBJHint="采用角度制计算. 返回角度取值-90 — 90."
Acos="反余弦(弧度) [C]"
	Acos="Acos(",~数值,")"
	AcosHint="采用弧度制计算. 返回弧度取值0 — π. "
AcosBJ="反余弦(角度)"
	AcosBJ="Acos(",~数值,")"
	AcosBJHint="采用角度制计算. 返回角度取值0 — 180."
Atan="反正切(弧度) [C]"
	Atan="Atan(",~数值,")"
	AtanHint="采用弧度制计算. 返回弧度取值-π/2 — π/2. "
AtanBJ="反正切(角度)"
	AtanBJ="Atan(",~数值,")"
	AtanBJHint="采用角度制计算. 返回角度取值-90 — 90."
Atan2="反正切(Y:X)(弧度) [C]"
	Atan2="Atan(",~Y," : ",~X,")"
	Atan2Hint="采用弧度制计算. 返回弧度取值-π/2 — π/2. "
Atan2BJ="反正切(角度)(Y:X)"
	Atan2BJ="Atan(",~Y," : ",~X,")"
	Atan2BJHint="采用角度制计算. 返回角度取值-90 — 90."
YDWELogarithmLg="对数函数(10为底)<c kuhn制作>"
	YDWELogarithmLg="Lg(",~x,")"
	YDWELogarithmLgHint="10^n=x，那么lg(x)=n，如lg(100)=2；鸣谢zyl910"
YDWELogarithmLn="对数函数(e为底)<c kuhn制作>"
	YDWELogarithmLn="Ln(",~x,")"
	YDWELogarithmLnHint="e^n=x，那么ln(x)=n，e即自然对数，约等于2.718281828；鸣谢zyl910"
YDWELogarithmLog="对数函数(任意底)<c kuhn制作>"
	YDWELogarithmLog="Log(",~a,")(",~b,")"
	YDWELogarithmLogHint="a^n=b，那么log(a)(b)=n，如log(2)(4)=2；鸣谢zyl910"
GetPlayerHandicapXPBJ="经验增长率"
	GetPlayerHandicapXPBJ=~Player," 的经验增长率"
	GetPlayerHandicapXPBJHint="百分比数值, 默认值为100."
GetPlayerHandicapBJ="生命障碍"
	GetPlayerHandicapBJ=~Player," 的生命障碍"
	GetPlayerHandicapBJHint="百分比数值, 默认值为100."
GetRectCenterX="中心X坐标"
	GetRectCenterX=~矩形区域," 的中心X坐标"
	GetRectCenterXHint=
GetRectCenterY="中心Y坐标"
	GetRectCenterY=~矩形区域," 的中心Y坐标"
	GetRectCenterYHint=
GetRectMinX="左下角X坐标"
	GetRectMinX=~矩形区域," 的左下角X坐标"
	GetRectMinXHint=
GetRectMinY="左下角Y坐标"
	GetRectMinY=~矩形区域," 的左下角Y坐标"
	GetRectMinYHint=
GetRectMaxX="右上角X坐标"
	GetRectMaxX=~矩形区域," 的右上角X坐标"
	GetRectMaxXHint=
GetRectMaxY="右上角Y坐标"
	GetRectMaxY=~矩形区域," 的右上角Y坐标"
	GetRectMaxYHint=
GetRectWidthBJ="宽度"
	GetRectWidthBJ=~矩形区域," 的宽度"
	GetRectWidthBJHint=
GetRectHeightBJ="高度"
	GetRectHeightBJ=~矩形区域," 的高度"
	GetRectHeightBJHint=
GetSoundDurationBJ="音效长度"
	GetSoundDurationBJ=~音效," 的长度"
	GetSoundDurationBJHint="单位为秒."
GetSoundFileDurationBJ="音乐长度"
	GetSoundFileDurationBJ=~音乐," 的长度"
	GetSoundFileDurationBJHint="单位为秒."
WaygateGetDestinationX="传送门目的地X坐标"
	WaygateGetDestinationX=~传送门," 的目的地X坐标"
	WaygateGetDestinationXHint=""
WaygateGetDestinationY="传送门目的地Y坐标"
	WaygateGetDestinationY=~传送门," 的目的地Y坐标"
	WaygateGetDestinationYHint=""
GetUnitState="属性 [C]"
	GetUnitState=~单位," 的 ",~Property
	GetUnitStateHint=
GetUnitStateSwap="属性"
	GetUnitStateSwap=~Property," 对于 ",~单位
	GetUnitStateSwapHint=
GetUnitLifePercent="生命百分比"
	GetUnitLifePercent=~单位," 的生命百分比"
	GetUnitLifePercentHint=
GetUnitManaPercent="魔法百分比"
	GetUnitManaPercent=~单位," 的魔法百分比"
	GetUnitManaPercentHint=
GetUnitX="单位所在X轴坐标 [C]"
	GetUnitX=~单位," 所在X轴坐标"
	GetUnitXHint=
GetUnitY="单位所在Y轴坐标 [C]"
	GetUnitY=~单位," 所在Y轴坐标"
	GetUnitYHint=
GetUnitFacing="面向角度"
	GetUnitFacing=~单位," 的面向角度"
	GetUnitFacingHint="采用角度制. 0度为正东方向, 90度为正北方向."
GetUnitMoveSpeed="当前移动速度"
	GetUnitMoveSpeed=~单位," 的当前移动速度"
	GetUnitMoveSpeedHint=
GetUnitDefaultMoveSpeed="默认移动速度"
	GetUnitDefaultMoveSpeed=~单位," 的默认移动速度"
	GetUnitDefaultMoveSpeedHint=
GetUnitAcquireRange="当前主动攻击范围"
	GetUnitAcquireRange=~单位," 的当前主动攻击范围"
	GetUnitAcquireRangeHint=
GetUnitDefaultAcquireRange="默认主动攻击范围"
	GetUnitDefaultAcquireRange=~单位," 的默认主动攻击范围"
	GetUnitDefaultAcquireRangeHint=
GetUnitTurnSpeed="当前转身速度"
	GetUnitTurnSpeed=~单位," 的当前转身速度"
	GetUnitTurnSpeedHint="转身速度表示单位改变面向方向时的速度. 数值越小表示转身越慢."
GetUnitDefaultTurnSpeed="默认转身速度"
	GetUnitDefaultTurnSpeed=~单位," 的默认转身速度"
	GetUnitDefaultTurnSpeedHint="转身速度表示单位改变面向方向时的速度. 数值越小表示转身越慢."
GetUnitPropWindow="当前转向角度(弧度制) [C]"
	GetUnitPropWindow=~单位," 的当前转向角度(弧度制)"
	GetUnitPropWindowHint="单位转身时的转向角度. 数值越大转向幅度越大. "
GetUnitPropWindowBJ="当前转向角度(角度制)"
	GetUnitPropWindowBJ=~单位," 的当前转向角度"
	GetUnitPropWindowBJHint="单位转身时的转向角度. 数值越大转向幅度越大."
GetUnitDefaultPropWindowBJ="默认转向角度"
	GetUnitDefaultPropWindowBJ=~单位," 的默认转向角度"
	GetUnitDefaultPropWindowBJHint="单位转身时的转向角度. 数值越大转向幅度越大."
GetUnitFlyHeight="当前飞行高度"
	GetUnitFlyHeight=~单位," 的当前飞行高度"
	GetUnitFlyHeightHint="飞行单位可以直接改变飞行高度. 其他单位通过添加/删除 替换为飞行单位的变身技能(如乌鸦形态)之后,也能改变飞行高度."
GetUnitDefaultFlyHeight="默认飞行高度"
	GetUnitDefaultFlyHeight=~单位," 的默认飞行高度"
	GetUnitDefaultFlyHeightHint="飞行单位可以直接改变飞行高度. 其他单位通过添加/删除 替换为飞行单位的变身技能(如乌鸦形态)之后,也能改变飞行高度."
GetStoredRealBJ="缓存读取实数"
	GetStoredRealBJ="从游戏缓存读取实数,名称: ",~文字," 类别: ",~Category," 缓存: ",~Game Cache
	GetStoredRealBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
DYCDisBtwCoords="两坐标间距离 [D]"
	DYCDisBtwCoords="坐标 (",~X坐标,", ",~Y坐标,") 与坐标 (",~X坐标,", ",~Y坐标,") 之间的距离"
	DYCDisBtwCoordsHint="免去创建点或者大量嵌套算术运算 （来自DYC 1.03）"
DYCDisSqrBtwCoords="两坐标间距离的平方 [D]"
	DYCDisSqrBtwCoords="坐标 (",~X坐标,", ",~Y坐标,") 与坐标 (",~X坐标,", ",~Y坐标,") 间距离的平方."
	DYCDisSqrBtwCoordsHint="用于比较距离,省略开平方步骤,略微节省效率 （来自DYC 1.03）"
DYCDisBtwCoordNLine="坐标到直线的距离 [D]"
	DYCDisBtwCoordNLine="坐标 (",~X坐标,", ",~Y坐标,") 到坐标 (",~X坐标,", ",~Y坐标,") 与坐标 (",~X坐标,", ",~Y坐标,") 所在直线的距离."
	DYCDisBtwCoordNLineHint="获取坐标到另外两坐标所在直线的距离 （来自DYC 1.03）"
GetDYCDDValue="被显示的伤害 [D]"
	GetDYCDDValue="被显示的伤害"
	GetDYCDDValueHint="响应'伤害显示完毕'事件,指代伤害显示系统统计出的伤害. （来自DYC 1.03）"
DYCAngleBtwCoords="两坐标间方向 [D]"
	DYCAngleBtwCoords="从坐标 (",~X坐标,", ",~Y坐标,") 到坐标 (",~X坐标,", ",~Y坐标,") 的角度"
	DYCAngleBtwCoordsHint="取值 -180~180 （来自DYC 1.03）"
YDWEGetObjectPropertyReal="物体属性 (实数) [JAPI]"
	YDWEGetObjectPropertyReal="[",~类型,"]",~物体," 的 ",~属性名,""
	YDWEGetObjectPropertyRealHint="属性名也就是物体编辑器里按Ctrl+D后看到的英文名 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
YDWEGetUnitAbilityState="技能属性 [JAPI]"
	YDWEGetUnitAbilityState=~单位," 的 ",~技能," 的 ",~状态
	YDWEGetUnitAbilityStateHint="(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
YDWEGetUnitAbilityDataReal="技能数据 (实数) [JAPI]"
	YDWEGetUnitAbilityDataReal=~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据
	YDWEGetUnitAbilityDataRealHint="数据A~数据I也就是物体编辑器里按Ctrl+D后看到的DataA~DataI (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
YDWECoordinateX="修正X坐标"
	YDWECoordinateX="需要修正的X坐标为：",~实数
	YDWECoordinateXHint="设修正X坐标，强制它大于地图边界最小值，小于地图边界最大值，避免弹出游戏错误。"
YDWECoordinateY="修正Y坐标"
	YDWECoordinateY="需要修正的Y坐标为：",~实数
	YDWECoordinateYHint="设修正Y坐标，强制它大于地图边界最小值，小于地图边界最大值，避免弹出游戏错误。"
YDWEDistanceBetweenUnits="两个单位之间的距离"
	YDWEDistanceBetweenUnits="从",~单位,"到",~单位,"的距离"
	YDWEDistanceBetweenUnitsHint="获取两个单位之间的距离。"
YDWEGetUnitArmor="获取单位护甲<Rising_Dusk制作>"
	YDWEGetUnitArmor="获取 ",~单位," 的护甲值，关联技能为 ",~辅助技能
	YDWEGetUnitArmorHint="可以获取单位的护甲值；需要保证混乱攻击对所有护甲均为100%伤害。关联技能的设置请参考example文件夹下的辅助地图。"
YDWE_TP_GetElapsedTime="获取中心计时器逝去时间<Fetrix_sai制作>"
	YDWE_TP_GetElapsedTime="获取运行索引为 ",~计时器运行索引," 的计时器逝去时间"
	YDWE_TP_GetElapsedTimeHint=""
YDWE_TP_GetRemainingTime="获取中心计时器剩余时间<Fetrix_sai制作>"
	YDWE_TP_GetRemainingTime="获取运行索引为 ",~计时器运行索引," 的计时器剩余时间"
	YDWE_TP_GetRemainingTimeHint=""
YDWE_TP_GetTimeout="获取中心计时器刷新周期<Fetrix_sai制作>"
	YDWE_TP_GetTimeout="获取运行索引为 ",~计时器运行索引," 的计时器刷新周期"
	YDWE_TP_GetTimeoutHint=""
YDWEAngleBetweenUnits="两个单位之间的角度"
	YDWEAngleBetweenUnits="从",~单位,"到",~单位,"的角度"
	YDWEAngleBetweenUnitsHint="获取两个单位之间的角度。"