OperatorInt="算术运算"
	OperatorInt=~数值," ",~运算符," ",~数值
	OperatorIntHint=
YDWEForLoopLocVarIndex="局部变量 -- 读取(循环数)"
	YDWEForLoopLocVarIndex="loop_",~变量名
	YDWEForLoopLocVarIndexHint="用来获取当前循环中的循环数，是个真正的Jass局部变量。"
GetItemCost="物品的价格 [W]"
	GetItemCost="获取",~i,"类型的",~j
	GetItemCostHint="初始化请设置好函数."
GetPlayerUnitTypeCount="指定玩家的单位类型数目 [W]"
	GetPlayerUnitTypeCount="获取",~p,"的",~u,"的数目"
	GetPlayerUnitTypeCountHint="包括正在建造的单位,common.ai里的native函数."
GetForLoopIndexA="循环整数A"
	GetForLoopIndexA="循环整数A"
	GetForLoopIndexAHint=
GetForLoopIndexB="循环整数B"
	GetForLoopIndexB="循环整数B"
	GetForLoopIndexBHint=
StringLength="字符串长度"
	StringLength=~String,的长度
	StringLengthHint=
R2I="转换实数为整数"
	R2I="转换 ",~Real," 为整数"
	R2RHint="舍弃小数部分."
S2I="转换字符串为整数"
	S2I="转换 ",~String," 为整数"
	S2IHint=
StringHash="获取字符串的哈希值"
	StringHash="(",~String,")的哈希值"
	StringHashHint="获取一个对应该字符串的密钥，不同的字符串的密钥基本不可能相同，也很难找到两个不同的字符串他们有着相同的密钥。可以用于制作密码等功能。"
YDWE_PreloadSL_Get="获取存档数据"
	YDWE_PreloadSL_Get="从",~玩家,"获取 ※",~数据注释,"，","从","当","前","存","档","[",~数据项索引,"]","上","获","取"
	YDWE_PreloadSL_GetHint="从玩家本地存档上获取数据，需要填入正确的数据项索引，标签即该项数据的注释。"
YDWEGeneralBounsSystemUnitGetBonus="万能属性系统-获取属性<茄子制作>"
	YDWEGeneralBounsSystemUnitGetBonus="获取 ",~单位," 附加 ",~属性
	YDWEGeneralBounsSystemUnitGetBonusHint=
GetHeroKillCount="击杀系统-获取杀敌数"
	GetHeroKillCount="获取",~玩家,"的杀敌数"
GetAssistsCount="击杀系统-获取助攻数"
	GetAssistsCount="获取",~玩家,"的助攻数"
GetHeroDeathCount="击杀系统-获取死亡数"
	GetHeroDeathCount="获取",~玩家,"的死亡数"
GetHandleIdBJ="获取对象的h2i值"
	GetHandleIdBJ="转换 ",~Handle," 为整数"
	GetHandleIdBJHint="创建一个对应该handle的临时密钥,可以在哈希表中作为索引号使用.当该handle被彻底销毁时,密钥会被回收."
GetHandleId="获取对象的h2i值 [C]"
	GetHandleId="转换 ",~Handle," 为整数"
	GetHandleIdHint="创建一个对应该handle的临时密钥,可以在哈希表中作为索引号使用.当该handle被彻底销毁时,密钥会被回收."
StringHashBJ="获取字符串的哈希值"
	StringHashBJ="转换 ",~String," 为整数"
	StringHashBJHint="创建一个对应该字符串的永久密钥,可以在哈希表中作为索引号使用"
YDWE_TP_NewTimerPeriodic="新中心计时器-开启新的运行索引<Fetrix_sai制作>"
	YDWE_TP_NewTimerPeriodic="开启中心计时器一个新的运行索引，时间间隔为 ",~时间," 秒，是否循环 ",~真值,"，运行触发器 ",~触发器
	YDWE_TP_NewTimerPeriodicHint="当中心计时器运行某个触发器时，会生成一个运行索引；本条API会按设置的参数来运行触发器，并返回一个运行索引。"
YDWE_TP_GetExpiredTimerIndex="新中心计时器-获取当前到期计时器运行索引<Fetrix_sai制作>"
	YDWE_TP_GetExpiredTimerIndex="获取当前到期计时器运行索引"
	YDWE_TP_GetExpiredTimerIndexHint="当中心计时器运行某个触发器时，会生成一个运行索引；可以通过本条API来获取当前到期的计时器运行索引。"
YDWEGetGameCurrentTime="计时器系统 - 获取游戏当前时间"
	YDWEGetGameCurrentTime="获取游戏当前时间"
	YDWEGetGameCurrentTimeHint="获得从游戏开始到目前流逝的时间，以秒为单位。"
YDWETimerSystemGetRunIndex="计时器系统 - 获取中心计时器当前执行索引"
	YDWETimerSystemGetRunIndex="获取中心计时器当前执行索引"
	YDWETimerSystemGetRunIndexHint="获得中心计时器运行触发器或函数目前为止的执行次数。"
YDWEGetUnitItemSoftId="物品在物品栏中的位置 [Y]"
	YDWEGetUnitItemSoftId="获取 ",~单位," 物品栏中 ",~物品," 的位置"
	YDWEGetUnitItemSoftIdHint="返回物品所在单位物品栏中的位置，为1-6之间的某个值；若单位身上不存在该物品，则返回0。"
YDWEConverUnitcodeToInt="显示 单位类型 为整数 [Y]"
	YDWEConverUnitcodeToInt="显示 <",~单位类型,"> 为整数"
	YDWEConverUnitcodeToIntHint="单位类型本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
YDWEConverItemcodeToInt="显示 物品类型 为整数 [Y]"
	YDWEConverItemcodeToInt="显示 <",~物品类型,"> 为整数"
	YDWEConverItemcodeToIntHint="物品类型本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
YDWEConverAbilcodeToInt="显示 技能类型 为整数 [Y]"
	YDWEConverAbilcodeToInt="显示 <",~技能类型,"> 为整数"
	YDWEConverAbilcodeToIntHint="技能类型本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
YDWEConverOrdercodeToInt="显示命令ID为整数 [Y]"
	YDWEConverOrdercodeToInt="显示<",~命令ID,">为整数"
	YDWEConverOrdercodeToIntHint="命令ID本身是个整数，因此无需转换；该功能主要用于存储系统的路径设置中。"
YDWEGetIntegerByInteger="获取 整数 (整数路径)"
	YDWEGetIntegerByInteger="从存储目录-> ",~整数,"，标签-> ",~整数," 上获取整数"
	YDWEGetIntegerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取整数数据。"
YDWEGetIntegerByString="获取 整数 (字符串路径)"
	YDWEGetIntegerByString="从存储目录-> ",~字符串,"，标签-> ",~字符串," 上获取整数"
	YDWEGetIntegerByStringHint="通过输入的路径，系统会根据当前魔兽版本从缓存或HashTable上获取整数数据。"
YDWEGetUnitGoldCost="获取 黄金消耗 (单位类型)"
	YDWEGetUnitGoldCost="获取 ",~单位," 建造时消耗的黄金"
	YDWEGetUnitGoldCostHint="本触发只能获取普通单位建造时消耗的黄金，若填入英雄单位，将会获得固定值425"
YDWEGetUnitWoodCost="获取 木头消耗 (单位类型)"
	YDWEGetUnitWoodCost="获取 ",~单位," 建造时消耗的木头"
	YDWEGetUnitWoodCostHint="本触发只能获取普通单位建造时消耗的木头，若填入英雄单位，将会获得固定值100"
YDWEGetUnitBuildTime="获取 建造时间 (单位类型)"
	YDWEGetUnitBuildTime="获取 ",~单位," 建造时需要的时间"
	YDWEGetUnitBuildTimeHint="本触发只能获取普通单位建造时需要的时间，若填入英雄单位，将会获得固定值55"
YDWEGetUnitFoodUsed="获取 消耗人口 (单位)"
	YDWEGetUnitFoodUsed="获取 ",~单位," 建造时消耗的人口"
	YDWEGetUnitFoodUsedHint="本触发只能获取普通单位建造时消耗的人口，若填入英雄单位，将会获得固定值5"
YDWEGetUnitFoodMade="获取 提供人口 (单位)"
	YDWEGetUnitFoodMade="获取 ",~单位," 建造后提供的人口"
	YDWEGetUnitFoodMadeHint="本触发只能获取普通单位建造后提供的人口，若填入英雄单位，将会获得固定值0"
GetElevatorHeight="升降机高度"
	GetElevatorHeight=~升降机," 的高度"
	GetElevatorHeightHint="可以使用'可破坏物 - 设置升降机高度'来设置升降机高度."
GetTerrainCliffLevel="地形悬崖高度(指定坐标) [C]"
	GetTerrainCliffLevel="坐标(",~X,",",~Y,")处的地形悬崖高度"
	GetTerrainCliffLevelHint="悬崖高度:深水区为0, 浅水区为1, 平原为2, 之后每层+1."
GetTerrainCliffLevelBJ="地形悬崖高度(指定点)"
	GetTerrainCliffLevelBJ=~指定点," 处的地形悬崖高度"
	GetTerrainCliffLevelBJHint="悬崖高度:深水区为0, 浅水区为1, 平原为2, 之后每层+1."
GetTerrainVariance="地形样式(指定坐标) [C]"
	GetTerrainVariance="坐标(",~X,",",~Y,")处的地形样式"
	GetTerrainVarianceHint=
GetTerrainVarianceBJ="地形样式(指定点)"
	GetTerrainVarianceBJ=~指定点," 处的地形样式"
	GetTerrainVarianceBJHint=
GetLearnedSkillLevel="学习技能等级"
	GetLearnedSkillLevel="学习技能等级"
	GetLearnedSkillLevelHint="响应'学习技能'单位事件,指代被学习技能的等级. 注意,该值为学习后的等级."
GetPlayers="玩家数量"
	GetPlayers="玩家数量"
	GetPlayersHint="地图编辑器中开启的玩家数量(1-12)."
GetTeams="队伍数量"
	GetTeams="队伍数量"
	GetTeamsHint=
GetAllyColorFilterState="联盟颜色显示设置"
	GetAllyColorFilterState="联盟颜色显示设置"
	GetAllyColorFilterStateHint="0为不开启. 1为小地图显示. 2为小地图和游戏都显示."
GetTournamentFinishNowRule="比赛结束规则"
	GetTournamentFinishNowRule="比赛结束规则"
	GetTournamentFinishNowRuleHint="1表示游戏开始时间已经超过限定时,无法以平局结束. 其他值表示游戏还在初期阶段,此时退出游戏将以平局结束.."
GetTournamentScore="对战比赛得分"
	GetTournamentScore=~Player," 的当前对战比赛得分"
	GetTournamentScoreHint="对战游戏时如果游戏时间过长,系统将以该值来决定胜负."
GetStoredInteger="缓存读取整数 [C]"
	GetStoredInteger="从",~Game Cache,"中读取整数值,类别: ",~Category,",名称: ",~文字
	GetStoredIntegerHint="如果该值不存在则返回0."
GetHeroLevel="英雄等级"
	GetHeroLevel=~英雄," 的英雄等级"
	GetHeroLevelHint=
GetHeroXP="英雄经验值"
	GetHeroXP=~英雄," 的经验值"
	GetHeroXPHint=
GetHeroStr="英雄力量 [C]"
	GetHeroStr=~英雄," 的力量值(",~Include/Exclude," 加成)"
	GetHeroStrHint=
GetHeroAgi="英雄敏捷 [C]"
	GetHeroAgi=~英雄," 的敏捷值(",~Include/Exclude," 加成)"
	GetHeroAgiHint=
GetHeroInt="英雄智力 [C]"
	GetHeroInt=~英雄," 的智力值(",~Include/Exclude," 加成)"
	GetHeroIntHint=
GetHeroStatBJ="英雄属性"
	GetHeroStatBJ=~Attribute," 对 ",~英雄," (",~Include/Exclude," 加成)"
	GetHeroStatBJHint=
GetHeroSkillPoints="未分配技能点数"
	GetHeroSkillPoints=~英雄," 的未分配技能点数"
	GetHeroSkillPointsHint=
GetInventoryIndexOfItemTypeBJ="物品在物品栏的序号 [C]"
	GetInventoryIndexOfItemTypeBJ=~单位," 所持有的 ",~物品类型," 的物品栏序号"
	GetInventoryIndexOfItemTypeBJHint="如果单位没有该类型的物品则返回0"
GetItemLevel="物品等级"
	GetItemLevel=~物品," 的物品等级"
	GetItemLevelHint=
GetItemCharges="使用次数"
	GetItemCharges=~物品," 的使用次数"
	GetItemChargesHint="无限使用物品将返回0."
GetItemUserData="物品自定义值"
	GetItemUserData=~物品," 的自定义值"
	GetItemUserDataHint="可以使用'物品 - 设置自定义值'来设置该值."
LeaderboardGetPlayerIndexBJ="排行榜位置"
	LeaderboardGetPlayerIndexBJ=~Player," 在 ",~Leaderboard," 的排名"
	LeaderboardGetPlayerIndexBJHint=
LeaderboardGetItemCount="行数"
	LeaderboardGetItemCount=~Leaderboard," 的行数"
	LeaderboardGetItemCountHint=
GetRandomInt="随机整数"
	GetRandomInt="随机整数,最小值: ",~Minimum," 最大值: ",~Maximum
	GetRandomIntHint=
IMinBJ="取较小值"
	IMinBJ="取(",~整数1,", ",~整数2,")中较小值"
	IMinBJHint=
IMaxBJ="取较大值"
	IMaxBJ="取(",~整数1,", ",~整数2,")中较大值"
	IMaxBJHint=
IAbsBJ="绝对值"
	IAbsBJ=~整数," 的绝对值"
	IAbsBJHint=
ISignBJ="符号标志"
	ISignBJ=~整数," 的符号标志"
	ISignBJHint="负数为-1. 非负数为1."
ModuloInteger="模"
	ModuloInteger=~被除数," mod ",~除数
	ModuloIntegerHint="取模计算,例: 13 mod 5 = 3."
MultiboardGetRowCount="行数"
	MultiboardGetRowCount=~Multiboard," 的行数"
	MultiboardGetRowCountHint=
MultiboardGetColumnCount="列数"
	MultiboardGetColumnCount=~Multiboard," 的列数"
	MultiboardGetColumnCountHint=
GetResourceAmount="储金量"
	GetResourceAmount=~金矿," 的储金量"
	GetResourceAmountHint="只对金矿有效."
GetPlayerState="玩家属性"
	GetPlayerState=~Player," ",~Property
	GetPlayerStateHint=
GetPlayerTaxRate="玩家税率 [C]"
	GetPlayerTaxRate=~Player," 需要交纳给 ",~Player," 的 ",~Resource," 所得税
	GetPlayerTaxRateHint="所得税取值范围0-100."
GetPlayerTaxRateBJ="玩家税率"
	GetPlayerTaxRateBJ=~Resource," 所得税, ",~Player," 交纳给 ",~Player
	GetPlayerTaxRateBJHint="所得税取值范围0-100."
GetPlayerScore="玩家得分"
	GetPlayerScore=~Player," ",~Score
	GetPlayerScoreHint=
GetConvertedPlayerId="玩家索引"
	GetConvertedPlayerId=~Player," 的玩家索引号"
	GetConvertedPlayerIdHint="玩家索引取值1-16."
GetPlayerId="玩家索引 [C]"
	GetPlayerId=~Player," 的玩家索引号"
	GetPlayerIdHint="玩家索引取值0-15，玩家一的索引号为0"
GetPlayerStructureCount="建筑数量"
	GetPlayerStructureCount=~Player," 拥有的建筑数量(",~Include/Exclude," 未完成的)"
	GetPlayerStructureCountHint=
GetPlayerUnitCount="非建筑单位数量"
	GetPlayerUnitCount=~Player," 拥有的非建筑单位数量(",~Include/Exclude," 未完成的)"
	GetPlayerUnitCountHint=
GetPlayerTechCountSimple="当前科技等级"
	GetPlayerTechCountSimple=~科技," 的当前等级对 ",~Player
	GetPlayerTechCountSimpleHint=
GetPlayerTechMaxAllowedSwap="最大科技等级"
	GetPlayerTechMaxAllowedSwap=~科技," 的最大等级对 ",~Player
	GetPlayerTechMaxAllowedSwapHint=
GetPlayerTeam="玩家队伍"
	GetPlayerTeam=~Player," 所属队伍编号"
	GetPlayerTeamHint=
CountPlayersInForceBJ="玩家组中玩家数量"
	CountPlayersInForceBJ=~玩家组," 中的玩家数量"
	CountPlayersInForceBJHint=
CountUnitsInGroup="单位组中单位数量"
	CountUnitsInGroup=~单位组," 中的单位数量"
	CountUnitsInGroupHint=
CountLivingPlayerUnitsOfTypeId="玩家拥有单位数量"
	CountLivingPlayerUnitsOfTypeId=~单位类型," 的数量对 ",~Player
	CountLivingPlayerUnitsOfTypeIdHint=
GetUnitFoodUsed="单位使用人口数量"
	GetUnitFoodUsed=~单位," 使用的人口数量"
	GetUnitFoodUsedHint=
GetUnitFoodMade="单位提供人口数量"
	GetUnitFoodMade=~单位," 提供的人口数量"
	GetUnitFoodMadeHint=
GetFoodUsed="单位使用人口数量(指定单位类型)"
	GetFoodUsed=~单位类型," 使用的人口数量"
	GetFoodUsedHint=
GetFoodMade="单位提供人口数量(指定单位类型)"
	GetFoodMade=~单位类型," 提供的人口数量"
	GetFoodMadeHint=
GetUnitPointValue="单位附加值"
	GetUnitPointValue=~单位," 的附加值"
	GetUnitPointValueHint="单位附加值不可改变. 可以做一些特殊用途. 比如TD地图中的建筑贩卖价格."
GetUnitPointValueByType="单位附加值(指定单位类型)"
	GetUnitPointValueByType=~单位类型," 的附加值"
	GetUnitPointValueByTypeHint=单位附加值不可改变. 可以做一些特殊用途. 比如TD地图中的建筑贩卖价格.
GetUnitUserData="单位自定义值"
	GetUnitUserData=~单位," 的自定义值"
	GetUnitUserDataHint="可使用'单位 - 设置自定义值'来设置该值."
GetUnitLevel="单位等级"
	GetUnitLevel=~单位," 的等级"
	GetUnitLevelHint="对于英雄则会返回其英雄等级."
GetUnitAbilityLevel="单位技能等级 [C]"
	GetUnitAbilityLevel=~单位," 的 ",~技能," 技能等级"
	GetUnitAbilityLevelHint="如果单位没有该技能,则返回0."
GetUnitAbilityLevelSwapped="单位技能等级"
	GetUnitAbilityLevelSwapped=~技能," 的等级对 ",~单位
	GetUnitAbilityLevelSwappedHint="如果单位没有该技能,则返回0."
UnitInventoryCount="持有物品数量"
	UnitInventoryCount=~单位," 所持有的物品数量"
	UnitInventoryCountHint=
UnitInventorySizeBJ="物品栏格数"
	UnitInventorySizeBJ=~单位," 的物品栏格数"
	UnitInventorySizeBJHint=
UnitCountBuffsEx="拥有Buff数量 [C]"
	UnitCountBuffsEx=~单位," 的附带Buff数量,(",~Include/Exclude," 正面Buff, ",~Include/Exclude," 负面Buff",~Include/Exclude," 魔法Buff, ",~Include/Exclude," 物理Buff",~Include/Exclude," 生命周期, ",~Include/Exclude," 光环效果",~Include/Exclude," 不可驱散Buff)"
	UnitCountBuffsExHint=
UnitCountBuffsExBJ="拥有Buff数量"
	UnitCountBuffsExBJ=~Buff Type," ",~Buff Resist," Buff数量在 ",~单位," 身上(",~Include/Exclude," 生命周期, ",~Include/Exclude," 光环)"
	UnitCountBuffsExBJHint=
GetTriggerEvalCount="触发条件判断次数"
	GetTriggerEvalCount=~Trigger," 的触发条件判断次数"
	GetTriggerEvalCountHint=
GetTriggerExecCount="触发动作运行次数"
	GetTriggerExecCount=~Trigger," 的触发动作运行次数"
	GetTriggerExecCountHint=
QueuedTriggerCountBJ="队列中触发数量"
	QueuedTriggerCountBJ="触发队列中的触发数量"
	QueuedTriggerCountBJHint="可使用'触发器 - 添加到队列'和'触发器 - 移出队列'动作来操作触发队列."
YDWEGetUnitID="获取 单位 的整数地址"
	YDWEGetUnitID="获取 ",~单位," 的整数地址"
	YDWEGetUnitIDHint="可以把一个单位转成整数，方便存入缓存或Hash表。"
YDWEGetPlayerID="获取 玩家 的整数地址"
	YDWEGetPlayerID="获取 ",~玩家," 的整数地址"
	YDWEGetPlayerIDHint="可以把一个玩家转成整数，方便存入缓存或Hash表。"
YDWEGetItemID="获取 物品 的整数地址"
	YDWEGetItemID="获取 ",~物品," 的整数地址"
	YDWEGetItemIDHint="可以把一个物品转成整数，方便存入缓存或Hash表。"
YDWEGetTimerID="获取 计时器 的整数地址"
	YDWEGetTimerID="获取 ",~计时器," 的整数地址"
	YDWEGetTimerIDHint="可以把一个计时器转成整数，方便存入缓存或Hash表。"
YDWEGetTriggerID="获取 触发器 的整数地址"
	YDWEGetTriggerID="获取 ",~触发器," 的整数地址"
	YDWEGetTriggerIDHint="可以把一个触发器转成整数，方便存入缓存或Hash表。"
YDWEGetGroupID="获取 单位组 的整数地址"
	YDWEGetGroupID="获取 ",~单位组," 的整数地址"
	YDWEGetGroupIDHint="可以把一个单位组转成整数，方便存入缓存或Hash表。"
YDWEGetLocationID="获取 点 的整数地址"
	YDWEGetLocationID="获取 ",~点," 的整数地址"
	YDWEGetLocationIDHint="可以把一个点转成整数，方便存入缓存或Hash表。"
YDWEGetUnitTypeID="获取 单位类型 的整数地址"
	YDWEGetUnitTypeID="获取 ",~单位类型," 的整数地址"
	YDWEGetUnitTypeIDHint="可以把一个单位类型转成整数，方便存入缓存或Hash表。"
YDWEGetAbilityTypeID="获取 技能类型 的整数地址"
	YDWEGetAbilityTypeID="获取 ",~技能类型," 的整数地址"
	YDWEGetAbilityTypeIDHint="可以把一个技能类型转成整数，方便存入缓存或Hash表。"
YDWEGetItemTypeID="获取 物品类型 的整数地址"
	YDWEGetItemTypeID="获取 ",~物品类型," 的整数地址"
	YDWEGetItemTypeIDHint="可以把一个物品类型转成整数，方便存入缓存或Hash表。"
YDWEGetMultiboardID="获取 多面板 的整数地址"
	YDWEGetMultiboardID="获取 ",~多面板," 的整数地址"
	YDWEGetMultiboardIDHint="可以把一个多面板转成整数，方便存入缓存或Hash表。"
YDWEGetMultiboardItemID="获取 多面板项目 的整数地址"
	YDWEGetMultiboardItemID="获取 ",~多面板项目," 的整数地址"
	YDWEGetMultiboardItemIDHint="可以把一个多面板项目转成整数，方便存入缓存或Hash表。"
YDWEGetTextTagID="获取 漂浮文字 的整数地址"
	YDWEGetTextTagID="获取 ",~漂浮文字," 的整数地址"
	YDWEGetTextTagIDHint="可以把一个漂浮文字转成整数，方便存入缓存或Hash表。"
YDWEGetLightningID="获取 闪电 的整数地址"
	YDWEGetLightningID="获取 ",~闪电," 的整数地址"
	YDWEGetLightningIDHint="可以把一个闪电成转整数，方便存入缓存或Hash表。"
YDWEGetRegionID="获取 区域 的整数地址"
	YDWEGetRegionID="获取 ",~区域," 的整数地址"
	YDWEGetRegionIDHint="可以把一个区域转成整数，方便存入缓存或Hash表。"
YDWEGetRectID="获取 地区 的整数地址"
	YDWEGetRectID="获取 ",~地区," 的整数地址"
	YDWEGetRectIDHint="可以把一个地区转成整数，方便存入缓存或Hash表。"
YDWEGetLeaderboardID="获取 排行榜 的整数地址"
	YDWEGetLeaderboardID="获取 ",~排行榜," 的整数地址"
	YDWEGetLeaderboardIDHint="可以把一个排行榜转成整数，方便存入缓存或Hash表。"
YDWEGetEffectID="获取 特效 的整数地址"
	YDWEGetEffectID="获取 ",~特效," 的整数地址"
	YDWEGetEffectIDHint="可以把一个特效转成整数，方便存入缓存或Hash表。"
YDWEGetDestructableID="获取 可破坏物 的整数地址"
	YDWEGetDestructableID="获取 ",~可破坏物," 的整数地址"
	YDWEGetDestructableIDHint="可以把一个可破坏物转成整数，方便存入缓存或Hash表。"
YDWEGetTriggerConditionID="获取 触发器条件 的整数地址"
	YDWEGetTriggerConditionID="获取 ",~触发器条件," 的整数地址"
	YDWEGetTriggerConditionIDHint="可以把一个触发器条件转成整数，方便存入缓存或Hash表。"
YDWEGetTriggerActionID="获取 触发器动作 的整数地址"
	YDWEGetTriggerActionID="获取 ",~触发器动作," 的整数地址"
	YDWEGetTriggerActionIDHint="可以把一个触发器动作转成整数，方便存入缓存或Hash表。"
YDWEGetTriggerEventID="获取 事件 的整数地址"
	YDWEGetTriggerEventID="获取 ",~事件," 的整数地址"
	YDWEGetTriggerEventIDHint="可以把一个事件转成整数，方便存入缓存或Hash表。"
YDWEGetForceID="获取 势力 的整数地址"
	YDWEGetForceID="获取 ",~势力," 的整数地址"
	YDWEGetForceIDHint="可以把一个势力转成整数，方便存入缓存或Hash表。"
YDWEGetBoolexprID="获取 布尔表达式 的整数地址"
	YDWEGetBoolexprID="获取 ",~布尔表达式," 的整数地址"
	YDWEGetBoolexprIDHint="可以把一个布尔表达式转成整数，方便存入缓存或Hash表。"
GetStoredIntegerBJ="缓存读取整数"
	GetStoredIntegerBJ="从游戏缓存读取整数,名称: ",~文字," 类别: ",~Category," 缓存: ",~Game Cache
	GetStoredIntegerBJHint="原版UI，英文的语序的关系，为了使UI读起来更流畅，添加了一层封装，但这对中文来说就是画蛇添足了"
YDWEGetObjectPropertyInteger="物体属性 (整数) [JAPI]"
	YDWEGetObjectPropertyInteger="[",~类型,"]",~物体," 的 ",~属性名,""
	YDWEGetObjectPropertyIntegerHint="属性名也就是物体编辑器里按Ctrl+D后看到的英文名 (WMUI: JAPI函数需要JAPI环境，因此慎用！)"
YDWERecordGetI="获取存档数据 [JAPI]"
	YDWERecordGetI="从",~玩家,"的服务器存档中读出〖",~数据名,"〗"
	YDWERecordGetIHint="从玩家服务器存档上获取数据，需要填入正确的数据名。(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
YDWERPGGetKey="读取RPG积分 [JAPI]"
	YDWERPGGetKey="从",~玩家,"的RPG积分中读出〖",~数据名,"〗"
	YDWERPGGetKeyHint="从RPG积分上获取数据，需要填入正确的数据名。"
YDWEGetUnitAbilityDataInteger="技能数据 (整数) [JAPI]"
	YDWEGetUnitAbilityDataInteger=~单位," 的 ",~技能," 第 ",~等级," 级的 ",~数据
	YDWEGetUnitAbilityDataIntegerHint="(WMUI: JAPI函数需要JAPI环境，因此慎用！)"
YDWES2Id="转换字符串为ID [Y]"
	YDWES2Id="转换 ",~字符串," 为ID"
	YDWES2IdHint="将一个字符串转换成单位、物品等目标的ID；如spsh转换后为'spsh'，届时可以通过聊天输入字符串来创建单位或物品。"