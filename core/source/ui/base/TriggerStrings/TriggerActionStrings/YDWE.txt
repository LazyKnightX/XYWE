// YD Ability
	YDWEJumpTimer="跳跃函数 [Y]"
		YDWEJumpTimer="命令 ",~单位," 向 ",~方向," 方向跳跃，距离为 ",~距离," ，持续 ",~时间," 秒，刷新周期 ",~I,"，最大高度 ",~高度,"。"
		YDWEJumpTimerHint="当最大高度设置为0，则为普通的移动。"
	YDWEMeatHook="肉钩 [Y]"
		YDWEMeatHook="让","单","位 ",~单位," 向 ",~点," 放","出","一","条","钩","子，","钩","头","为 ",~钩头,"，链条为 ",~链条,"，最","远","距","离可","达 ",~实数,"，链条","间距","为 ",~实数,"，对敌对","单位","造成","伤害 ",~实数,"，刷新","周期为 ",~实数,"。"
		YDWEMeatHookHint="钩肥大战里的钩子，由Ors和Everguo优化代码。请务必从演示地图里复制钩子和钩条单位，算我求大家了-.-"
	YDWETimerPatternJumpAttack="跳劈函数 [Y]"
		YDWETimerPatternJumpAttack="命令 ",~单位," 向 ",~方向," 方向跳劈，距离为 ",~距离," ，","持","续","时","间 ",~时间,"，刷新周期 ",~I,"，最大高度 ",~高度,"，","对","途","经","敌","人","造","成","伤","害","值 ",~伤害量,"，在敌人的 ",~部位," 附加特效 ",~特效,"。"
		YDWETimerPatternJumpAttackHint="<Warft_TigerCN制作> 当伤害值设置为0，则敌人身上不出现特效。代码由Fetrix_sai修改。"
	YDWETimerPatternMoonPriestessArrow="月神箭 [Y]"
		YDWETimerPatternMoonPriestessArrow="命令 ",~单位," 向 ",~方向," 方向飞行，距离为 ",~距离," ，","持续 ",~时间," 秒，刷新周期 ",~I,"，生成带有 ",~整数," 级 ",~技能," 的 ",~辅助单位,"，对目标施放 ",~技能," ，在目标的 ",~部位," 附加 ",~特效,"。"
		YDWETimerPatternMoonPriestessArrowHint="<Warft_TigerCN制作> 由辅助单位给目标添加眩晕等状态。代码由Fetrix_sai修改。"
	YDWETimerPatternRushSlide="冲锋 [Y]"
		YDWETimerPatternRushSlide="命令 ",~单位," 向 ",~方向," 方向冲锋，射程为 ",~距离," ，持续 ",~时间," 秒，刷新周期 ",~I,"，对途经敌人伤害值 ",~实数,"，摧毁树木 ",~布尔,"，不计算碰撞 ",~布尔,"，无视地形 ",~布尔," ，在目标的 ",~部位," 附加 ",~特效,"(地面)，附加 ",~特效,"(水中)"
		YDWETimerPatternRushSlideHint="<Warft_TigerCN制作> 代码由Fetrix_sai修改"
	YDWEAroundSystem="万能环绕函数 [Y]"
		YDWEAroundSystem="命令 ",~单位," 围绕 ",~单位," 环绕，角速度为 ",~实数,"，离心速度为 ",~实数,"，提升速度为 ",~实数,"，持续 ",~实数," 秒""，""刷""新""周""期""为 ",~实数," 秒"
		YDWEAroundSystemHint="<Fetrix_sai制作> 角速度为正，顺时针旋转，反之逆时针；离心速度为正，远离目标，反之靠近；提升速度为正，则高度上升，反之下降。"
// YD System
	LeakMonitor="检测并显示泄露 [JAPI] [W]"
		LeakMonitor="显示点、特效、单位组、不规则区域、矩形区域、玩家组泄露"
		LeakMonitorHint="要把“设置-魔兽插件-泄漏检测”的选项打开才能使用，位于YDWE配置。虽然是Japi,但是检测功能是测试之用，如不需要，删除即可。"
	CreateLeakMonitorReport="生成详细泄露报告 [JAPI] [W]"
		CreateLeakMonitorReport="生成报告于本地磁盘"
		CreateLeakMonitorReportHint="生成 YDWE目录\logs\leak_moniter_report.txt,虽然是Japi,但是检测功能是测试之用，如不需要，删除即可。"
	WMLeakMonitorSystem="检测泄露系统 [JAPI] [W]"
		WMLeakMonitorSystem="显示16项类型数量"
		WMLeakMonitorSystemHint="输入-reset max重设max值，输入-set t=数字，设置检测开始到显示的延迟，不输入则为2秒，推荐为2秒以上。,魔兽1.20可能有问题."
	YDWENewItemsFormula="物品合成系统 [Y]"
		YDWENewItemsFormula="将材料1( ",~类型,",",~整数,")、材料2( ",~类型,",",~整数,")、材料3( ",~类型,",",~整数,")""、""材""料""4""( ",~类型,",",~整数,")、材料5( ",~类型,",",~整数,")、材料6( ",~类型,",",~整数,")合成 ",~物品," "
		YDWENewItemsFormulaHint="<Fetrix_sai制作> 填写物品合成所需的材料及其数量，最多可以填6种；当所需材料数量为0时，对应材料将被忽略。"
	YDWE_TP_PauseTimerPeriodic="新中心计时器 - 终止运行 [Y]"
		YDWE_TP_PauseTimerPeriodic="终止运行索引为 ",~计时器运行索引," 的计时器运行 "
		YDWE_TP_PauseTimerPeriodicHint="<Fetrix_sai制作> 当中心计时器运行某个触发器时，会生成一个运行索引；可以通过该运行索引来终止本次计时器运行。"
	YDWE_TP_SetTimeInterval="新中心计时器 - 修改运行间隔 [Y]"
		YDWE_TP_SetTimeInterval="修改运行索引为 ",~计时器运行索引," 的计时器运行间隔为 ",~实数
		YDWE_TP_SetTimeIntervalHint="<Fetrix_sai制作> 当中心计时器运行某个触发器时，会生成一个运行索引；可以中途修改计时器某次运行的时间间隔。"
	YDWEAttackWaveTimer="刷兵系统 [Y]"
		YDWEAttackWaveTimer="为玩家 ",~玩家," 创建 ",~n," 个 ",~单位类型," 在点 ",~初始点," 面向 ",~角度,"，命令他们攻击到点 ",~目标点,"，刷新周期 ",~周期,"。"
		YDWEAttackWaveTimerHint="3C的刷兵系统，也可用于防守RPG，按周期生成每波单位向指定点进攻。"
	YDWERemoveAttackWaveByUnitID="取消刷兵(输入参数) [Y]"
		YDWERemoveAttackWaveByUnitID="停止创建 ",~单位,"，地点为 ",~初始点,"，周期是 ",~周期
		YDWERemoveAttackWaveByUnitIDHint="取消刷兵，注意这里填写的参数要与前面刷兵系统一致，不然无法停止刷兵。"
	YDWERemoveAttackWaveByTimer="取消刷兵(删除计时器) [Y]"
		YDWERemoveAttackWaveByTimer="删除刷兵计时器 ",~计时器
		YDWERemoveAttackWaveByTimerHint="取消刷兵，并能自动清空缓存。"
	YDWEDoubleItemSlotByAbility="多重物品栏(技能触发) [Y]"
		YDWEDoubleItemSlotByAbility="当 ",~单位," 使用技能 ",~背包技能," 时切换背包，辅助单位为 ",~背包单位,"，背包个数为 ",~整数
		YDWEDoubleItemSlotByAbilityHint="切换背包时会触发单位获得和掉落物品事件；背包技能和背包单位的设置请参考example文件夹中的辅助地图。"
	YDWEDoubleItemSlotByItem="多重物品栏(物品触发) [Y]"
		YDWEDoubleItemSlotByItem="当 ",~单位," 使用物品 ",~背包物品," 时切换背包，辅助单位为 ",~背包单位,"，背包个数为 ",~整数
		YDWEDoubleItemSlotByItemHint="切换背包时会触发单位获得和掉落物品事件；背包物品和背包单位的设置请参考example文件夹中的辅助地图。"
	YDWEGeneralBounsSystemUnitSetBonus="万能属性系统 - 设置属性 [Y]"
		YDWEGeneralBounsSystemUnitSetBonus="设置 ",~单位," 的附加 ",~属性," ",~计算," ",~数值
		YDWEGeneralBounsSystemUnitSetBonusHint="<茄子制作>"
	KillSystemInitSet="击杀系统 - 初始化设置 [W]"
		KillSystemInitSet="击杀系统 - 设置第一滴血奖励金钱,",~g,"音效",~p,",每次击杀最少金钱",~g,", 被杀英雄每级所增加的金钱数",~g,", 短时间内连杀所持续时间 ",~t,", 判断助攻的持续时间",~t,"死亡是否失去金钱",~b
		KillSystemInitSetHint="如果对系统不理解请先看演示图"
	KillSystemAddHero="击杀系统 - 添加英雄 [W]"
		KillSystemAddHero="击杀系统 - 给该系统添加英雄 ",~h
		KillSystemAddHeroHint=""
	AddKillText="击杀系统 - 设置累计杀信息 [W]"
		AddKillText="击杀系统 - 设置累计杀信息 ",~h," 播放音效",~m
		AddKillTextHint="从杀三个开始。不会随时间刷新的累计杀人数，死亡后刷新.每设置一次就是下一次累计杀信息。当杀敌数超过设置的信息时将显示最后一个信息。"
	AddContinuousKillText="击杀系统 - 设置连杀信息 [W]"
		AddContinuousKillText="击杀系统 - 设置连杀信息 ",~h," 播放音效",~m
		AddContinuousKillTextHint="从杀二个开始。会随时间刷新的累计杀人数，死亡后刷新.每设置一次就是下一次连杀信息。当杀敌数超过设置的信息时将显示最后一个信息。"
	AddDeathText="击杀系统 - 设置连死信息 [W]"
		AddDeathText="击杀系统 - 设置连死信息 ",~h
		AddDeathTextHint="从死三次开始。杀人后刷新.每设置一次就是下一次死亡信息。当死亡数超过设置的信息时将显示最后一个信息"
	AddShutDownText="击杀系统 - 设置终结信息 [W]"
		AddShutDownText="击杀系统 - 设置终结信息 ",~h
		AddShutDownTextHint="每设置一次就是下一次终结信息。"
// YD AI
	YDWESetGuard="佣兵系统 [Y]"
		YDWESetGuard="命令 ",~单位," 跟随 ",~单位,"，刷新周期 ",~timeout,"，巡逻半径 ",~guardRanger,"，返回半径 ",~returnRanger,"，传送半径 ",~outRanger,"，巡逻概率 ",~percent,"%"
		YDWESetGuardHint="让一个佣兵跟随主人，可以在主人身边巡逻，当远离主人后自动返回或传送到主人身边。（Red_Wolf制作）"
	YDWERemoveGuard="取消佣兵 [Y]"
		YDWERemoveGuard="取消 ",~单位," 的跟随"
		YDWERemoveGuardHint="让一个佣兵不再跟随主人。备注：如果佣兵是召唤生物那么不必取消，因为当佣兵或主人死亡后，系统会自动取消跟随。（Red_Wolf制作）"
	YDWEAIRecordAbility="技能绑定英雄 [Y]"
		YDWEAIRecordAbility="给单位 ",~英雄," 绑定技能 ",~技能1," ",~技能2," ",~技能3," ",~技能4," ",~技能5
		YDWEAIRecordAbilityHint="为单位绑定5个技能，如果英雄只有4个技能，那么第5个技能请设置为空。（GreedWind制作）"
	YDWEAIRecordLearn_sequence="技能学习顺序绑定英雄 [Y]"
		YDWEAIRecordLearn_sequence="给单位 ",~英雄," 设置技能学习顺序为( ",~技能1," ",~技能2," ",~技能3," ",~技能4," ",~技能5," )"
		YDWEAIRecordLearn_sequenceHint="单位会按输入的等级去学习对应的技能，切记技能学习顺序要按^等级^等级...^等级^的格式输入。（GreedWind制作）"
	YDWEHeroLearnSkillAI="自动学习对应技能 [Y]"
		YDWEHeroLearnSkillAI="让英雄 ",~英雄," 自动学习技能，所学技能对应的英雄等级为 ",~整数
		YDWEHeroLearnSkillAIHint="英雄会学习与等级对应的技能，这些技能必须在之前绑定给英雄。（GreedWind制作）"
	YDWEHeroMaxSkillAI="自动学习全部技能 [Y]"
		YDWEHeroMaxSkillAI="让英雄 ",~英雄," 自动学习所有技能。"
		YDWEHeroMaxSkillAIHint="英雄会洗去之前学习过的技能，并根据技能表顺序学习完所有技能。（GreedWind制作）"
	YDWEAddAIOrder="自动施放技能 [Y]"
		YDWEAddAIOrder="让单位 ",~单位," 在 ",~整数,"时 ",~目标,"施","放","技","能","，","技","能","施","放","方","式","为","(","对","单","位-",~命令,"、","对","点-",~命令,"、","立","即-",~命令,")，","施","放","概","率","为 ",~整数,"%"
		YDWEAddAIOrderHint="让单位有一定概率施放技能，命令要与技能目标一致；代码由Red_Wolf和Fetrix_sai优化。"
// YD Save Load
	YDWE_PreloadSL_SetFile="设置存档索引(存档名单) [Y]"
		YDWE_PreloadSL_SetFile="为",~玩家,"在","『",~目录名,"』","下","，","将","〖",~存档名,"〗","的","索","引","设","置","为","→","[",~整数,"]"
		YDWE_PreloadSL_SetFileHint="高级功能，当目录下有多个玩家存档时，为存档添加整数索引，建立起存档文件名字与索引的对应关系。"
	YDWE_PreloadSL_Save="保存玩家存档 [Y]"
		YDWE_PreloadSL_Save="为",~玩家,"在","『",~目录名,"』","〖",~存档名,"〗","下","保","存","存","档","，","该","存","档","含","有","[",~整数,"]","个","数","据","项"
		YDWE_PreloadSL_SaveHint="保存一个玩家存档在指定路径下，注意存档的数据项数目不要填错。"
	YDWE_PreloadSL_Load="读取玩家存档 [Y]"
		YDWE_PreloadSL_Load="为",~玩家,"从","『",~目录名,"』","〖",~存档名,"〗","上","读","取","存","档","，","该","存","档","含","有","[",~整数,"]","个","数","据","项"
		YDWE_PreloadSL_LoadHint="获取指定目录下某个玩家存档，必须填写正确的文件名和数据项数目。"
	YDWE_PreloadSL_Set="添加存档数据 [Y]"
		YDWE_PreloadSL_Set="为",~玩家,"添","加"," ※",~数据注释,"，","在","当","前","存","档","[",~数据项索引,"]","上","，","添","加","┠",~数据,"┨"
		YDWE_PreloadSL_SetHint="把数据写入到玩家存档，需要填入正确的数据项索引，注释则可以随意填写。"
// YD LocalVariable
	YDWELocalVariableInitiliation="开启局部变量功能 [Y]"
		YDWELocalVariableInitiliation="开启局部变量功能"
		YDWELocalVariableInitiliationHint="必须在局部变量赋值之前启用；若触发器内没有等待动作，可以不启用；有等待需求时必须选用局部变量专用等待动作。"
	YDWELocalVariableEnd="清空局部变量 [Y]"
		YDWELocalVariableEnd="清空局部变量"
		YDWELocalVariableEndHint="清空本触发器内用到的全部局部变量，避免内存泄露；使用本动作之前请确保局部变量已经使用完毕。"
	YDWESetLocalVariableInteger="设置 整数 局部变量 [Y]"
		YDWESetLocalVariableInteger="设置 local_",~i," = ",~整数
		YDWESetLocalVariableIntegerHint="为整数局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableIntegerArray="设置 整数 局部变量数组 [Y]"
		YDWESetLocalVariableIntegerArray="设置 local_",~i,"[",~index,"]"," = ",~整数
		YDWESetLocalVariableIntegerArrayHint="为整数局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableReal="设置 实数 局部变量 [Y]"
		YDWESetLocalVariableReal="设置 local_",~R," = ",~实数
		YDWESetLocalVariableRealHint="为实数局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableRealArray="设置 实数 局部变量数组 [Y]"
		YDWESetLocalVariableRealArray="设置 local_",~R,"[",~index,"]"," = ",~实数
		YDWESetLocalVariableRealArrayHint="为实数局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableString="设置 字符串 局部变量 [Y]"
		YDWESetLocalVariableString="设置 local_",~str," = ",~字符串
		YDWESetLocalVariableStringHint="为字符串局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableStringArray="设置 字符串 局部变量数组 [Y]"
		YDWESetLocalVariableStringArray="设置 local_",~str,"[",~index,"]"," = ",~字符串
		YDWESetLocalVariableStringArrayHint="为字符串局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableBoolean="设置 真值 局部变量 [Y]"
		YDWESetLocalVariableBoolean="设置 local_",~bl," = ",~真值
		YDWESetLocalVariableBooleanHint="为真值局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableBooleanArray="设置 真值 局部变量数组 [Y]"
		YDWESetLocalVariableBooleanArray="设置 local_",~bl,"[",~index,"]"," = ",~真值
		YDWESetLocalVariableBooleanArrayHint="为真值局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableUnit="设置 单位 局部变量 [Y]"
		YDWESetLocalVariableUnit="设置 local_",~u," = ",~单位
		YDWESetLocalVariableUnitHint="为单位局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableUnitArray="设置 单位 局部变量数组 [Y]"
		YDWESetLocalVariableUnitArray="设置 local_",~u,"[",~index,"]"," = ",~单位
		YDWESetLocalVariableUnitArrayHint="为单位局部变量赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableUnitID="设置 单位类型 局部变量 [Y]"
		YDWESetLocalVariableUnitID="设置 local_",~uid," = ",~单位类型
		YDWESetLocalVariableUnitIDHint="为单位类型局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableUnitIDArray="设置 单位类型 局部变量数组 [Y]"
		YDWESetLocalVariableUnitIDArray="设置 local_",~uid,"[",~index,"]"," = ",~单位类型
		YDWESetLocalVariableUnitIDArrayHint="为单位类型局部变量赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableAbilityID="设置 技能类型 局部变量 [Y]"
		YDWESetLocalVariableAbilityID="设置 local_",~ab," = ",~技能
		YDWESetLocalVariableAbilityIDHint="为单位类型局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableAbilityIDArray="设置 技能类型 局部变量数组 [Y]"
		YDWESetLocalVariableAbilityIDArray="设置 local_",~ab,"[",~index,"]"," = ",~技能
		YDWESetLocalVariableAbilityIDArrayHint="为单位类型局部变量赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableItem="设置 物品 局部变量 [Y]"
		YDWESetLocalVariableItem="设置 local_",~it," = ",~物品
		YDWESetLocalVariableItemHint="为物品局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableItemArray="设置 物品 局部变量数组 [Y]"
		YDWESetLocalVariableItemArray="设置 local_",~it,"[",~index,"]"," = ",~物品
		YDWESetLocalVariableItemArrayHint="为物品局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableItemID="设置 物品类型 局部变量 [Y]"
		YDWESetLocalVariableItemID="设置 local_",~itid," = ",~物品类型
		YDWESetLocalVariableItemIDHint="为物品类型局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableItemIDArray="设置 物品类型 局部变量数组 [Y]"
		YDWESetLocalVariableItemIDArray="设置 local_",~itid,"[",~index,"]"," = ",~物品类型
		YDWESetLocalVariableItemIDArrayHint="为物品类型局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableLocation="设置 点 局部变量 [Y]"
		YDWESetLocalVariableLocation="设置 local_",~point," = ",~点
		YDWESetLocalVariableLocationHint="为点局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableLocationArray="设置 点 局部变量数组 [Y]"
		YDWESetLocalVariableLocationArray="设置 local_",~point,"[",~index,"]"," = ",~点
		YDWESetLocalVariableLocationArrayHint="为点局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableGroup="设置 单位组 局部变量 [Y]"
		YDWESetLocalVariableGroup="设置 local_",~g," = ",~单位组
		YDWESetLocalVariableGroupHint="为单位组局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableGroupArray="设置 单位组 局部变量数组 [Y]"
		YDWESetLocalVariableGroupArray="设置 local_",~g,"[",~index,"]"," = ",~单位组
		YDWESetLocalVariableGroupArrayHint="为单位组局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableEffect="设置 特效 局部变量 [Y]"
		YDWESetLocalVariableEffect="设置 local_",~e," = ",~特效
		YDWESetLocalVariableEffectHint="为特效局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableEffectArray="设置 特效 局部变量数组 [Y]"
		YDWESetLocalVariableEffectArray="设置 local_",~e,"[",~index,"]"," = ",~特效
		YDWESetLocalVariableEffectArrayHint="为特效局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
	YDWESetLocalVariableRect="设置 地区 局部变量 [Y]"
		YDWESetLocalVariableRect="设置 local_",~rt," = ",~地区
		YDWESetLocalVariableRectHint="为地区局部变量赋值，参数处填入该变量的名字;该变量在本条触发器内有效。"
	YDWESetLocalVariableRectArray="设置 地区 局部变量数组 [Y]"
		YDWESetLocalVariableRectArray="设置 local_",~rt,"[",~index,"]"," = ",~地区
		YDWESetLocalVariableRectArrayHint="为地区局部变量数组赋值，参数处填入该变量的名字和数组索引;该变量在本条触发器内有效。"
// YD Function
	YDWESetAttackDamageWeaponType="设置默认 攻击/伤害/武器 类型 [Y]"
		YDWESetAttackDamageWeaponType="设置默认攻击类型为 ",~攻击类型,"，伤害类型为 ",~伤害类型,"，武器类型为 ",~武器类型
		YDWESetAttackDamageWeaponTypeHint="设置一些技能（如钩子、月神箭）需要用到的攻击|伤害|武器类型，系统会按设置的攻击|伤害|武器类型对目标造成伤害。"
	YDWEFlyEnable="设置单位可以飞行 [Y]"
		YDWEFlyEnable="让单位 ",~地面单位," 变得可以飞行。"
		YDWEFlyEnableHint="让一个地面单位变得可以飞行，可以设置其飞行高度。"
	YDWESetMapLimitCoordinate="设置地图边界坐标 [Y]"
		YDWESetMapLimitCoordinate="设置地图的边界坐标为 ( X坐标最小值 ",~实数,"，X坐标最大值 ",~实数,"，Y坐标最小值 ",~实数,"，Y坐标最大值 ",~实数," )"
		YDWESetMapLimitCoordinateHint="边界坐标的设置会影响钩子、跳跃等技能在地图边界处的表现形式；默认的边界坐标是镜头范围的边界,新手慎用本设置!"
	YDWELifeChange="设置单位生命上限 [Y]"
		YDWELifeChange="设置 ",~单位," 的生命上限 ",~变化," ",~整数," ，关联技能为 ",~辅助技能
		YDWELifeChangeHint="如果修改后单位生命上限小于0，单位会立即死亡；关联技能的设置请参考example文件夹下的辅助地图。"
	YDWEManaChange="设置单位魔法上限 [Y]"
		YDWEManaChange="设置 ",~单位," 的魔法上限 ",~变化," ",~整数," ，关联技能为 ",~辅助技能
		YDWEManaChangeHint="如果修改后单位魔法上限小于0，单位的魔法栏将消失；关联技能的设置请参考example文件夹下的辅助地图。"
// YD Load
	YDWEFlushMissionByInteger="清空 目录 　(整数路径) [Y]"
		YDWEFlushMissionByInteger="清空目录-> ",~整数
		YDWEFlushMissionByIntegerHint="通过输入的路径，系统会根据当前魔兽版本从GameCache或HashTable上清空目录。"
	YDWESaveIntegerByInteger="存储 整数 　(整数路径) [Y]"
		YDWESaveIntegerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储整数-> ",~整数
		YDWESaveIntegerByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储整数数据。"
	YDWESaveRealByInteger="存储 实数 　(整数路径) [Y]"
		YDWESaveRealByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储实数-> ",~实数
		YDWESaveRealByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储实数数据。"
	YDWESaveStringByInteger="存储 字符串 　(整数路径) [Y]"
		YDWESaveStringByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储字符串-> ",~字符串
		YDWESaveStringByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储字符串数据。"
	YDWESaveBooleanByInteger="存储 真值 　(整数路径) [Y]"
		YDWESaveBooleanByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储真值-> ",~真值
		YDWESaveBooleanByIntegerHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储真值数据。"
	YDWESaveUnitByInteger="存储 单位 　(整数路径) [Y]"
		YDWESaveUnitByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储单位-> ",~单位
		YDWESaveUnitByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位数据。"
	YDWESaveUnitIDByInteger="存储 单位类型 　(整数路径) [Y]"
		YDWESaveUnitIDByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储单位类型 -> ",~单位类型
		YDWESaveUnitIDByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位类型数据。"
	YDWESaveAbilityIDByInteger="存储 技能 　(整数路径) [Y]"
		YDWESaveAbilityIDByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储技能 -> ",~技能
		YDWESaveAbilityIDByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储技能数据。"
	YDWESaveItemByInteger="存储 物品 　(整数路径) [Y]"
		YDWESaveItemByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储物品-> ",~物品
		YDWESaveItemByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品数据。"
	YDWESaveItemIDByInteger="存储 物品类型 　(整数路径) [Y]"
		YDWESaveItemIDByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储物品类型-> ",~物品类型
		YDWESaveItemIDByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品类型数据。"
	YDWESavePlayerByInteger="存储 玩家 　(整数路径) [Y]"
		YDWESavePlayerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储玩家-> ",~玩家
		YDWESavePlayerByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储玩家数据。"
	YDWESaveTimerByInteger="存储 计时器 　(整数路径) [Y]"
		YDWESaveTimerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储计时器-> ",~计时器
		YDWESaveTimerByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器数据。"
	YDWESaveTriggerByInteger="存储 触发器 　(整数路径) [Y]"
		YDWESaveTriggerByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储触发器-> ",~触发器
		YDWESaveTriggerByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器数据。"
	YDWESaveLocationByInteger="存储 点 　(整数路径) [Y]"
		YDWESaveLocationByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储点-> ",~点
		YDWESaveLocationByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储点数据。"
	YDWESaveGroupByInteger="存储 单位组 　(整数路径) [Y]"
		YDWESaveGroupByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储单位组-> ",~单位组
		YDWESaveGroupByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位组数据。"
	YDWESaveMultiboardByInteger="存储 多面板 　(整数路径) [Y]"
		YDWESaveMultiboardByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储多面板-> ",~多面板
		YDWESaveMultiboardByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板数据。"
	YDWESaveMultiboardItemByInteger="存储 多面板项目 　(整数路径) [Y]"
		YDWESaveMultiboardItemByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储多面板项目-> ",~多面板项目
		YDWESaveMultiboardItemByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板项目数据。"
	YDWESaveTextTagByInteger="存储 漂浮文字 　(整数路径) [Y]"
		YDWESaveTextTagByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储漂浮文字-> ",~漂浮文字
		YDWESaveTextTagByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储漂浮文字数据。"
	YDWESaveLightningByInteger="存储 闪电 　(整数路径) [Y]"
		YDWESaveLightningByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储闪电-> ",~闪电
		YDWESaveLightningByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储闪电数据。"
	YDWESaveRegionByInteger="存储 区域 　(整数路径) [Y]"
		YDWESaveRegionByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储区域-> ",~区域
		YDWESaveRegionByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储区域数据。"
	YDWESaveRectByInteger="存储 地区 　(整数路径) [Y]"
		YDWESaveRectByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储地区-> ",~地区
		YDWESaveRectByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储地区数据。"
	YDWESaveLeaderboardByInteger="存储 排行榜 　(整数路径) [Y]"
		YDWESaveLeaderboardByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储排行榜-> ",~排行榜
		YDWESaveLeaderboardByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储排行榜数据。"
	YDWESaveEffectByInteger="存储 特效 　(整数路径) [Y]"
		YDWESaveEffectByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储特效-> ",~特效
		YDWESaveEffectByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储特效数据。"
	YDWESaveDestructableByInteger="存储 可破坏物 　(整数路径) [Y]"
		YDWESaveDestructableByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储可破坏物-> ",~可破坏物
		YDWESaveDestructableByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可破坏物数据。"
	YDWESaveTriggerConditionByInteger="存储 触发器条件 　(整数路径) [Y]"
		YDWESaveTriggerConditionByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储触发器条件-> ",~触发器条件
		YDWESaveTriggerConditionByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器条件数据。"
	YDWESaveTriggerActionByInteger="存储 触发器动作 　(整数路径) [Y]"
		YDWESaveTriggerActionByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储触发器动作-> ",~触发器动作
		YDWESaveTriggerActionByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器动作数据。"
	YDWESaveTriggerEventByInteger="存储 事件 　(整数路径) [Y]"
		YDWESaveTriggerEventByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储事件-> ",~事件
		YDWESaveTriggerEventByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储事件数据。"
	YDWESaveForceByInteger="存储 势力 　(整数路径) [Y]"
		YDWESaveForceByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储势力-> ",~势力
		YDWESaveForceByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储势力数据。"
	YDWESaveBoolexprByInteger="存储 布尔表达式 　(整数路径) [Y]"
		YDWESaveBoolexprByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储布尔表达式-> ",~布尔表达式
		YDWESaveBoolexprByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储布尔表达式数据。"
	YDWESaveSoundByInteger="存储 声音 　(整数路径) [Y]"
		YDWESaveSoundByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储声音-> ",~声音
		YDWESaveSoundByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储声音数据。"
	YDWESaveTimerDialogByInteger="存储 计时器窗口 　(整数路径) [Y]"
		YDWESaveTimerDialogByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储计时器窗口-> ",~计时器窗口
		YDWESaveTimerDialogByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器窗口数据。"
	YDWESaveTrackableByInteger="存储 可追踪物 　(整数路径) [Y]"
		YDWESaveTrackableByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储可追踪物-> ",~可追踪物
		YDWESaveTrackableByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可追踪物数据。"
	YDWESaveDialogByInteger="存储 对话框 　(整数路径) [Y]"
		YDWESaveDialogByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储对话框-> ",~对话框
		YDWESaveDialogByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框数据。"
	YDWESaveButtonByInteger="存储 对话框按钮 　(整数路径) [Y]"
		YDWESaveButtonByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储对话框按钮-> ",~对话框按钮
		YDWESaveButtonByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框按钮数据。"
	YDWESaveQuestByInteger="存储 任务 　(整数路径) [Y]"
		YDWESaveQuestByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储任务-> ",~任务
		YDWESaveQuestByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务数据。"
	YDWESaveQuestItemByInteger="存储 任务目标项 　(整数路径) [Y]"
		YDWESaveQuestItemByInteger="存储目录-> ",~整数,"，标签-> ",~整数,"，存储任务目标项-> ",~任务目标项
		YDWESaveQuestItemByIntegerHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务目标项数据。"
	YDWEFlushMissionByString="清空 目录 (字符串路径) [Y]"
		YDWEFlushMissionByString="清空目录-> ",~字符串
		YDWEFlushMissionByStringHint="通过输入的路径，系统会根据当前魔兽版本从GameCache或HashTable上清空目录。"
	YDWESaveIntegerByString="存储 整数 (字符串路径) [Y]"
		YDWESaveIntegerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储整数-> ",~整数
		YDWESaveIntegerByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储整数数据。"
	YDWESaveRealByString="存储 实数 (字符串路径) [Y]"
		YDWESaveRealByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储实数-> ",~实数
		YDWESaveRealByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储实数数据。"
	YDWESaveStringByString="存储 字符串 (字符串路径) [Y]"
		YDWESaveStringByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储字符串-> ",~字符串
		YDWESaveStringByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储字符串数据。"
	YDWESaveBooleanByString="存储 真值 (字符串路径) [Y]"
		YDWESaveBooleanByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储真值-> ",~真值
		YDWESaveBooleanByStringHint="通过输入的路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储真值数据。"
	YDWESaveUnitByString="存储 单位 (字符串路径) [Y]"
		YDWESaveUnitByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储单位-> ",~单位
		YDWESaveUnitByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位数据。
	YDWESaveUnitIDByString="存储 单位类型 (字符串路径) [Y]"
		YDWESaveUnitIDByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储单位类型-> ",~单位类型
		YDWESaveUnitIDByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位类型数据。
	YDWESaveAbilityIDByString="存储 技能 (字符串路径) [Y]"
		YDWESaveAbilityIDByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储技能-> ",~技能
		YDWESaveAbilityIDByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储技能数据。
	YDWESaveItemByString="存储 物品 (字符串路径) [Y]"
		YDWESaveItemByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储物品-> ",~物品
		YDWESaveItemByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品数据。
	YDWESaveItemIDByString="存储 物品类型 (字符串路径) [Y]"
		YDWESaveItemIDByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储物品类型-> ",~物品类型
		YDWESaveItemIDByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储物品类型数据。
	YDWESavePlayerByString="存储 玩家 (字符串路径) [Y]"
		YDWESavePlayerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储玩家-> ",~玩家
		YDWESavePlayerByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储玩家数据。
	YDWESaveTimerByString="存储 计时器 (字符串路径) [Y]"
		YDWESaveTimerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储计时器-> ",~计时器
		YDWESaveTimerByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器数据。
	YDWESaveTriggerByString="存储 触发器 (字符串路径) [Y]"
		YDWESaveTriggerByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储触发器-> ",~触发器
		YDWESaveTriggerByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器数据。
	YDWESaveLocationByString="存储 点 (字符串路径) [Y]"
		YDWESaveLocationByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储点-> ",~点
		YDWESaveLocationByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储点数据。
	YDWESaveGroupByString="存储 单位组 (字符串路径) [Y]"
		YDWESaveGroupByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储单位组-> ",~单位组
		YDWESaveGroupByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储单位组数据。
	YDWESaveMultiboardByString="存储 多面板 (字符串路径) [Y]"
		YDWESaveMultiboardByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储多面板-> ",~多面板
		YDWESaveMultiboardByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板数据。
	YDWESaveMultiboardItemByString="存储 多面板项目 (字符串路径) [Y]"
		YDWESaveMultiboardItemByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储多面板项目-> ",~多面板项目
		YDWESaveMultiboardItemByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储多面板项目数据。
	YDWESaveTextTagByString="存储 漂浮文字 (字符串路径) [Y]"
		YDWESaveTextTagByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储漂浮文字-> ",~漂浮文字
		YDWESaveTextTagByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储漂浮文字数据。
	YDWESaveLightningByString="存储 闪电 (字符串路径) [Y]"
		YDWESaveLightningByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储闪电-> ",~闪电
		YDWESaveLightningByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储闪电数据。
	YDWESaveRegionByString="存储 区域 (字符串路径) [Y]"
		YDWESaveRegionByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储区域-> ",~区域
		YDWESaveRegionByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储区域数据。
	YDWESaveRectByString="存储 地区 (字符串路径) [Y]"
		YDWESaveRectByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储地区-> ",~地区
		YDWESaveRectByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储地区数据。
	YDWESaveLeaderboardByString="存储 排行榜 (字符串路径) [Y]"
		YDWESaveLeaderboardByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储排行榜-> ",~排行榜
		YDWESaveLeaderboardByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储排行榜数据。
	YDWESaveEffectByString="存储 特效 (字符串路径) [Y]"
		YDWESaveEffectByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储特效-> ",~特效
		YDWESaveEffectByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储特效数据。
	YDWESaveDestructableByString="存储 可破坏物 (字符串路径) [Y]"
		YDWESaveDestructableByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储可破坏物-> ",~可破坏物
		YDWESaveDestructableByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可破坏物数据。
	YDWESaveTriggerConditionByString="存储 触发器条件 (字符串路径) [Y]"
		YDWESaveTriggerConditionByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储触发器条件-> ",~触发器条件
		YDWESaveTriggerConditionByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器条件数据。
	YDWESaveTriggerActionByString="存储 触发器动作 (字符串路径) [Y]"
		YDWESaveTriggerActionByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储触发器动作-> ",~触发器动作
		YDWESaveTriggerActionByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储触发器动作数据。
	YDWESaveTriggerEventByString="存储 事件 (字符串路径) [Y]"
		YDWESaveTriggerEventByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储事件-> ",~事件
		YDWESaveTriggerEventByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储事件数据。
	YDWESaveForceByString="存储 势力 (字符串路径) [Y]"
		YDWESaveForceByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储势力-> ",~势力
		YDWESaveForceByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储势力数据。
	YDWESaveBoolexprByString="存储 布尔表达式 (字符串路径) [Y]"
		YDWESaveBoolexprByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储布尔表达式-> ",~布尔表达式
		YDWESaveBoolexprByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储布尔表达式数据。
	YDWESaveSoundByString="存储 声音 (字符串路径) [Y]"
		YDWESaveSoundByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储声音-> ",~声音
		YDWESaveSoundByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储声音数据。
	YDWESaveTimerDialogByString="存储 计时器窗口 (字符串路径) [Y]"
		YDWESaveTimerDialogByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储计时器窗口-> ",~计时器窗口
		YDWESaveTimerDialogByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储计时器窗口数据。
	YDWESaveTrackableByString="存储 可追踪物 (字符串路径) [Y]"
		YDWESaveTrackableByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储可追踪物-> ",~可追踪物
		YDWESaveTrackableByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储可追踪物数据。
	YDWESaveDialogByString="存储 对话框 (字符串路径) [Y]"
		YDWESaveDialogByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储对话框-> ",~对话框
		YDWESaveDialogByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框数据。
	YDWESaveButtonByString="存储 对话框按钮 (字符串路径) [Y]"
		YDWESaveButtonByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储对话框按钮-> ",~对话框按钮
		YDWESaveButtonByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储对话框按钮数据。
	YDWESaveQuestByString="存储 任务 (字符串路径) [Y]"
		YDWESaveQuestByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储任务-> ",~任务
		YDWESaveQuestByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务数据。"
	YDWESaveQuestItemByString="存储 任务目标项 (字符串路径) [Y]"
		YDWESaveQuestItemByString="存储目录-> ",~字符串,"，标签-> ",~字符串,"，存储任务目标项 -> ",~任务目标项
		YDWESaveQuestItemByStringHint="通过输入路径，系统会根据当前魔兽版本采用Return bug+GC或HashTable存储任务目标项数据。"